<SOS>for i in range(n):<tab>n未満の非負整数を順にiとして<EOS>
<SOS>ans = max(ans, i * j)<tab>ansと、iとjの積の大きい方を新しいansとする<EOS>
<SOS>if p == k * k and i + j + k == 1000:<tab>もしpがkの自乗と等しく、かつiとjとkの和が1000であれば<EOS>
<SOS>rs += ch<tab>rsにchを足す<EOS>
<SOS>return a % n == 0<tab>aがnで割り切れるならTrue、そうでないならFalseを返す<EOS>
<SOS>primes = [True] * (n + 1)<tab>primesにn+1個のTrueからなるリストを代入<EOS>
<SOS>facts[x + 1] = facts[x] * (x + 1)<tab>factsのx+1番目の要素にx番目の要素とx+1の積を代入<EOS>
<SOS>ret = []<tab>retを空のリストとする<EOS>
<SOS>else:<tab>ループが最後まで処理された場合<EOS>
<SOS>n /= a<tab>nをaで割る<EOS>
<SOS>def euler019_names_of_the_day(y, m, d):<tab>yとmとdを引数とする関数euler019_names_of_the_dayを定義<EOS>
<SOS>def euler013_front_n_slice(s, n):<tab>sとnを引数とする関数euler013_front_n_sliceを定義<EOS>
<SOS>return [1]<tab>1のみからなるリストを返す<EOS>
<SOS>while count < 10001:<tab>countが10001未満である間<EOS>
<SOS>ret.insert(0, n % 10)<tab>retの先頭にnを10で割った余りを追加する<EOS>
<SOS>def euler011_over_or_equal(a, b):<tab>aとbを引数とする関数euler011_over_or_equalの定義<EOS>
<SOS>def euler004_n_slice(s, n):<tab>sとnを引数とする関数euler004_n_sliceの定義<EOS>
<SOS>for ch in s:<tab>s内の各要素をchとして<EOS>
<SOS>for k in range(j, 1000):<tab>j以上1000未満の整数kについて<EOS>
<SOS>if i == 2:<tab>iが2であれば<EOS>
<SOS>sl.pop(0)<tab>slの最初の要素を削除する<EOS>
<SOS>s = str(fact)<tab>sにfactの文字列表現を代入<EOS>
<SOS>for ch in q:<tab>qの各要素を前から順にchとして<EOS>
<SOS>ret = []<tab>retを空リストとする<EOS>
<SOS>for ch in s:<tab>sの各要素を順にchとして<EOS>
<SOS>while n % a == 0:<tab>nがaで割り切れる間<EOS>
<SOS>return y % 400 == 0 or ((not y % 100 == 0) and y % 4 == 0)<tab>yが400で割り切れるか、100で割り切れずに4で割り切れる場合True、そうでない場合Falseを返す。<EOS>
<SOS>def euler010_n_is_prime(n):<tab>nを引数とする関数euler010_n_is_primeの定義<EOS>
<SOS>q = str(n)<tab>qにnの文字列表現を格納<EOS>
<SOS>gamma = -1 * int(y / 100) + 5<tab>gammaにyを100で割った整数部分の-1倍に5を足したものを代入<EOS>
<SOS>def euler009_is_sum_equation1000(tp):<tab>tpを引数とする関数euler009_is_sum_equation1000の定義<EOS>
<SOS>ret *= (x + 1)<tab>retにx+1を掛ける<EOS>
<SOS>m = max(m, q[i*20+j] * q[(i+1)*20+j+1] * q[(i+2)*20+j+2] * q[(i+3)*20+j+3])<tab>現在のmと(q[i*20+j] * q[(i+1)*20+j+1] * q[(i+2)*20+j+2] * q[(i+3)*20+j+3])のうち大きい方を新しいmとする<EOS>
<SOS>def euler004_multiple_a(a, b):<tab>aとbを引数とする関数euler004_multiple_aの定義<EOS>
<SOS>return res<tab>resを返す<EOS>
<SOS>for i, ch in enumerate(s):<tab>chをsの各要素、iをその番号として<EOS>
<SOS>a = 0<tab>aに0を代入<EOS>
<SOS>def euler013_query_n_sum(q, n):<tab>qとnを引数とする関数euler013_query_n_sumを定義<EOS>
<SOS>if a != 0 and a <= 20:<tab>もしaが0でなくて、かつaが20以下であれば<EOS>
<SOS>l = [ i for i in range(2, int(math.sqrt(p)) + 1) if p % i == 0 ]<tab>2からpの平方根までの整数iのうち、pを割り切ることができるもののリストをlに代入<EOS>
<SOS>a = ""<tab>aに空文字列を代入<EOS>
<SOS>p = []<tab>pに空リストを代入<EOS>
<SOS>b = ""<tab>bに空文字列を代入<EOS>
<SOS>return int(a / p)<tab>a割るpの整数部分を返す<EOS>
<SOS>ret.append(n)<tab>retの末尾にnを追加する<EOS>
<SOS>ret += len(word[int(n / 100)])<tab>wordのn/100番目の要素の長さをretに足す<EOS>
<SOS>for i in range(20):<tab>20未満の非負整数iを小さい方から順に調べる<EOS>
<SOS>if p[i]:<tab>もしpのi番目が真であれば<EOS>
<SOS>count += 1<tab>countに1を足す<EOS>
<SOS>for i in range(s, e):<tab>s以上e未満の整数を小さい方からiとして<EOS>
<SOS>for i in sl:<tab>sl内の各要素をiとして<EOS>
<SOS>for i in range(2, a):<tab>2以上a未満の整数を順にiとして<EOS>
<SOS>def euler017():<tab>関数euler017の定義<EOS>
<SOS>ret += len(word[n % 10])<tab>wordのn%10番目の要素の長さをretに足す<EOS>
<SOS>return ret<tab>retを返す<EOS>
<SOS>ret += len(word[n])<tab>retにwordのn番目の要素の長さを足す<EOS>
<SOS>def euler010_list_sum_a(l):<tab>lを引数とする関数euler010_list_sum_aの定義<EOS>
<SOS>def euler011_right_point(x, y):<tab>x,yを引数とする関数euler011_right_pointの定義<EOS>
<SOS>dinomials = [0] * 21<tab>dinominalsを0が21個並んだリストとする<EOS>
<SOS>return n * n<tab>nの自乗を返す<EOS>
<SOS>ret.insert(i + 1, l[i] + l[i + 1])<tab>retのi+1番目にlのi番目とi+1番目の要素の和を追加する<EOS>
<SOS>for i in range(2, n + 1):<tab>2からn+1までの整数を順にiとして<EOS>
<SOS>for i in range(2, n + 1):<tab>2からnまでの各整数を順にiとして<EOS>
<SOS>def euler007_n_division_a(a, n):<tab>aとnを引数とする関数euler007_n_division_aの定義<EOS>
<SOS>ret.append(i)<tab>retの末尾にiを追加<EOS>
<SOS>return fl<tab>flを返す<EOS>
<SOS>def euler016():<tab>関数euler016の定義<EOS>
<SOS>if len(l) == 0:<tab>もしlの長さが0であれば<EOS>
<SOS>t = (int(s / 2), s + 1)<tab>tにsを2で割った商とs+1の組を代入<EOS>
<SOS>elif a == 2:<tab>そうでなく、もしaが2であれば<EOS>
<SOS>for i in range(pl[-1], x + 1):<tab>plの末尾要素からxまでの数を順にiとして<EOS>
<SOS>def euler009_is_sum_equation1000_a(tp):<tab>tpを引数とする関数euler009_is_sum_equation1000_aの定義<EOS>
<SOS>return sum(range(a, b))<tab>a以上b未満の整数の総和を返す<EOS>
<SOS>if judge and n % i == 0:<tab>もしjudgeが真でかつnがiで割り切れるなら<EOS>
<SOS>sumofsq += (i + 1) * (i + 1)<tab>sumofsqにi+1の自乗を足す<EOS>
<SOS>n = int(n / 2) if n % 2 == 0 else n * 3 + 1<tab>nが2で割り切れる場合nを2で割った商を、そうでない場合nの3倍に1を足した数をnに代入<EOS>
<SOS>primes = []<tab>primesを空リストとする<EOS>
<SOS>if n == 1:<tab>もしnが1であれば<EOS>
<SOS>def euler008_all_product(l):<tab>lを引数とする関数euler008_all_productの定義<EOS>
<SOS>b.append(n)<tab>bの末尾にnを追加<EOS>
<SOS>def euler012():<tab>関数euler012の定義<EOS>
<SOS>return a * b<tab>aとbの積を返す<EOS>
<SOS>return len(dl) == 0<tab>dlが空であればTrue、そうでなければFalseを返す<EOS>
<SOS>while i * i < n:<tab>iの自乗がn未満の間<EOS>
<SOS>for i in range(b):<tab>以下の処理をb回繰り返す<EOS>
<SOS>def euler012_a_over_b(a, b):<tab>aとbを引数とする関数euler012_a_over_bの定義<EOS>
<SOS>if i % j == 0:<tab>iがjで割り切れるなら<EOS>
<SOS>def euler002_add_param(a, b):<tab>aとbを引数とする関数euler002_add_paramの定義<EOS>
<SOS>if n % x == 0:<tab>もしnがxで割り切れるなら<EOS>
<SOS>return sum(l)<tab>l内の要素の総和を返す<EOS>
<SOS>return sum(q)<tab>qの全要素の総和を返す<EOS>
<SOS>if len(fl) < x:<tab>もしflの長さがxより小さければ<EOS>
<SOS>pl = [2]<tab>plに2のみからなるリストを代入<EOS>
<SOS>return word[n % 10]<tab>wordのn%10番目を返す<EOS>
<SOS>l.append(a)<tab>lの末尾にaを追加する<EOS>
<SOS>a = n - 2 <tab>aにnから2を引いた数を代入<EOS>
<SOS>dinomials[i] = int(facts[20] / (facts[i] * facts[20 - i]))<tab>factsの20番目の要素をi番目の要素と20-i番目の要素の積で割った結果をdinominalsのi番目に格納する<EOS>
<SOS>return sumofsq - sqofsum<tab>sumofsqとsqofsumの差を返す<EOS>
<SOS>a /= x<tab>aをxで割る<EOS>
<SOS>for i in range(len(l)):<tab>lの各要素の番号を順にiとして<EOS>
<SOS>ret *= a<tab>aをretに掛ける<EOS>
<SOS>res = b - a<tab>resにbとaの差を代入<EOS>
<SOS>return sum(l)<tab>lの全要素の総和を返す<EOS>
<SOS>p[i] = False<tab>pのi番目にFalseを代入<EOS>
<SOS>def euler008_list_slice(l, s, c):<tab>lとsとcを引数とする関数euler008_list_sliceの定義<EOS>
<SOS>return int(facts[n] / (facts[r] * facts[n - r]))<tab>factsのn番目の要素をr番目とn-r番目の要素の積で割った結果を返す<EOS>
<SOS>j += 1<tab>jに1を足す<EOS>
<SOS>def euler004():<tab>関数euler004の定義<EOS>
<SOS>ret.append(ret[-1] + d)<tab>retの末尾要素にdを加えたものをretの末尾に追加する<EOS>
<SOS>pl.append(i)<tab>plにiを追加する<EOS>
<SOS>for j in range(i + i, n + 1, i):<tab>iの倍からnまでの数をi個飛ばしで順にjとして<EOS>
<SOS>for i, n in enumerate(cl):<tab>clの各要素をn、iを番号として繰り返し<EOS>
<SOS>ret += len(word[a % 10])<tab>retにwordのa%10番目の要素の長さを足す<EOS>
<SOS>s += d<tab>sにdを足す<EOS>
<SOS>for x in l:<tab>lに含まれる各要素をxに代入して繰り返し<EOS>
<SOS>def euler011_string_space_split(s):<tab>sを引数とする関数euler011_string_space_splitの定義<EOS>
<SOS>return not l<tab>lが偽であればTrue、そうでなければFalseを返す<EOS>
<SOS>cl[m] = l<tab>clのm番目をlにする<EOS>
<SOS>while a > 0:<tab>aが0より大きい間<EOS>
<SOS>def euler011_lower_left_point(x, y):<tab>x,yを引数とする関数euler011_lower_left_pointの定義<EOS>
<SOS>def euler010_list_sum(l):<tab>lを引数とする関数euler010_list_sumの定義<EOS>
<SOS>for i in range(20):<tab>0から20未満の整数を順にiとして<EOS>
<SOS>def euler005_expmax_a(p, n):<tab>pとnを引数とする関数euler005_expmax_aの定義<EOS>
<SOS>def euler005_enum_prime_a(n):<tab>nを引数とする関数euler005_enum_prime_aの定義<EOS>
<SOS>def euler004_half_digit(n):<tab>nを引数とする関数euler004_half_digitの定義<EOS>
<SOS>return judge<tab>judgeを返す<EOS>
<SOS>ret.append(s)<tab>retの末尾にsを追加する<EOS>
<SOS>def euler009_n_square(n):<tab>nを引数とする関数euler009_n_squareの定義<EOS>
<SOS>return p**int(n**(1/p))<tab>pの(nのp乗根の整数部分)乗を返す<EOS>
<SOS>b = []<tab>bに空リストを代入<EOS>
<SOS>if ch == " ":<tab>もしchが半角スペースなら<EOS>
<SOS>ret.append(l[s + i])<tab>lのs+i番目の要素をretに追加する<EOS>
<SOS>def euler007_is_less(a, b):<tab>aとbを引数とする関数euler007_is_lessの定義<EOS>
<SOS>def euler017_digit_count(n):<tab>nを引数とする関数euler017_digit_countを定義<EOS>
<SOS>for i in range(l):<tab>以下の処理をl回繰り返す<EOS>
<SOS>res = 0<tab>resに0を代入<EOS>
<SOS>for i in range(int(20**(1/p))):<tab>20の1/p乗未満の非負整数を順にiとして<EOS>
<SOS>fibs.append(fibs[-1] + fibs[-2])<tab>fibsの末尾要素とその次の要素を足してfibsの末尾に追加<EOS>
<SOS>for x in range(n):<tab>n未満の非負整数を小さい方から順にxとして<EOS>
<SOS>ret = [l[0], l[-1]]<tab>retをlの最初の要素と末尾の要素からなるリストとする<EOS>
<SOS>for i, ch in enumerate(a):<tab>chをaの各要素、iをその番号として<EOS>
<SOS>for i in range(2, n + 1):<tab>2からnまでの数を順にiとして<EOS>
<SOS>res = 1<tab>resを1とする<EOS>
<SOS>for k in range(sep):<tab>sep未満の非負整数を順にkとして<EOS>
<SOS>def euler006_sum_a_to_b_a(a, b):<tab>aとbを引数とする関数euler006_sum_a_to_b_aの定義<EOS>
<SOS>fc *= fl[x]<tab>fcにflのx番目の要素を掛ける<EOS>
<SOS>else:<tab>上記のいずれでもなければ<EOS>
<SOS>return b <= a<tab>bがa以下であればTrue、そうでなければFalseを返す<EOS>
<SOS>if j <= 16:<tab>もしjが16以下であれば<EOS>
<SOS>return dinomials[0]<tab>dinominalsの最初の要素を返す<EOS>
<SOS>return (x - 1, y + 1)<tab>x-1とy+1の組を返す<EOS>
<SOS>def euler010():<tab>関数euler010の定義<EOS>
<SOS>def euler011_lower_right_point(x, y):<tab>x,yを引数とする関数euler011_lower_right_pointの定義<EOS>
<SOS>ret = 1<tab>retに1を代入<EOS>
<SOS>d = 365<tab>dに365を代入<EOS>
<SOS>l.append(y)<tab>lにyを追加する<EOS>
<SOS>return a == 1<tab>aが1であればTrue、そうでなければFalseを返す<EOS>
<SOS>a += 1<tab>aに1を足す<EOS>
<SOS>return int(n / 2) if n % 2 == 0 else n * 3 + 1<tab>nが2で割り切れるならnを2で割った商を、そうでないならnの3倍に1を足した数を返す<EOS>
<SOS>ans = 0<tab>ansに0を代入<EOS>
<SOS>a = len(s)<tab>aにsの長さを代入<EOS>
<SOS>for x in p:<tab>p内の各要素を順にxとして<EOS>
<SOS>sl.append(buf)<tab>slの末尾にbufを追加<EOS>
<SOS>def euler007_n_division(a, n):<tab>aとnを引数とする関数euler007_n_difisionの定義<EOS>
<SOS>while n % i == 0:<tab>nがiで割り切れる間<EOS>
<SOS>ret.append(i)<tab>retにiを追加<EOS>
<SOS>if s <= 1:<tab>もしsが1以下であれば<EOS>
<SOS>primes.append(i)<tab>primesにiを追加する<EOS>
<SOS>while int(n / 10) > 0:<tab>nを10で割った整数部分が0でない間繰り返し<EOS>
<SOS>def euler007_is_prime(a):<tab>aを引数とする関数euler007_is_primeの定義<EOS>
<SOS>judge = False<tab>judgeをFalseにする<EOS>
<SOS>a, b = b, a % b<tab>aにbを、bにaをbで割った余りを代入<EOS>
<SOS>q = []<tab>qに空リストを代入<EOS>
<SOS>count = 0<tab>countを0とする<EOS>
<SOS>p[i] = False<tab>pのi番目をFalseにする<EOS>
<SOS>if i <= 16:<tab>もしiが16以下であれば<EOS>
<SOS>m = 1<tab>mを1とする<EOS>
<SOS>def euler008_list_add(l, a):<tab>lとaを引数とする関数euler008_list_addの定義<EOS>
<SOS>grid = """""".split()<tab>gridに文字列を空白文字で分割したリストを代入<EOS>
<SOS>m = max(m, q[i*20+j] * q[(i+1)*20+j] * q[(i+2)*20+j] * q[(i+3)*20+j])<tab>現在のmと(q[i*20+j] * q[(i+1)*20+j] * q[(i+2)*20+j] * q[(i+3)*20+j])のうち大きい方を新しいmとする<EOS>
<SOS>q = []<tab>qに空のリストを代入<EOS>
<SOS>ret.append(i)<tab>retにiを追加する<EOS>
<SOS>for j in range(20):<tab>20未満の非負整数jを小さい方から順に調べる<EOS>
<SOS>for j in range(i + i, n + 1, i):<tab>iの自乗からnまでのi個飛ばしの整数をjとして<EOS>
<SOS>def euler017_digit_separate(n):<tab>nを引数とする関数euler017_digit_separateの定義<EOS>
<SOS>return l<tab>lを返す<EOS>
<SOS>def euler007_succ(a):<tab>aを引数とする関数euler007_succの定義<EOS>
<SOS>for y in range(1901, 2001):<tab>1901以上2001未満の整数を順にyとして<EOS>
<SOS>fl = []<tab>flに空リストを代入<EOS>
<SOS>def euler012_nth_triangular_number(n):<tab>nを引数とする関数euler012_nth_triangular_numberを定義<EOS>
<SOS>def euler009_is_pythagoras(a, b, c):<tab>aとbとcを引数とする関数euler009_is_pythagorasの定義<EOS>
<SOS>for i in range(100):<tab>100未満の非負整数を小さい方から順にiとして<EOS>
<SOS>return len(s)<tab>sの長さを返す<EOS>
<SOS>return a <= b<tab>aがb以下であればTrue、そうでなければFalseを返す<EOS>
<SOS>N = 10**6<tab>Nに10の6乗を代入<EOS>
<SOS>for i in range(s, s + (d * n), d):<tab>sからd個飛ばしでn個の整数をiとして<EOS>
<SOS>h = (d + int(26 * (m + 1) / 10) + (y % 100) + int((y % 100) / 4) + gamma) % 7<tab>hにd、26(m+1)/10の整数部分、yyを100で割った余り、y%100/4の整数部分、gammaを足した結果を代入<EOS>
<SOS>def euler004_string_reverse(s):<tab>sを引数とする関数euler004_string_reverseの定義<EOS>
<SOS>return (x + 1, y - 1)<tab>x+1とy-1の組を返す<EOS>
<SOS>for i in range(2, int(a**0.5) + 1):<tab>2からaの平方根までの整数を順にiとして<EOS>
<SOS>def euler015_combination(n, r):<tab>nとrを引数とする関数euler015_combinationの定義<EOS>
<SOS>for x in range(n):<tab>n未満の非負整数nを小さい方から順に<EOS>
<SOS>return (x - 1, y)<tab>x-1とyの組を返す<EOS>
<SOS>judge = True<tab>judgeにTrueを代入<EOS>
<SOS>return pl<tab>plを返す<EOS>
<SOS>def euler017_ones_to_string(n):<tab>nを引数とする関数euler017_ones_to_stringを定義<EOS>
<SOS>return (int)(a / 2) + (a % 2)<tab>aを2で割った商とsを2で割った余りの和を返す<EOS>
<SOS>def euler018():<tab>関数euler018の定義<EOS>
<SOS>return s == rs<tab>sとrsが等しければTrue、そうでなければFalseを返す<EOS>
<SOS>facts = [1] * (n + 1)<tab>factsに1がn+1個繋がったリストを格納<EOS>
<SOS>a = tn<tab>aをtnにする<EOS>
<SOS>if i < 10:<tab>もしiが10未満であれば<EOS>
<SOS>def euler012_is_list_empty_a(l):<tab>lを引数とする関数euler012_is_list_empty_aを定義<EOS>
<SOS>for i in range(5):<tab>5未満の非負整数iについて<EOS>
<SOS>sl = []<tab>slを空リストとする<EOS>
<SOS>i = 2<tab>iに2を代入<EOS>
<SOS>def euler004_n_bslice(s, n):<tab>sとnを引数とする関数euler004_n_bsliceの定義<EOS>
<SOS>while b != 0:<tab>bが0でない間<EOS>
<SOS>for i in range(n - 2):<tab>n-2未満の非負整数iを小さい方から順に調べる<EOS>
<SOS>def euler005_enum_prime_b(n):<tab>nを引数とする関数euler005_enum_prime_bの定義<EOS>
<SOS>ret = []<tab>retに空のリストを代入<EOS>
<SOS>while s < e:<tab>sがeより小さい間繰り返し<EOS>
<SOS>def euler003_n_morethan_square(a, n):<tab>aとnを引数とする関数euler003_n_morethan_squareの定義<EOS>
<SOS>while c < 500:<tab>cが500未満である間<EOS>
<SOS>if primes[i]:<tab>もしprimesのi番目がTrueであれば<EOS>
<SOS>ret += len(twoword[int(a / 10)])<tab>retにtowordのa/10番目の要素の長さを足す<EOS>
<SOS>sl = []<tab>slに空リストを代入<EOS>
<SOS>for i in range(2, int(n**0.5) + 1):<tab>2からnの平方根までの整数をiとして<EOS>
<SOS>if x % 2 == 0:<tab>xが2でわりきれるなら<EOS>
<SOS>for i in pl:<tab>pl内の各要素をiとして<EOS>
<SOS>return len(l) == 0<tab>lの長さが0であればTrue、そうでなければFalseを返す<EOS>
<SOS>tmp = [a]<tab>tmpをaのみからなるリストとする<EOS>
<SOS>if a % i == 0:<tab>aがiで割り切れるなら<EOS>
<SOS>for x in l:<tab>l内の全ての要素xについて<EOS>
<SOS>def euler004_is_equal(a, b):<tab>aとbを引数とする関数euler004_is_equalの定義<EOS>
<SOS>return p<tab>pを返す<EOS>
<SOS>return prime<tab>primeを返す<EOS>
<SOS>elif a == 0:<tab>そうでなくて、もしaが0であれば<EOS>
<SOS>def euler006_n_square(n):<tab>nを引数とする関数euler006_n_sequenceの定義<EOS>
<SOS>s += a<tab>sにaを足す<EOS>
<SOS>for j in range(999, 99, -1):<tab>99より大きく999以下の整数を大きい方から順にjとして<EOS>
<SOS>if n < 2:<tab>もしnが2より小さければ<EOS>
<SOS>while a % x == 0:<tab>aがxで割り切れる間<EOS>
<SOS>ret += len("hundredand")<tab>"hundredand"の文字数をretに足す<EOS>
<SOS>def euler017_string_length_a(s):<tab>sを引数とする関数euler017_string_length_aを定義<EOS>
<SOS>b += s[len(s) - k - 1]<tab>bにsの後ろからk番目の要素を足す<EOS>
<SOS>def euler003_n_divide_a(n, a):<tab>nとaを引数とする関数euler003_n_divide_aの定義<EOS>
<SOS>q = str(n)<tab>qをnの文字列表現とする<EOS>
<SOS>p.append(i)<tab>pの末尾にiを追加する<EOS>
<SOS>return a * a < n<tab>aの自乗がnより小さければTrue、そうでなければFalseを返す<EOS>
<SOS>def euler011_zero_to_n_list(n):<tab>nを引数とする関数euler011_zero_to_n_listの定義<EOS>
<SOS>ret += len("onethousand")<tab>retに"onethousand"の文字数を足す<EOS>
<SOS>primes[j] = False<tab>primesのj番目をFalseにする<EOS>
<SOS>def euler010_n_multiple_list(s, e, d):<tab>s,e,dを引数とする関数euler010_n_multiple_listの定義<EOS>
<SOS>ret += s[i]<tab>retにsのi番目の要素を足す<EOS>
<SOS>a *= p<tab>aにpを掛ける<EOS>
<SOS>for ch in grid:<tab>grid中の各要素を順にchとして<EOS>
<SOS>dl.append(i)<tab>dlにiを追加<EOS>
<SOS>break<tab>ループを抜ける<EOS>
<SOS>for j in range(2, int(x**0.5) + 1):<tab>2からxの平方根までの数を順にjとして<EOS>
<SOS>t = (s, int((s + 1) / 2))<tab>tにsとs+1を2で割った商の組を代入<EOS>
<SOS>if i < n:<tab>もしiがn未満であれば<EOS>
<SOS>n = int(n / 2) if n % 2 == 0 else n * 3 + 1<tab>nが2で割り切れるならnを2で割った商を、そうでないならnの3倍に1を足した数を新しいnとする<EOS>
<SOS>for j in range(i, 1000):<tab>i以上1000未満の整数jについて<EOS>
<SOS>fact = 1<tab>factに1を代入<EOS>
<SOS>fib = [1, 2]<tab>fibに1と2からなるリストを代入<EOS>
<SOS>if p[x]:<tab>もしpのx番目が真であれば<EOS>
<SOS>res += a<tab>resにaを足す<EOS>
<SOS>def euler011_upward_point(x, y):<tab>x,yを引数とする関数euler011_upward_pointの定義<EOS>
<SOS>for x in l:<tab>lの各要素を順にxとして<EOS>
<SOS>break<tab>ループから抜ける<EOS>
<SOS>a -= 1<tab>aから1を引く<EOS>
<SOS>for x in t:<tab>t内の各要素をxとして<EOS>
<SOS>return tn<tab>tnを返す<EOS>
<SOS>p += 1<tab>pに1を足す<EOS>
<SOS>def euler002():<tab>関数euler002の定義<EOS>
<SOS>n /= 10<tab>nを10で割る<EOS>
<SOS>def euler007_is_equale_zero(a):<tab>aを引数とする関数euler007_is_equale_zeroの定義<EOS>
<SOS>c = fc<tab>cをfcにする<EOS>
<SOS>def euler006():<tab>関数euler006の定義<EOS>
<SOS>ret = []<tab>retを空とする<EOS>
<SOS>s += 1<tab>sに1を足す<EOS>
<SOS>fl = [1] * 4 + [0] * 96<tab>flに1が4個と0が96個繋がったリストを代入<EOS>
<SOS>l = cl[n]<tab>lにclのn番目の要素を代入<EOS>
<SOS>else:<tab>ループが正常に終了した場合<EOS>
<SOS>while ret <= tn:<tab>retがtn以下の間繰り返し<EOS>
<SOS>c = 1<tab>cに1を代入<EOS>
<SOS>ret = [n % 10]<tab>retをnを10で割った余りのみからなるリストとする<EOS>
<SOS>return a + 1<tab>aに1を足した数を返す<EOS>
<SOS>buf += ch<tab>bufにchを加える<EOS>
<SOS>return (x + 1, y)<tab>x+1とyの組を返す<EOS>
<SOS>def euler012_is_coprime(a, b):<tab>aとbを引数とする関数euler012_is_coprimeの定義<EOS>
<SOS>sl.append(int(s[i]))<tab>slにsのi番目の要素の表す整数を追加<EOS>
<SOS>def euler012_count_division(n, a):<tab>nとaを引数とする関数euler012_count_divisionの定義<EOS>
<SOS>sd += 1<tab>sdに1を足す<EOS>
<SOS>for i in range(2, 20):<tab>2から20未満の整数を順にiとして<EOS>
<SOS>for x in range(n):<tab>n未満の非負整数xを小さい方から順に<EOS>
<SOS>for i, day in enumerate(days):<tab>dayをdaysの各要素、iをその番号として<EOS>
<SOS>def euler017_divid_integer_part(a, b):<tab>aとbを引数とする関数euler-17_divid_inateger_partを定義<EOS>
<SOS>for n in range(2, N):<tab>2からN未満の各数を順にnとして<EOS>
<SOS>n = 600851475143<tab>nに600851475143を代入<EOS>
<SOS>m = max(m, q[i*20+j] * q[i*20+j+1] * q[i*20+j+2] * q[i*20+j+3])<tab>現在のmと(q[i*20+j] * q[i*20+j+1] * q[i*20+j+2] * q[i*20+j+3])のうち大きい方を新しいmとする<EOS>
<SOS>for i in range(20):<tab>20未満の非負整数を小さい方から順にiとして<EOS>
<SOS>return i * j * k<tab>iとjとkの積を返す<EOS>
<SOS>for i in range(1, 1000):<tab>1以上1000未満の整数iについて<EOS>
<SOS>def euler008_elem_max(a, b):<tab>aとbを引数とする関数euler008_elem_maxの定義<EOS>
<SOS>ret += n<tab>retにnを足す<EOS>
<SOS>ret *= x<tab>retにxを掛ける<EOS>
<SOS>return s == 1000<tab>sが1000ならばTrue、そうでなければFalseを返す<EOS>
<SOS>def euler016_a_exp_b_a(a, b):<tab>aとbを引数とする関数euler016_a_exp_b_aの定義<EOS>
<SOS>elif n == 2:<tab>そうでなくて、もしnが2であれば<EOS>
<SOS>return fibs[-1]<tab>fibsの末尾要素を返す<EOS>
<SOS>tn = sum(range(1, s + 1))<tab>tnに1からsの総和を代入<EOS>
<SOS>facts = [1] * (n + 1)<tab>factsを1がn+1個並んだリストとする<EOS>
<SOS>if (y % 400 == 0 or ((not y % 100 == 0) and y % 4 == 0)) and i == 1:<tab>yが400で割り切れるか、100で割り切れずに4で割り切れ、さらにiが1である場合、<EOS>
<SOS>def euler011_less_or_equal_a(a, b):<tab>aとbを引数とする関数euler011_less_or_equal_aの定義<EOS>
<SOS>if 0 < n <= 2:<tab>もしnが0より大きく、かつ2以下であるなら<EOS>
<SOS>ret = [s]<tab>retにsのみからなるリストを代入<EOS>
<SOS>def euler012_is_list_empty(l):<tab>lを引数とする関数euler012_is_list_emptyを定義<EOS>
<SOS>def euler019():<tab>関数euler019の定義<EOS>
<SOS>while a % i == 0:<tab>aがiで割り切れる間<EOS>
<SOS>def euler011_upper_right_point(x, y):<tab>x,yを引数とする関数euler011_upper_right_pointの定義<EOS>
<SOS>def euler008_elem_max_a(a, b):<tab>aとbを引数とする関数euler008_elem_max_aの定義<EOS>
<SOS>s = (str)(n)<tab>sにnの文字列表現を代入<EOS>
<SOS>return sum(range(1, n + 1))<tab>1からnまでの整数の総和を返す<EOS>
<SOS>return fibs<tab>fibsを返す<EOS>
<SOS>def euler009():<tab>関数euler009の定義<EOS>
<SOS>fl[x] = nc<tab>flのx番目の要素をncにする<EOS>
<SOS>if n == 1:<tab>もしnが1と等しければ<EOS>
<SOS>while c < b:<tab>cがbより小さい間<EOS>
<SOS>return res <= 0<tab>resが0以下であればTrue、そうでなければFalseを返す<EOS>
<SOS>def euler012_range_prime_enumerate(s, e):<tab>sとeを引数とする関数euler012_range_prime_enumerateの定義<EOS>
<SOS>if x % i == 0:<tab>もしxがiで割り切れるなら<EOS>
<SOS>dl = []<tab>dlを空リストとする<EOS>
<SOS>for i in range(5, len(s)):<tab>5からsの要素数未満の整数iについて<EOS>
<SOS>m *= i<tab>mにiを掛ける<EOS>
<SOS>buf = ""<tab>bufを空文字列にする<EOS>
<SOS>j = 1<tab>jを1にする<EOS>
<SOS>if a % i == 0:<tab>もしaがiで割り切れれば<EOS>
<SOS>nc *= j<tab>ncにjを掛ける<EOS>
<SOS>ret -= 3<tab>retから3を引く<EOS>
<SOS>nc = 1<tab>ncに1を代入<EOS>
<SOS>def euler005_enum_prime(n):<tab>nを引数とする関数euler005_enum_primeの定義<EOS>
<SOS>for j in range(20):<tab>0から20未満の整数を順にjとして<EOS>
<SOS>def euler009_all_product(l):<tab>lを引数とする関数euler009_all_productの定義<EOS>
<SOS>a = 1<tab>aを1とする<EOS>
<SOS>def euler012_prime_factorize(n):<tab>nを引数とする関数euler012_prime_factorizeの定義<EOS>
<SOS>p = i * i + j * j<tab>pにiの自乗とjの自乗の和を代入<EOS>
<SOS>for n in range(1, 1001):<tab>1から1001未満の数を順にnとして<EOS>
<SOS>for j in range(2, int(i**0.5) + 1):<tab>2からiの平方根までの数を順にjとして<EOS>
<SOS>def euler011_zero_to_n_list_a(n):<tab>nを引数とする関数euler011_zero_to_n_list_aの定義<EOS>
<SOS>fact *= (i + 1)<tab>factにi+1を掛ける<EOS>
<SOS>if len(l) == 0:<tab>もしlが空なら<EOS>
<SOS>ret += s[len(s) - 1 - i]<tab>retにsの後ろからi番目の要素を足す<EOS>
<SOS>s += q[i]<tab>sにqのi番目を足す<EOS>
<SOS>return a * a + b * b == c * c<tab>aの自乗とbの自乗がcの自乗と等しければTrue、そうでなければFalseを返す<EOS>
<SOS>def euler008():<tab>関数euler008の定義<EOS>
<SOS>l = euler015_pascal_triangle(n - 1)<tab>euler015_pascal_triangleにn-1を渡した結果をlとする<EOS>
<SOS>q.append(int(ch))<tab>qの末尾ににchの表す整数を追加<EOS>
<SOS>for i in range(999, 99, -1):<tab>99より大きく999以下の整数を大きい方から順にiとして<EOS>
<SOS>dinomials[j] += dinomials[j + 1]<tab>dinominalsのj番目にj+1番目の要素を足す<EOS>
<SOS>for x in range(2, int(2000000**0.5) + 1):<tab>xを2から2000000の0.5乗までの間で変化させて繰り返し<EOS>
<SOS>def euler011_less_or_equal(a, b):<tab>aとbを引数とする関数euler011_less_or_equalの定義<EOS>
<SOS>for ch in s:<tab>s内の全ての要素を順にchとして<EOS>
<SOS>for j in prime:<tab>prime内の各要素をjとして<EOS>
<SOS>return a == 0<tab>aが0であればTrue、そうでなければFalseを返す<EOS>
<SOS>def euler014_list_enum(l):<tab>lを引数とする関数euler014_list_enumを定義<EOS>
<SOS>def euler005_expmax(p, n):<tab>pとnを引数とする関数euler005_expmaxの定義<EOS>
<SOS>ret += len(twoword[int(n / 10)])<tab>towordのn/10番目の要素の長さをretに足す<EOS>
<SOS>return True<tab>Trueを返す<EOS>
<SOS>ret = 0<tab>retに0を代入する<EOS>
<SOS>c += 1<tab>cに1を足す<EOS>
<SOS>return facts<tab>factsを返す<EOS>
<SOS>return int(a / b)<tab>aをbで割った整数部分を返す<EOS>
<SOS>for i in range(s, e + 1):<tab>sからeまでの数を順にiとして<EOS>
<SOS>prime = []<tab>primeに空のリストを代入<EOS>
<SOS>a -= n<tab>aからnを引く<EOS>
<SOS>pl = []<tab>plに空リストを代入<EOS>
<SOS>if 4 <= j and i <= 16:<tab>もしjが4以上でiが16以下であれば<EOS>
<SOS>l = []<tab>lに空リストを代入<EOS>
<SOS>def euler014_list_reverse(l):<tab>lを引数とする関数euler014_list_reverseを定義<EOS>
<SOS>m = 0<tab>mに0を代入<EOS>
<SOS>return sd<tab>sdを返す<EOS>
<SOS>p = 1<tab>pを1とする<EOS>
<SOS>def euler011():<tab>関数euler001の定義<EOS>
<SOS>def euler009_n_square_a(n):<tab>nを引数とする関数euler009_n_square_aの定義<EOS>
<SOS>return a < b<tab>aがbより小さければTrue、そうでなければFalseを返す<EOS>
<SOS>return m<tab>mを返す<EOS>
<SOS>ret.append(a)<tab>retの末尾にaを追加<EOS>
<SOS>return a**b<tab>aのb乗を返す<EOS>
<SOS>else:<tab>そうでなければ<EOS>
<SOS>a = a * p<tab>aにpを掛ける<EOS>
<SOS>return [0]<tab>0のみからなるリストを返す<EOS>
<SOS>tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])<tab>tri[i+1][j]とtri[i+1][j+1]の大きい方をtri[i][j]に足す<EOS>
<SOS>elif len(str(n)) == 3:<tab>そうでなくて、もしnの文字列表現の長さが3であれば<EOS>
<SOS>return n % 2 == 0<tab>nが2で割り切れる場合True、そうでなければFalseを返す<EOS>
<SOS>buf = ""<tab>bufに空文字列を代入<EOS>
<SOS>ret += c<tab>retにcを足す<EOS>
<SOS>if 1582 <= y:<tab>もしyが1582以上であれば<EOS>
<SOS>n = int(n / 10)<tab>nを10で割った整数部分を新しいnとする<EOS>
<SOS>i = i + 1<tab>iに1を足す<EOS>
<SOS>for i in range(c):<tab>c未満の非負整数iについて<EOS>
<SOS>def euler011_downward_point(x, y):<tab>x,yを引数とする関数euler011_downward_pointの定義<EOS>
<SOS>def euler016_a_exp_b(a, b):<tab>aとbを引数とする関数euler016_a_exp_bの定義<EOS>
<SOS>def euler014_collatz_calc(n):<tab>nを引数とする関数euler014_collatz_calcを定義<EOS>
<SOS>while fib[-1] < 4000000:<tab>fibの末尾要素が4000000未満の間繰り返し<EOS>
<SOS>ret += len(word[a])<tab>retにwordのa番目の要素の長さを足す<EOS>
<SOS>p = [True] * 2000000<tab>pにTrueのみからなるリストを代入<EOS>
<SOS>a /= i<tab>aをiで割る<EOS>
<SOS>for x in fib:<tab>fibの各要素を前から順にxとして<EOS>
<SOS>a = str(sum(q))<tab>aにqの要素の総和の文字列表現を代入<EOS>
<SOS>def euler002_divide_2(n):<tab>nを引数とする関数euler002_divide_2の定義<EOS>
<SOS>while a < n:<tab>aがnより小さい間<EOS>
<SOS>f = True<tab>fにTrueを代入<EOS>
<SOS>while int(n / 10) > 0:<tab>nを10で割った整数部分が0より大きい間<EOS>
<SOS>if m <= 2:<tab>もしmが2以下であれば<EOS>
<SOS>s += x<tab>sにxを足す<EOS>
<SOS>l = [0] * (x - len(fl) + 1)<tab>lに0を(x-flの長さ+1)回繰り返したリストを代入<EOS>
<SOS>for m in reversed(b):<tab>bの要素を末尾から順にmとして繰り返し<EOS>
<SOS>for i in reversed(l):<tab>lの末尾要素から順にiとして<EOS>
<SOS>def euler011_left_point(x, y):<tab>x,yを引数とする関数euler011_left_pointの定義<EOS>
<SOS>def euler017_is_equal(a, b):<tab>aとbを引数とする関数euler017_is_equalの定義<EOS>
<SOS>fl.append((x, c))<tab>xとcの組をflに追加する<EOS>
<SOS>prime.append(i)<tab>primeにiを追加する<EOS>
<SOS>def euler002_sum_list(l):<tab>lを引数とする関数euler002_sum_listの定義<EOS>
<SOS>fibs = [0, 1]<tab>fibsに0と1からなるリストを代入<EOS>
<SOS>def euler012_count_divisor(expl):<tab>explを引数とする関数euler012_count_divisorを定義<EOS>
<SOS>return a + b<tab>aとbの和を返す<EOS>
<SOS>if primes[i]:<tab>もしprimesのi番目が真であれば<EOS>
<SOS>s += int(ch)<tab>sにchの表す整数を足す<EOS>
<SOS>ret += 1<tab>retに1を足す<EOS>
<SOS>if f:<tab>fがTrueであれば<EOS>
<SOS>sumofsq = 0<tab>sumofsqに0を代入<EOS>
<SOS>gamma = 0<tab>gammaに0を代入<EOS>
<SOS>facts[i + 1] = facts[i] * (i + 1)<tab>factsのi+1番目にfactsのi番目とi+1の積を代入<EOS>
<SOS>if p[x]:<tab>pのx番目が真であれば<EOS>
<SOS>if not i in pl:<tab>plにiが含まれていなければ<EOS>
<SOS>m = max(m, a)<tab>mとaの大きい方を新しいmとする<EOS>
<SOS>def euler008_list_add_a(l, a):<tab>lとaを引数とする関数euler008_list_add_aの定義<EOS>
<SOS>def euler014_make_range_list(s, e):<tab>sとeを引数とする関数euler014_make_range_listを定義<EOS>
<SOS>return max(a, b)<tab>aとbの大きい方を返す<EOS>
<SOS>pl = []<tab>plを空のリストとする<EOS>
<SOS>facts = [1] * 21<tab>factsを21個の1からなるリストとする<EOS>
<SOS>def euler013():<tab>関数euler013の定義<EOS>
<SOS>for i in range(2, int(n**0.5) + 1):<tab>iを2以上nの平方根以下の間で繰り返し<EOS>
<SOS>else:<tab>ループが終了したら<EOS>
<SOS>for x in expl:<tab>explの各要素をxとして<EOS>
<SOS>l += tmp<tab>lの末尾にtmpを結合する<EOS>
<SOS>cl[1] = 0<tab>clの2番目の要素を0とする<EOS>
<SOS>def euler006_make_common_diff_sequence(s, d, n):<tab>sとdとnを引数とする関数euler006_make_common_diff_sequenceの定義<EOS>
<SOS>def euler014():<tab>関数euler014の定義<EOS>
<SOS>m += 12<tab>mに12を足す<EOS>
<SOS>return sum(tp) == 1000<tab>tpの各要素の総和が1000と等しければTrue、そうでなければFalseを返す<EOS>
<SOS>l += 1<tab>lに1を足す<EOS>
<SOS>def euler005():<tab>関数euler005の定義<EOS>
<SOS>return ans<tab>ansを返す<EOS>
<SOS>def euler014_list_init(l, n):<tab>lとnを引数とする関数euler014_list_initを定義<EOS>
<SOS>ret = []<tab>retに空リストを代入<EOS>
<SOS>facts[x + 1] = facts[x] * (x + 1)<tab>factsのx+1番目の要素にx番目の要素とx+1積を代入する<EOS>
<SOS>for i in reversed(range(len(tri) - 1)):<tab>triの長さ-1未満の非負整数を大きい方からiとして<EOS>
<SOS>ret += ch<tab>retにchを追加<EOS>
<SOS>for i in range(2, n):<tab>iを2以上n未満の間で増加させながら繰り返し<EOS>
<SOS>def euler020():<tab>関数euler020の定義<EOS>
<SOS>def euler006_make_common_diff_sequence_a(s, d, n):<tab>sとdとnを引数とする関数euler006_make_common_dif_sequence_aの定義<EOS>
<SOS>ret = ""<tab>retに空文字列を代入<EOS>
<SOS>gamma = -2 * int(y / 100) + int( int(y / 100) / 4 )<tab>gammaにy/100の整数部分の-2倍とy/100の整数部分を4で割った整数部分の和を代入<EOS>
<SOS>return primes<tab>primesを返す<EOS>
<SOS>return res >= 0<tab>resが0以上であればTrue、そうでなければFalseを返す<EOS>
<SOS>if not fl[x]:<tab>もしflのx番目が偽であれば<EOS>
<SOS>def euler016_n_separate_digit(n):<tab>nを引数とする関数euler016_n_separate_digitの定義<EOS>
<SOS>return tri[0][0]<tab>triの先頭要素の先頭要素を返す<EOS>
<SOS>return a<tab>aを返す<EOS>
<SOS>return sum(ret)<tab>retの要素の総和を返す<EOS>
<SOS>c = 0<tab>cを0とする<EOS>
<SOS>m = max(m, q[i*20+j] * q[(i+1)*20+j-1] * q[(i+2)*20+j-2] * q[(i+3)*20+j-3])<tab>現在のmと(q[i*20+j] * q[(i+1)*20+j-1] * q[(i+2)*20+j-2] * q[(i+3)*20+j-3])のうち大きい方を新しいmとする<EOS>
<SOS>f = False<tab>fをFalseにする<EOS>
<SOS>for x in tp:<tab>tpの各要素をxとして<EOS>
<SOS>s = 2<tab>sを2にする<EOS>
<SOS>if m < N:<tab>もしmがN未満なら<EOS>
<SOS>def euler016_all_digit_sum(n):<tab>nを引数とする関数euler016_all_digit_sumの定義<EOS>
<SOS>sep = (int)(len(s) / 2) + (len(s) % 2)<tab>sepにsの長さを2で割った商とsを2で割った余りの和を代入<EOS>
<SOS>if d % 7 == 6:<tab>もしdを7で割った余りが6であれば<EOS>
<SOS>def euler004_multiple(a, b):<tab>aとbを引数とする関数euler004_multipleを定義<EOS>
<SOS>for i in range(2, int(n**0.5) + 1):<tab>2からnの平方根までの数を順にiとして<EOS>
<SOS>ret.append((i, l[i]))<tab>retにiとlのi番目からなる組を追加する<EOS>
<SOS>ret.append(int(ch))<tab>retの末尾にchの表す整数を追加<EOS>
<SOS>def euler006_sum_a_to_b(a, b):<tab>aとbを引数とする関数euler006_sum_a_to_bの定義<EOS>
<SOS>return name[h]<tab>nameのh番目を返す<EOS>
<SOS>def euler002_sum_list_a(l):<tab>lを引数とする関数euler002_sum_list_aの定義<EOS>
<SOS>for i in range(2, 2000000):<tab>iを2から2000000まで変化させて繰り返し<EOS>
<SOS>rs = ""<tab>rsに空文字列を代入<EOS>
<SOS>def euler011_upper_left_point(x, y):<tab>x,yを引数とする関数euler011_upper_left_pointの定義<EOS>
<SOS>primes = [True] * (n + 1)<tab>primesをTrueがn+1個繋がったリストとする<EOS>
<SOS>for x in q:<tab>qの各要素を前から順にxとして<EOS>
<SOS>q = str(2**1000)<tab>qに2の1000乗の文字列表現を格納<EOS>
<SOS>return (x, y + 1)<tab>xとy+1の組を返す<EOS>
<SOS>def euler017_string_length(s):<tab>sを引数とする関数euler017_string_lengthの定義<EOS>
<SOS>fc = 1<tab>fcに1を代入<EOS>
<SOS>if not s % 2:<tab>もしsが2で割り切れるなら<EOS>
<SOS>return int(n)<tab>nを整数にした結果を返す<EOS>
<SOS>for i in range(2 * x, len(p), x):<tab>iをxの2倍からpの長さ未満までxごとに変化させて繰り返し<EOS>
<SOS>return s<tab>sを返す<EOS>
<SOS>for i in range(n - 1):<tab>以下の処理をn-1回繰り返す<EOS>
<SOS>return False<tab>Falseを返す<EOS>
<SOS>a = n - 2<tab>aにnから2を引いた数を代入<EOS>
<SOS>c = 0<tab>cに0を代入<EOS>
<SOS>return (x + 1, y + 1)<tab>x+1とy+1の組を返す<EOS>
<SOS>if m < n:<tab>もしmがnより小さい場合<EOS>
<SOS>if primes[i]:<tab>もしprimesのi番目が真なら<EOS>
<SOS>def euler019_is_leap_year(y):<tab>yを引数とする関数euler019_is_leap_yearを定義<EOS>
<SOS>if a < 2:<tab>もしaが2未満であれば<EOS>
<SOS>return list(range(n))<tab>0からn-1までを順に要素として持つリストを返す<EOS>
<SOS>ret = 1<tab>retを1とする<EOS>
<SOS>if i % j == 0:<tab>もしiがjで割り切れるなら<EOS>
<SOS>fib.append(fib[-1] + fib[-2])<tab>fibの末尾要素とその次の要素を足してfibの末尾に追加する<EOS>
<SOS>p = [True] * n<tab>Trueがn個並んでいるリストをpに代入<EOS>
<SOS>for x in range(2, int(n**0.5) + 1):<tab>xを2からnの平方根の範囲で変化させて繰り返し<EOS>
<SOS>for j in sl:<tab>sl内の各要素をjとして<EOS>
<SOS>s = (str)(j * i)<tab>sにjとiの積の文字列表現を代入<EOS>
<SOS>def euler015_all_factorials(n):<tab>nを引数とする関数euler015_all_factorialsの定義<EOS>
<SOS>res *= a<tab>resにaを掛ける<EOS>
<SOS>a = n % 100<tab>aにnを100で割った余りを代入<EOS>
<SOS>sqofsum = 101 * 50<tab>sqofsumに101と50の積を代入<EOS>
<SOS>for i in range(21):<tab>21未満の非負整数を小さい方から順にiとして<EOS>
<SOS>if a == b:<tab>もしaとbが等しければ<EOS>
<SOS>ret += ch<tab>retにchを足す<EOS>
<SOS>while a < b:<tab>aがbより小さい間<EOS>
<SOS>return (x - 1, y - 1)<tab>x-1とy-1の組を返す<EOS>
<SOS>def euler015():<tab>関数euler015の定義<EOS>
<SOS>a = 1<tab>aに1を代入<EOS>
<SOS>for i in range(n):<tab>以下の処理をn回繰り返す<EOS>
<SOS>for p in prime:<tab>primeの各要素をpとして<EOS>
<SOS>def euler015_pascal_triangle(n):<tab>nを引数とする関数euler015_pascal_triangleの定義<EOS>
<SOS>def euler002_n_fibnocci_sequence(n):<tab>nを引数とする関数euler002_n_fibonacci_sequenceの定義<EOS>
<SOS>def euler003():<tab>関数euler003の定義<EOS>
<SOS>def euler014_collatz_problem_count(n):<tab>nを引数とする関数euler014_collatz_problem_countを定義<EOS>
<SOS>q.append(int(ch))<tab>qの末尾にchの表す数値を追加<EOS>
<SOS>elif len(str(n)) == 2:<tab>そうでなくて、もしnの文字列表現の長さが2であれば<EOS>
<SOS>while n >= N or cl[n] == -1:<tab>nがN以上かclのn番目が-1である間<EOS>
<SOS>for ch in reversed(s):<tab>sの各要素を後ろから順にchとして<EOS>
<SOS>def euler007():<tab>関数euler007の定義<EOS>
<SOS>return b < a<tab>bがaより小さければTrue、そうでなければFalseを返す<EOS>
<SOS>s = 1<tab>sに1を代入<EOS>
<SOS>def euler020_digit_sum(n):<tab>nを引数とする関数euler020_digit_sumの定義<EOS>
<SOS>while a < n:<tab>aがn未満の間<EOS>
<SOS>a *= j<tab>aにjを掛ける<EOS>
<SOS>ret = 0<tab>retに0を代入<EOS>
<SOS>a += s[k]<tab>aにsのk番目の要素を足す<EOS>
<SOS>def euler010_enum_prime(n):<tab>引数nを取る関数euler010_enum_primeの定義<EOS>
<SOS>def euler012_next_triangular_number(tn):<tab>tnを引数とする関数euler012_next_triangular_numberを定義<EOS>
<SOS>fl += l<tab>flにlを代入<EOS>
<SOS>def euler002_n_fibnocci_number(n):<tab>nを引数とする関数euler002_n_fibonacci_numberの定義<EOS>
<SOS>return a == b<tab>aとbが等しければTrue、そうでなければFalseを返す<EOS>
<SOS>y -= 1<tab>yから1を引く<EOS>
<SOS>for x in q:<tab>qの各要素を順にxとして<EOS>
<SOS>ret.append(i)<tab>retの末尾にiを追加する<EOS>
<SOS>return c<tab>cを返す<EOS>
<SOS>return fibs[n - 1]<tab>fibsのn-1番目の要素を返す<EOS>
<SOS>for y in prime:<tab>primeの各要素をyとして<EOS>
<SOS>cl = [-1] * N<tab>clにN個の-1を要素とするリストを代入<EOS>
<SOS>for j in range(2, int(i**0.5) + 1):<tab>2からiの平方根までの整数をjとして<EOS>
<SOS>def euler006_n_square_a(n):<tab>nを引数とする関数euler006_n_square_aの定義<EOS>
<SOS>q = str(n)<tab>qにnの文字列表現を代入<EOS>
<SOS>d += 1<tab>dに1を足す<EOS>
<SOS>prime = []<tab>primeに空リストを代入<EOS>
<SOS>def euler011_over_or_equal_a(a, b):<tab>aとbを引数とする関数euler011_ver_or_equal_aの定義<EOS>
<SOS>return sl<tab>slを返す<EOS>
<SOS>a = n<tab>aをnとする<EOS>
<SOS>def euler020_factorial(n):<tab>nを引数とする関数euler020_factorialの定義<EOS>
<SOS>return b if a < b else a<tab>bがaより大きければb、そうでなければaを返す<EOS>
<SOS>n = n / i<tab>nをiで割る<EOS>
<SOS>def euler007_is_prime_a(a):<tab>aを引数とする関数euler007_is_prime_aの定義<EOS>
<SOS>d += day <tab>dにdayを足す<EOS>
<SOS>s += int(x)<tab>sにxの表す整数を足す<EOS>
<SOS>else:<tab>いずれでもなければ<EOS>
<SOS>for i in range(2 * x, len(p), x):<tab>iをxの2倍からpの長さまでx単位で変化させて繰り返し<EOS>
<SOS>s = 0<tab>sに0を代入<EOS>
<SOS>if i > int(tn / 2):<tab>もしiがtnの半分よりも大きければ<EOS>
<SOS>ret = i<tab>retをiにする<EOS>
<SOS>for a in l:<tab>l内の全要素aについて<EOS>
<SOS>return (x, y - 1)<tab>xとy-1の組を返す<EOS>
<SOS>def euler004_is_palindromic(s):<tab>sを引数とする関数euler004_is_palindromicの定義<EOS>
<SOS>for j in range(len(tri[i])):<tab>triのi番目の長さ未満の非負整数を小さい方からjとして<EOS>
