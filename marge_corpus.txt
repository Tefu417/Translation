<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>a = int(input())<tab>入力された文字列の整数値をaとする<EOS>
<SOS>x = a**3<tab>aの3乗をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>W = int(input())<tab>入力された文字列の整数値をWとする<EOS>
<SOS>x = W*32<tab>Wに32を掛けた値をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>F = int(input())<tab>入力された文字列の整数値をFとする<EOS>
<SOS>C = (F-30)//2<tab>({{Fから30を引いた値}})の組を2で割った商をCとする<EOS>
<SOS>print(C)<tab>Cを出力する<EOS>
<SOS>p,m,c = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にp、m、cとする<EOS>
<SOS>x = p+m+c<tab>pにmを加えた値にcを加えた値をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>a,b = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>x = a*b<tab>aにbを掛けた値をxとする<EOS>
<SOS>y = 2*(a+b)<tab>2に({{aにbを加えた値}})の組を掛けた値をyとする<EOS>
<SOS>a,b = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a>b :<tab>aがbより大きいとき、<EOS>
<SOS>print("a > b")<tab>"a > b"を出力する<EOS>
<SOS>print("a == b")<tab>"a == b"を出力する<EOS>
<SOS>a,b,c = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a < b < c :<tab>aがbより小さいかどうかがcより小さいとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>a,b  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>x = (a+b)//2<tab>({{aにbを加えた値}})の組を2で割った商をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>a,b  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>x = abs(a-b)<tab>aからbを引いた値の絶対値をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>a,b,c  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a == c or b == c :<tab>aがc、またはbがcのとき、<EOS>
<SOS>print("Close")<tab>"Close"を出力する<EOS>
<SOS>S = int(input())<tab>入力された文字列の整数値をSとする<EOS>
<SOS>h = S//(60**2)<tab>Sを(60の2乗)の組で割った商をhとする<EOS>
<SOS>m = (S-h*60**2)//60<tab>({{Sから{{hに60の2乗を掛けた値}}を引いた値}})の組を60で割った商をmとする<EOS>
<SOS>s = S-(h*60**2+m*60)<tab>Sから({{{{hに60の2乗を掛けた値}}に{{mに60を掛けた値}}を加えた値}})の組を引いた値をsとする<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>r = float(input())<tab>入力された文字列の浮動小数点数値をrとする<EOS>
<SOS>print("{0:.6f}".format(r*r*math.pi),"{0:.6f}".format(2*r*math.pi))<tab>format({{{{rにrを掛けた値}}にmath.piを掛けた値}})とformat({{{{2にrを掛けた値}}にmath.piを掛けた値}})を出力する<EOS>
<SOS>a = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>print(' '.join(map(str, a)))<tab>map(str,a)を文字列' 'で連結した文字列を出力する<EOS>
<SOS>W,H,x,y,r  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にW、H、x、y、rとする<EOS>
<SOS>if x+r > W or y+r > H :<tab>{{xにrを加えた値}}がWより大きく、または{{yにrを加えた値}}がHより大きいとき、<EOS>
<SOS>print("No")<tab>"No"を出力する<EOS>
<SOS>print("No")<tab>"No"を出力する<EOS>
<SOS>a,b,c,d  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、c、dとする<EOS>
<SOS>if a == b and c == d or a == c and b == d or a == d and b == c :<tab>{{aがb}}、かつ{{cがdかどうか}}、または{{aがc}}、かつ{{bがdかどうか}}、または{{aがd}}、かつ{{bがcかどうか}}のとき、<EOS>
<SOS>print("yes")<tab>"yes"を出力する<EOS>
<SOS>N,A,B,C,D  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にN、A、B、C、Dとする<EOS>
<SOS>if N % A == 0  :<tab>NをAで割った余りが0のとき、<EOS>
<SOS>a = N // A<tab>NをAで割った商をaとする<EOS>
<SOS>if N % C == 0 :<tab>NをCで割った余りが0のとき、<EOS>
<SOS>c = N // C<tab>NをCで割った商をcとする<EOS>
<SOS>x = a*B<tab>aにBを掛けた値をxとする<EOS>
<SOS>y = c*D<tab>cにDを掛けた値をyとする<EOS>
<SOS>if x <= y :<tab>xがy以下のとき、<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>a,b,c  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>x = 0<tab>0をxとする<EOS>
<SOS>if c % a and c//a < 7 :<tab>cをaで割った余り、かつ{{cをaで割った商}}が7より小さいとき、<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>for i  in range(1000) :<tab>0から1000未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>for i  in range(4) :<tab>0から4未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>t,n  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にtとnとする<EOS>
<SOS>x = 0<tab>0をxとする<EOS>
<SOS>if t == 1 :<tab>tが1のとき、<EOS>
<SOS>x = 6000*n<tab>6000にnを掛けた値をxとする<EOS>
<SOS>x = 4000*n<tab>4000にnを掛けた値をxとする<EOS>
<SOS>x = 3000*n<tab>3000にnを掛けた値をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>for i  in range(7) :<tab>0から7未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a,b  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a-b)<tab>aからbを引いた値を出力する<EOS>
<SOS>for i  in range(9) :<tab>0から9未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n,a,b  = list(input().split())<tab>入力された文字列を空白で分割した列のリストを展開し順にn、a、bとする<EOS>
<SOS>x = int(a) + int(b)<tab>aの整数値にbの整数値を加えた値をxとする<EOS>
<SOS>y = int(a)*200 + int(b)*300<tab>aの整数値に200を掛けた値にbの整数値に300を掛けた値を加えた値をyとする<EOS>
<SOS>x = [int(input()) for i in range(10)]<tab>{{0から10未満までの数列}}の各要素をiとし、入力された文字列の整数値の列をxとする<EOS>
<SOS>print(sum(x))<tab>xの総和を出力する<EOS>
<SOS>i = 1<tab>1をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>if x == 0 :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print("Case",str(i)+":",str(x))<tab>"Case"、iの文字列に":"を加えた値、xの文字列を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>a = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>if a[0] == a[1] == 0 :<tab>a(0)がa(1)かどうかが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>for i  in range(N) :<tab>0からN未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>if a[0]**2 +a[1]**2 == a[2]**2 :<tab>aの最初値の2乗にa(1)の2乗を加えた値がa(2)の2乗のとき、<EOS>
<SOS>print("YES")<tab>"YES"を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>x = 100000<tab>100000をxとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>x = math.ceil(x)<tab>math.ceil(x)をxとする<EOS>
<SOS>if x % 1000 :<tab>xを1000で割った余りのとき、<EOS>
<SOS>x = x - (x % 1000) + 1000<tab>xから({{xを1000で割った余り}})の組を引いた値に1000を加えた値をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a,b,c  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>x = 0<tab>0をxとする<EOS>
<SOS>for i  in range(a,b+1) :<tab>aからbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if c % i == 0 :<tab>cをiで割った余りが0のとき、<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>for i  in range(1,10) :<tab>1から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1,10) :<tab>1から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>a = i*j<tab>iにjを掛けた値をaとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>W,H = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にWとHとする<EOS>
<SOS>if W == H == 0 :<tab>WがHかどうかが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>for i  in range(W) :<tab>0からW未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(H) :<tab>0からH未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print('#',end='')<tab>'#'と((end, ''))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>H,W  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == W == 0 :<tab>HがWかどうかが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>H,W  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>a,op,b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にa、op、bとする<EOS>
<SOS>a = int(a)<tab>aの整数値をaとする<EOS>
<SOS>b = int(b)<tab>bの整数値をbとする<EOS>
<SOS>if op == "?" :<tab>opが"?"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>a = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = [int(input()) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、入力された文字列の整数値の列をsとする<EOS>
<SOS>x = sum(s) - (s[0] + s[-1])<tab>sの総和から({{s(0)にsの末尾値を加えた値}})の組を引いた値をxとする<EOS>
<SOS>print(x // (n - 2))<tab>xを({{nから2を引いた値}})の組で割った商を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = str(math.factorial(n))[::-1]<tab>math.factorial(n)の文字列の逆順をnとする<EOS>
<SOS>while n[i]=='0' :<tab>n(i)が'0'の間、繰り返す<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>a = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>print(*a)<tab>*(a)を出力する<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>for i  in range(5) :<tab>0から5未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n < 40 :<tab>nが40より小さいとき、<EOS>
<SOS>n = 40<tab>40をnとする<EOS>
<SOS>print(c // 5)<tab>cを5で割った商を出力する<EOS>
<SOS>a = []<tab>空列をaとする<EOS>
<SOS>b = []<tab>空列をbとする<EOS>
<SOS>for i  in range(4) :<tab>0から4未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(4,6) :<tab>4から6未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(sum(a[:3])+b[0])<tab>{{aの位置先頭から位置3までの部分}}の総和にbの最初値を加えた値を出力する<EOS>
<SOS>a = []<tab>空列をaとする<EOS>
<SOS>b = []<tab>空列をbとする<EOS>
<SOS>for i  in range(10) :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>W = sum(a[7:])<tab>aの先頭7個を取り除いた部分の総和をWとする<EOS>
<SOS>for j  in range(10,20) :<tab>10から20未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>K = sum(b[7:])<tab>bの先頭7個を取り除いた部分の総和をKとする<EOS>
<SOS>n = list(range(31)[1:])<tab>{{0から31未満までの数列}}の先頭を除いた部分のリストをnとする<EOS>
<SOS>for i  in range(28) :<tab>0から28未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n.remove(int(input()))<tab>nから入力された文字列の整数値を取り除いた集まり<EOS>
<SOS>print(n[0])<tab>nの最初値を出力する<EOS>
<SOS>print(n[1])<tab>n(1)を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>x = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをxとする<EOS>
<SOS>m = abs(max(x) - min(x))<tab>xの最大値からxの最小値を引いた値の絶対値をmとする<EOS>
<SOS>if m % 2 :<tab>mを2で割った余りのとき、<EOS>
<SOS>m = m + 1<tab>mに1を加えた値をmとする<EOS>
<SOS>print(m // 2)<tab>mを2で割った商を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n,k  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとkとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = []<tab>空列をaとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>for i  in range(k) :<tab>0からk未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>b = c<tab>cをbとする<EOS>
<SOS>for i  in range(k, n) :<tab>kからn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>b = max(b,c)<tab>bとcの最大値をbとする<EOS>
<SOS>print(b)<tab>bを出力する<EOS>
<SOS>x = [int(input()) for i in range(10)]<tab>{{0から10未満までの数列}}の各要素をiとし、入力された文字列の整数値の列をxとする<EOS>
<SOS>for i  in range(3) :<tab>0から3未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(x[i])<tab>x(i)を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = [0 for i in range(10)]<tab>{{0から10未満までの数列}}の各要素をiとし、0の列をxとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c = int(input())<tab>入力された文字列の整数値をcとする<EOS>
<SOS>for i  in range(10) :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>count = '*' * x[i]<tab>'*'にx(i)を掛けた値をcountとする<EOS>
<SOS>if len(count) == 0 :<tab>countの長さが0のとき、<EOS>
<SOS>print("-")<tab>"-"を出力する<EOS>
<SOS>x = input()<tab>入力された文字列をxとする<EOS>
<SOS>print(x.upper())<tab>xを英大文字に変換した文字列を出力する<EOS>
<SOS>x = input()<tab>入力された文字列をxとする<EOS>
<SOS>print(x.swapcase())<tab>xの英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>x = {}<tab>空辞書をxとする<EOS>
<SOS>for line  in sys.stdin :<tab>sys.stdinの各要素を順にlineとして、繰り返す<EOS>
<SOS>for l  in line :<tab>lineの各要素を順にlとして、繰り返す<EOS>
<SOS>if l.isalpha() :<tab>lが全てアルファベットのとき、<EOS>
<SOS>c = l.lower()<tab>lを英小文字に変換した文字列をcとする<EOS>
<SOS>x[c]  = x.get(c,0)+1<tab>x.get(c,0)に1を加えた値をx[c] にする<EOS>
<SOS>for i  in range(26) :<tab>0から26未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c = chr(ord('a')+i)<tab>文字コード'a'の順序数にiを加えた値の文字をcとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = [int(i) for i in list(str(n))]<tab>nの文字列のリストの各要素をiとし、iの整数値の列をxとする<EOS>
<SOS>print(sum(x))<tab>xの総和を出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>print(min(n.count("K"),n.count("U"),n.count("P"),n.count("C")))<tab>{{n内の"K"の出現をカウントした整数}}、{{n内の"U"の出現をカウントした整数}}、{{n内の"P"の出現をカウントした整数}}、{{n内の"C"の出現をカウントした整数}}の最小値を出力する<EOS>
<SOS>W = input()<tab>入力された文字列をWとする<EOS>
<SOS>x = 0<tab>0をxとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>T = input()<tab>入力された文字列をTとする<EOS>
<SOS>if T == 'END_OF_TEXT' :<tab>Tが'END_OF_TEXT'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>p = input()<tab>入力された文字列をpとする<EOS>
<SOS>if p in s*2 :<tab>pがsに2を掛けた値に含まれるとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>t = input()<tab>入力された文字列をtとする<EOS>
<SOS>p = input()<tab>入力された文字列をpとする<EOS>
<SOS>for i  in range(len(t) - len(p) + 1) :<tab>0から{{tの長さからpの長さを引いた値}}に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if t[i:i + len(p)] == p :<tab>tの位置iから位置{{iにpの長さを加えた値}}までの部分がpのとき、<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>if n == "-" :<tab>nが"-"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>m = int(input())<tab>入力された文字列の整数値をmとする<EOS>
<SOS>for i  in range(m) :<tab>0からm未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>h = int(input())<tab>入力された文字列の整数値をhとする<EOS>
<SOS>n = n[h:] + n[:h]<tab>nの先頭h個を取り除いた部分にnの位置先頭から位置hまでの部分を加えた値をnとする<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>b = 0<tab>0をbとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>A,B = map(str,input().split())<tab>map(str,入力された文字列を空白で分割した列)を展開し順にAとBとする<EOS>
<SOS>if A > B  :<tab>AがBより大きいとき、<EOS>
<SOS>if A < B  :<tab>AがBより小さいとき、<EOS>
<SOS>if A == B  :<tab>AがBのとき、<EOS>
<SOS>print(a,b)<tab>aとbを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>x = input()<tab>入力された文字列をxとする<EOS>
<SOS>if x == "0" :<tab>xが"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>b = 0<tab>0をbとする<EOS>
<SOS>for i  in range(1,len(x)) :<tab>1からxの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if x[i] == "A" :<tab>x(i)が"A"のとき、<EOS>
<SOS>if a > b :<tab>aがbより大きいとき、<EOS>
<SOS>print(a,b)<tab>aとbを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>x1,y1,x2,y2  = map(float,input().split())<tab>map(float,入力された文字列を空白で分割した列)を展開し順にx1、y1、x2、y2とする<EOS>
<SOS>d = math.sqrt((x1 - x2)**2 + (y1-y2)**2)<tab>math.sqrt((x1 - x2)**2 + (y1-y2)**2)をdとする<EOS>
<SOS>print('{:.8f}'.format(d))<tab>format(d)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>a,b,c  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>th = (math.pi/180)*c<tab>({{math.piを180で割った値}})の組にcを掛けた値をthとする<EOS>
<SOS>s = 1/2 * a * b * math.sin(th)<tab>{{{{1を2で割った値}}にaを掛けた値}}にbを掛けた値にmath.sin(th)を掛けた値をsとする<EOS>
<SOS>l = a + b + c2<tab>aにbを加えた値にc2を加えた値をlとする<EOS>
<SOS>h = 2 * s / a<tab>2にsを掛けた値をaで割った値をhとする<EOS>
<SOS>print('{:.8f}'.format(s))<tab>format(s)を出力する<EOS>
<SOS>print('{:.8f}'.format(l))<tab>format(l)を出力する<EOS>
<SOS>print('{:.8f}'.format(h))<tab>format(h)を出力する<EOS>
<SOS>import statistics<tab>statisticsモジュールを用いる<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをsとする<EOS>
<SOS>x = statistics.pstdev(s)<tab>statistics.pstdev(s)をxとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>m,f,r  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にm、f、rとする<EOS>
<SOS>p = m + f<tab>mにfを加えた値をpとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if m == -1 or f == -1 :<tab>mが-1、またはfが-1のとき、<EOS>
<SOS>print("F")<tab>"F"を出力する<EOS>
<SOS>print("A")<tab>"A"を出力する<EOS>
<SOS>print("B")<tab>"B"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>if r >= 50 :<tab>rが50以上のとき、<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("F")<tab>"F"を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n,x  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとxとする<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n, m  = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストを展開し順にnとmとする<EOS>
<SOS>a = []<tab>空列をaとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>b = []<tab>空列をbとする<EOS>
<SOS>for i  in range(m) :<tab>0からm未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for j  in range(m) :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>n,m,l   = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、lとする<EOS>
<SOS>a = []<tab>空列をaとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>b = []<tab>空列をbとする<EOS>
<SOS>for i  in range(m) :<tab>0からm未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>x = []<tab>空列をxとする<EOS>
<SOS>for j  in range(l) :<tab>0からl未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for k  in range(m) :<tab>0からm未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>print(" ".join(list(map(str, x))))<tab>map(str,x)のリストを文字列" "で連結した文字列を出力する<EOS>
<SOS>r,c  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にrとcとする<EOS>
<SOS>a = []<tab>空列をaとする<EOS>
<SOS>for i  in range(r) :<tab>0からr未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = list(zip(*a[::-1]))<tab>*(aの逆順)の要素をそれぞれ組にした列のリストをaとする<EOS>
<SOS>for i  in range(c) :<tab>0からc未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(sum(a[i]),end=' ')<tab>a(i)の総和と((end, ' '))からなる辞書を出力する<EOS>
<SOS>print(sum(a[c]))<tab>a(c)の総和を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>n1 = n<tab>nをn1とする<EOS>
<SOS>i = 2<tab>2をiとする<EOS>
<SOS>x = []<tab>空列をxとする<EOS>
<SOS>while i*i <= n :<tab>iにiを掛けた値がn以下の間、繰り返す<EOS>
<SOS>while n % i == 0 :<tab>nをiで割った余りが0の間、繰り返す<EOS>
<SOS>if n > 1 :<tab>nが1より大きいとき、<EOS>
<SOS>print(str(n1) + ": " + " ".join(x))<tab>{{n1の文字列に": "を加えた値}}に{{xを文字列" "で連結した文字列}}を加えた値を出力する<EOS>
<SOS>x = 1000000007<tab>1000000007をxとする<EOS>
<SOS>m,n = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>print(pow(m,n,x))<tab>mのn乗に対するxの剰余を出力する<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>while b != 0 :<tab>bが0と等しくない間、繰り返す<EOS>
<SOS>a,b  = b,a % b<tab>bとaをbで割った余りをaとbとする<EOS>
<SOS>return [a,c]<tab>(aとc)からなる列を関数出力とする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>x,y  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>if x == 0 :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x,y  = max(x,y),min(x,y)<tab>xとyの最大値とxとyの最小値をxとyとする<EOS>
<SOS>print(*(gcd(x,y)))<tab>*((gcd(x,y))の組)を出力する<EOS>
<SOS>import fractions<tab>fractionsモジュールを用いる<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>a = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>x = a[0]<tab>aの最初値をxとする<EOS>
<SOS>for i  in range(1, n) :<tab>1からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>x = x * a[i] // fractions.gcd(x, a[i])<tab>xにa(i)を掛けた値をfractions.gcd(x, a[i])で割った商をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>while b != 0 :<tab>bが0と等しくない間、繰り返す<EOS>
<SOS>a,b  = b,a % b<tab>bとaをbで割った余りをaとbとする<EOS>
<SOS>return a<tab>aを関数出力とする<EOS>
<SOS>x,y  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>x,y  = max(x,y),min(x,y)<tab>xとyの最大値とxとyの最小値をxとyとする<EOS>
<SOS>print(gcd(x,y))<tab>gcd(x,y)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if n <= 1 :<tab>nが1以下のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>for i  in range(2,int(m.sqrt(n)) + 1) :<tab>2からm.sqrt(n)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if n % i == 0 :<tab>nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>a = int(input())<tab>入力された文字列の整数値をaとする<EOS>
<SOS>x = []<tab>空列をxとする<EOS>
<SOS>for j  in range(a) :<tab>0からa未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>b = int(input())<tab>入力された文字列の整数値をbとする<EOS>
<SOS>if prime(b) :<tab>prime(b)のとき、<EOS>
<SOS>print(len(x))<tab>xの長さを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if n <= 1 :<tab>nが1以下のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>for i  in range(2,int(m.sqrt(n)) + 1) :<tab>2からm.sqrt(n)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if n % i == 0 :<tab>nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>x = []<tab>空列をxとする<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>for i  in range(n+1) :<tab>0からnに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if prime(i) :<tab>prime(i)のとき、<EOS>
<SOS>for j  in x :<tab>xの各要素を順にjとして、繰り返す<EOS>
<SOS>for k  in x :<tab>xの各要素を順にkとして、繰り返す<EOS>
<SOS>if j > k :<tab>jがkより大きいとき、<EOS>
<SOS>pass<tab>何もしない<EOS>
<SOS>print(c)<tab>cを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>while n > 1 :<tab>nが1より大きい間、繰り返す<EOS>
<SOS>if n % 2 == 0 :<tab>nを2で割った余りが0のとき、<EOS>
<SOS>n = n / 2<tab>nを2で割った値をnとする<EOS>
<SOS>return c<tab>cを関数出力とする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>x = d<tab>dをxとする<EOS>
<SOS>while x < 600 :<tab>xが600より小さい間、繰り返す<EOS>
<SOS>print(c)<tab>cを出力する<EOS>
<SOS>a = input()<tab>入力された文字列をaとする<EOS>
<SOS>a = a.replace("."," ")<tab>a内の"."を" "で置き換えた文字列をaとする<EOS>
<SOS>a = a.replace(","," ")<tab>a内の","を" "で置き換えた文字列をaとする<EOS>
<SOS>x = a.split()<tab>aを空白で分割した列をxとする<EOS>
<SOS>y = []<tab>空列をyとする<EOS>
<SOS>for i  in range(len(x)) :<tab>0からxの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(" ".join(y))<tab>yを文字列" "で連結した文字列を出力する<EOS>
<SOS>str = input()<tab>入力された文字列をstrとする<EOS>
<SOS>print(str[::-1])<tab>strの逆順を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>a = input()<tab>入力された文字列をaとする<EOS>
<SOS>if a == "END OF INPUT" :<tab>aが"END OF INPUT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>b = 0<tab>0をbとする<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>for i  in range(len(a)-2) :<tab>0からaの長さから2を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if a[i:i+3]=='JOI' :<tab>aの位置iから位置{{iに3を加えた値}}までの部分が'JOI'のとき、<EOS>
<SOS>print(b)<tab>bを出力する<EOS>
<SOS>print(c)<tab>cを出力する<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>ans = ''<tab>''をansとする<EOS>
<SOS>for letter  in s :<tab>sの各要素を順にletterとして、繰り返す<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>print(derot_n(input(), 3))<tab>derot_n(入力された文字列,3)を出力する<EOS>
<SOS>n = input().split()<tab>入力された文字列を空白で分割した列をnとする<EOS>
<SOS>print(max(n, key=n.count),max(n, key=len))<tab>nと((key, nのcount))からなる辞書の最大値とnと((key, len))からなる辞書の最大値を出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>n = n.replace('apple','x')<tab>n内の'apple'を'x'で置き換えた文字列をnとする<EOS>
<SOS>n = n.replace('peach','apple')<tab>n内の'peach'を'apple'で置き換えた文字列をnとする<EOS>
<SOS>n = n.replace('x','peach')<tab>n内の'x'を'peach'で置き換えた文字列をnとする<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>import re<tab>reモジュールを用いる<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>for i  in re.findall('[0-9]+',n) :<tab>re.findall('[0-9]+',n)の各要素を順にiとして、繰り返す<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>if n==0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ns = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをnsとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if ns[i]<=sum(ns)/n :<tab>ns(i)がnsの総和をnで割った値以下のとき、<EOS>
<SOS>print(c)<tab>cを出力する<EOS>
<SOS>D,L = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にDとLとする<EOS>
<SOS>x = D//L<tab>DをLで割った商をxとする<EOS>
<SOS>if D%L==0 :<tab>DをLで割った余りが0のとき、<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>if len(s) < 6 or s.isalpha() or s.isdigit() or s.islower() or s.isupper() :<tab>{{len(s) が6より小さく}}、または{{sが全てアルファベットかどうか}}、または{{sが全て数字かどうか}}、または{{sの全てが英小文字かどうか}}、またはsの全てが英大文字のとき、<EOS>
<SOS>print("INVALID")<tab>"INVALID"を出力する<EOS>
<SOS>H,a,b = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にH、a、bとする<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>for i  in range(a,b+1) :<tab>aからbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if H%i==0  :<tab>Hをiで割った余りが0のとき、<EOS>
<SOS>print(c)<tab>cを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>b = 0<tab>0をbとする<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>x = 0<tab>0をxとする<EOS>
<SOS>for j  in range(10) :<tab>0から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if b < a[j] :<tab>bがa(j)より小さいとき、<EOS>
<SOS>b = a[j]<tab>a(j)をbとする<EOS>
<SOS>c = a[j]<tab>a(j)をcとする<EOS>
<SOS>if x == 0 :<tab>xが0のとき、<EOS>
<SOS>print("YES")<tab>"YES"を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>a = [int(input()) for _ in range(n)]<tab>{{'0からn未満までの数列}}の各要素を_とし、入力された文字列の整数値の列をaとする<EOS>
<SOS>maxv = -10000000000<tab>-10000000000をmaxvとする<EOS>
<SOS>minv = a[0]<tab>aの最初値をminvとする<EOS>
<SOS>for i  in range(1,n) :<tab>1からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>maxv = max(maxv,a[i] - minv)<tab>maxvとa(i)からminvを引いた値の最大値をmaxvとする<EOS>
<SOS>minv = min(minv,a[i])<tab>minvとa(i)の最小値をminvとする<EOS>
<SOS>print(maxv)<tab>maxvを出力する<EOS>
<SOS>x = []<tab>空列をxとする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをSとする<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>T = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをTとする<EOS>
<SOS>for i  in range(len(data)) :<tab>0からdataの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if data[i] == value :<tab>data(i)がvalueのとき、<EOS>
<SOS>return i<tab>iを関数出力とする<EOS>
<SOS>return -1<tab>-1を関数出力とする<EOS>
<SOS>for j  in range(q) :<tab>0からq未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Search(S, T[j])  > -1 :<tab>Search(S,T(j))が-1より大きいとき、<EOS>
<SOS>print(len(x))<tab>xの長さを出力する<EOS>
<SOS>left = 0<tab>0をleftとする<EOS>
<SOS>right = len(data) - 1<tab>dataの長さから1を引いた値をrightとする<EOS>
<SOS>while left <= right :<tab>leftがright以下の間、繰り返す<EOS>
<SOS>mid = (left + right) // 2<tab>({{leftにrightを加えた値}})の組を2で割った商をmidとする<EOS>
<SOS>if data[mid] == value :<tab>data(mid)がvalueのとき、<EOS>
<SOS>return mid<tab>midを関数出力とする<EOS>
<SOS>left = mid + 1<tab>midに1を加えた値をleftとする<EOS>
<SOS>return -1<tab>-1を関数出力とする<EOS>
<SOS>x = []<tab>空列をxとする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをSとする<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>T = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをTとする<EOS>
<SOS>for j  in range(q) :<tab>0からq未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Search2(S, T[j])  > -1 :<tab>Search2(S,T(j))が-1より大きいとき、<EOS>
<SOS>print(len(x)<tab>xの長さを出力する<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>print(int(input())**3)<tab>入力された文字列の整数値の3乗を出力する<EOS>
<SOS>a,b = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a*b,2*(a+b))<tab>aにbを掛けた値と2に({{aにbを加えた値}})の組を掛けた値を出力する<EOS>
<SOS>c = input()<tab>入力された文字列をcとする<EOS>
<SOS>a,b = c.split()<tab>cを空白で分割した列を展開し順にaとbとする<EOS>
<SOS>if (int(a)>int(b)) :<tab>(aの整数値がbの整数値より大きいかどうか)の組のとき、<EOS>
<SOS>print('a > b')<tab>'a > b'を出力する<EOS>
<SOS>print('a < b')<tab>'a < b'を出力する<EOS>
<SOS>a,b,c = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>print(['No','Yes'][a<b<c])<tab>('No'と'Yes')からなる列({{{{aがbより小さいかどうか}}がcより小さいかどうか}})を出力する<EOS>
<SOS>a,b,c = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>print(['Close','Open'][a&b|c])<tab>('Close'と'Open')からなる列(|(&(a,b),c))を出力する<EOS>
<SOS>s = int(input())<tab>入力された文字列の整数値をsとする<EOS>
<SOS>print(s//3600,s//60%60,s%60,sep=':')<tab>sを3600で割った商、{{sを60で割った商}}を60で割った余り、sを60で割った余り、((sep, ':'))からなる辞書を出力する<EOS>
<SOS>(a,b)=(int(i) for i in input().split())<tab>({{{{入力された文字列を空白で分割した列}}の各要素をiとし、iの整数値の列}})の組を(aとb)の組とする<EOS>
<SOS>print('%s %s %.5f'%(a//b,a%b,a/b))<tab>'%s %s %.5f'を({{aをbで割った商}}、{{aをbで割った余り}}、{{aをbで割った値}})の組で割った余りを出力する<EOS>
<SOS>r = float(input())<tab>入力された文字列の浮動小数点数値をrとする<EOS>
<SOS>print("{} {}".format(r*r*pi,2*pi*r))<tab>テンプレート{{{{rにrを掛けた値}}にpiを掛けた値}}を{{{{2にpiを掛けた値}}にrを掛けた値}}でフォーマットした文字列を出力する<EOS>
<SOS>a,b = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a*b/3.305785)<tab>{{aにbを掛けた値}}を3.305785で割った値を出力する<EOS>
<SOS>d = [int(i) for i in input().split()]<tab>{{入力された文字列を空白で分割した列}}の各要素をiとし、iの整数値の列をdとする<EOS>
<SOS>print("{0} {1} {2}".format(d[0],d[1],d[2]))<tab>format(dの最初値,d(1),d(2))を出力する<EOS>
<SOS>num = input().split()<tab>入力された文字列を空白で分割した列をnumとする<EOS>
<SOS>W = int(num[0])<tab>numの最初値の整数値をWとする<EOS>
<SOS>H = int(num[1])<tab>num(1)の整数値をHとする<EOS>
<SOS>x = int(num[2])<tab>num(2)の整数値をxとする<EOS>
<SOS>y = int(num[3])<tab>num(3)の整数値をyとする<EOS>
<SOS>r = int(num[4])<tab>num(4)の整数値をrとする<EOS>
<SOS>if (x-r<0 or y-r<0 or x+r>W or y+r>H) :<tab>({{x-rが0より小さく}}、または{{y-rが0より小さいかどうか}}、または{{{{xにrを加えた値}}がWより大きいかどうか}}、または{{{{yにrを加えた値}}がHより大きいかどうか}})の組のとき、<EOS>
<SOS>print('No')<tab>'No'を出力する<EOS>
<SOS>a,b,c,d = sorted(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})をソートした列を展開し順にa、b、c、dとする<EOS>
<SOS>print(['no','yes'][a==b and c==d])<tab>('no'と'yes')からなる列({{aがb}}、かつ{{cがdかどうか}})を出力する<EOS>
<SOS>p = [6,4,3,2]<tab>(6、4、3、2)からなる列をpとする<EOS>
<SOS>for _  in range(4) :<tab>0から4未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>t,n = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にtとnとする<EOS>
<SOS>print(p[t-1]*n*1000)<tab>{{p({{tから1を引いた値}})にnを掛けた値}}に1000を掛けた値を出力する<EOS>
<SOS>n = 7<tab>7をnとする<EOS>
<SOS>while n :<tab>nの間、繰り返す<EOS>
<SOS>a,b = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a-b)<tab>aからbを引いた値を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>b,c = map(int,[b,c])<tab>map(整数,(bとc)からなる列)を展開し順にbとcとする<EOS>
<SOS>print(a,b+c,b*200+c*300)<tab>a、bにcを加えた値、{{bに200を掛けた値}}に{{cに300を掛けた値}}を加えた値を出力する<EOS>
<SOS>print(sum([int(input()) for _ in range(10)]))<tab>{{{{0から10未満までの数列}}の各要素を_とし、input()の整数値の列}}の総和を出力する<EOS>
<SOS>x = input()<tab>入力された文字列をxとする<EOS>
<SOS>i = 1<tab>1をiとする<EOS>
<SOS>while (x!='0') :<tab>(xが'0'と等しくないかどうか)の組の間、繰り返す<EOS>
<SOS>print("Case {0}: {1}".format(i,x))<tab>テンプレートiをxでフォーマットした文字列を出力する<EOS>
<SOS>x = input()<tab>入力された文字列をxとする<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>a = 100<tab>100をaとする<EOS>
<SOS>for _  in range(int(input())) :<tab>0から入力された文字列の整数値未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>a = math.ceil(a*1.05)<tab>math.ceil(a*1.05)をaとする<EOS>
<SOS>print(a*1000)<tab>aに1000を掛けた値を出力する<EOS>
<SOS>a,b,c = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>d = 0<tab>0をdとする<EOS>
<SOS>while a!=b+1 :<tab>aがbに1を加えた値と等しくない間、繰り返す<EOS>
<SOS>if c%a==0 :<tab>cをaで割った余りが0のとき、<EOS>
<SOS>print(d)<tab>dを出力する<EOS>
<SOS>for i  in range(1,10) :<tab>1から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1,10) :<tab>1から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print("%dx%d=%d"%(i,j,i*j))<tab>"%dx%d=%d"を(i、j、{{iにjを掛けた値}})の組で割った余りを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>(H,W) = [int(i) for i in input().split()]<tab>{{{{入力された文字列を空白で分割した列}}の各要素をiとし、iの整数値の列}}を(HとW)の組とする<EOS>
<SOS>if H==W==0 :<tab>HがWかどうかが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>for i  in range(H) :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W) :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if (i+j)%2==0 :<tab>({{iにjを加えた値}})の組を2で割った余りが0のとき、<EOS>
<SOS>print('#',end="")<tab>'#'と((end, ""))からなる辞書を出力する<EOS>
<SOS>print('')<tab>''を出力する<EOS>
<SOS>print('')<tab>''を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>if '?' in s :<tab>'?'がsに含まれるとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(int(eval(s)))<tab>{{ 文字列sを評価した値}}の整数値を出力する<EOS>
<SOS>input()<tab>入力された文字列<EOS>
<SOS>a = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>print(min(a),max(a),sum(a))<tab>aの最小値、aの最大値、aの総和を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n<3 :<tab>nが3より小さいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = b=1<tab>1をbとするをaとする<EOS>
<SOS>for _  in range(int(input())) :<tab>0から入力された文字列の整数値未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>a,b = b,a+b<tab>bとaにbを加えた値をaとbとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>input()<tab>入力された文字列<EOS>
<SOS>print(' '.join(input().split()[::-1]))<tab>{{入力された文字列を空白で分割した列}}の逆順を文字列' 'で連結した文字列を出力する<EOS>
<SOS>print(sum([max(40,int(input())) for _ in range(5)])//5)<tab>{{range(5)の各要素を_とし、max(40,int(input())) の列}}の総和を5で割った商を出力する<EOS>
<SOS>print(sum(sorted(int(input()) for _ in range(4))[1:])+max(int(input()) for _ in range(2)))<tab>{{{{int(input()) for _ in range(4)をソートした列}}の先頭を除いた部分}}の総和に{{{{0から2未満までの数列}}の各要素を_とし、input()の整数値の列}}の最大値を加えた値を出力する<EOS>
<SOS>import queue<tab>queueモジュールを用いる<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n,k = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとkとする<EOS>
<SOS>if n==0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = queue.deque(int(input()) for _ in range(k))<tab>queue.deque(int(input()) for _ in range(k))をaとする<EOS>
<SOS>m = b=sum(a)<tab>aの総和をbとするをmとする<EOS>
<SOS>for i  in range(n-k) :<tab>0からnからkを引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c = a.popleft()<tab>a.popleft()をcとする<EOS>
<SOS>d = int(input())<tab>入力された文字列の整数値をdとする<EOS>
<SOS>m = max(b,m)<tab>bとmの最大値をmとする<EOS>
<SOS>print(m)<tab>mを出力する<EOS>
<SOS>x = input().upper()<tab>入力された文字列を英大文字に変換した文字列をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>print(input().swapcase())<tab>入力された文字列の英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>s = sys.stdin.read().lower()<tab>sys.stdin.read()を英小文字に変換した文字列をsとする<EOS>
<SOS>for i  in range(97,123) :<tab>97から123未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(chr(i),':',s.count(chr(i)))<tab>文字コードiの文字、':'、s内の文字コードiの文字の出現をカウントした整数を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>if n=='0' :<tab>nが'0'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(sum(int(x) for x in n))<tab>{{nの各要素をxとし、xの整数値の列}}の総和を出力する<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>print(min(s.count(i) for i in 'KUPC'))<tab>{{'KUPC'の各要素をiとし、{{s内のiの出現をカウントした整数}}の列}}の最小値を出力する<EOS>
<SOS>w = input().lower()<tab>入力された文字列を英小文字に変換した文字列をwとする<EOS>
<SOS>c = []<tab>空列をcとする<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>while (s!='END_OF_TEXT') :<tab>(sが'END_OF_TEXT'と等しくないかどうか)の組の間、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>print(len([x for x in c if x==w]))<tab>{{cの各要素をxとし、{{xがwの}}ときのxの列}}の長さを出力する<EOS>
<SOS>I = input<tab>入力された文字列をIとする<EOS>
<SOS>s = I()*2<tab>I()に2を掛けた値をsとする<EOS>
<SOS>print(['No','Yes'][I()in s])<tab>('No'と'Yes')からなる列({{I()がsに含まれるかどうか}})を出力する<EOS>
<SOS>t = input()<tab>入力された文字列をtとする<EOS>
<SOS>p = input()<tab>入力された文字列をpとする<EOS>
<SOS>[print(i)for i in range(len(t))if t[i:].startswith(p)]<tab>{{0からtの長さ未満までの数列}}の各要素をiとし、{{{{tの先頭i個を取り除いた部分}}の先頭がpで始まる}}ときの{{iを出力する}}の列<EOS>
<SOS>h = t=0<tab>0をtとするをhとする<EOS>
<SOS>for _  in range(int(input())) :<tab>0から入力された文字列の整数値未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>a,b = input().split()<tab>入力された文字列を空白で分割した列を展開し順にaとbとする<EOS>
<SOS>if a>b :<tab>aがbより大きいとき、<EOS>
<SOS>print(t,h)<tab>tとhを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>a = input()<tab>入力された文字列をaとする<EOS>
<SOS>if a=='0' :<tab>aが'0'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>d,e = a[1:].count('A'),a[1:].count('B')<tab>aの先頭を除いた部分内の'A'の出現をカウントした整数とaの先頭を除いた部分内の'B'の出現をカウントした整数をdとeとする<EOS>
<SOS>(b,c)=(0,1) if d<e else (1,0)<tab>dがeより小さいとき(0と1)の組を(bとc)の組とする、そうでなければ(1と0)の組<EOS>
<SOS>print(d+b,e+c)<tab>dにbを加えた値とeにcを加えた値を出力する<EOS>
<SOS>x,y,xx,yy = map(float, input().split())<tab>map(float,入力された文字列を空白で分割した列)を展開し順にx、y、xx、yyとする<EOS>
<SOS>print('%5f'%((x-xx)**2+(y-yy)**2)**0.5)<tab>'%5f'を({{(x-xx)**2に(y-yy)**2を加えた値}})の組の0.5乗で割った余りを出力する<EOS>
<SOS>a,b,c = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>c = radians(c)<tab>radians(c)をcとする<EOS>
<SOS>s = a*b*sin(c)*0.5<tab>{{aにbを掛けた値}}にsin(c)を掛けた値に0.5を掛けた値をsとする<EOS>
<SOS>for i  in [s,a+b+(a*a+b*b-2*a*b*cos(c))**0.5,s/a*2] :<tab>(s、{{aにbを加えた値}}に({{a*a+b*bから2*a*b*cos(c)を引いた値}})の組の0.5乗を加えた値、{{sをaで割った値}}に2を掛けた値)からなる列の各要素を順にiとして、繰り返す<EOS>
<SOS>print('%5f'%i)<tab>'%5f'をiで割った余りを出力する<EOS>
<SOS>while input()!='0' :<tab>入力された文字列が'0'と等しくない間、繰り返す<EOS>
<SOS>n = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをnとする<EOS>
<SOS>b = len(n)<tab>nの長さをbとする<EOS>
<SOS>a = sum(n)/b<tab>nの総和をbで割った値をaとする<EOS>
<SOS>print((sum((x-a)**2 for x in n)/b)**0.5)<tab>({{(x-a)**2 for x in nの総和をbで割った値}})の組の0.5乗を出力する<EOS>
<SOS>import itertools<tab>itertoolsモジュールを用いる<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n,s = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとsとする<EOS>
<SOS>if n==0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(len([1 for c in itertools.combinations(range(1,n+1), 3) if sum(c)==s]))<tab>{{itertools.combinations(range(1,n+1), 3) の各要素をcとし、{{sum(c)がsの}}ときの1の列}}の長さを出力する<EOS>
<SOS>n,m = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>a = [list(map(int,input().split())) for _ in range(n)]<tab>{{0からn未満までの数列}}の各要素を_とし、map(整数,{{input()を空白で分割した列}})のリストの列をaとする<EOS>
<SOS>b = [int(input()) for _ in range(m)]<tab>{{0からm未満までの数列}}の各要素を_とし、入力された文字列の整数値の列をbとする<EOS>
<SOS>[print(sum([j*k for j,k in zip(a[i],b)])) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、{{j*k for j,k in zip(a[i],b)の総和を出力する}}の列<EOS>
<SOS>n,m,l = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、lとする<EOS>
<SOS>a = [list(map(int,input().split())) for _ in range(n)]<tab>{{0からn未満までの数列}}の各要素を_とし、map(整数,{{input()を空白で分割した列}})のリストの列をaとする<EOS>
<SOS>b = [list(map(int,input().split())) for _ in range(m)]<tab>{{0からm未満までの数列}}の各要素を_とし、map(整数,{{input()を空白で分割した列}})のリストの列をbとする<EOS>
<SOS>[print(*x) for x in [[sum(j*k for j,k in zip(x,y)) for y in zip(*b)] for x in a]]<tab>{{aの各要素をxとし、sum(j*k for j,k in zip(x,y)) for y in zip(*b)の列}}の各要素をxとし、{{*(x)を出力する}}の列<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>print(n+': ',end='')<tab>nに': 'を加えた値と((end, ''))からなる辞書を出力する<EOS>
<SOS>n = int(n)<tab>nの整数値をnとする<EOS>
<SOS>d = 2<tab>2をdとする<EOS>
<SOS>while n%d==0 and n>3 :<tab>{{nをdで割った余り}}が0、かつnが3より大きい間、繰り返す<EOS>
<SOS>print(d,end=' ')<tab>dと((end, ' '))からなる辞書を出力する<EOS>
<SOS>m = n//d<tab>nをdで割った商をmとする<EOS>
<SOS>while m>=d :<tab>mがd以上の間、繰り返す<EOS>
<SOS>if (n%d==0) :<tab>({{nをdで割った余り}}が0かどうか)の組のとき、<EOS>
<SOS>print(d,end=' ')<tab>dと((end, ' '))からなる辞書を出力する<EOS>
<SOS>n = m<tab>mをnとする<EOS>
<SOS>m = n//d<tab>nをdで割った商をmとする<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>a,b = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(pow(a,b,1000000007))<tab>aのb乗に対する1000000007の剰余を出力する<EOS>
<SOS>while b :<tab>bの間、繰り返す<EOS>
<SOS>a,b = b,a%b<tab>bとaをbで割った余りをaとbとする<EOS>
<SOS>return a<tab>aを関数出力とする<EOS>
<SOS>return a//gcd(a,b)*b<tab>aをgcd(a,b)で割った商にbを掛けた値を関数出力とする<EOS>
<SOS>input()<tab>入力された文字列<EOS>
<SOS>a = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>b = 1<tab>1をbとする<EOS>
<SOS>for i  in a :<tab>aの各要素を順にiとして、繰り返す<EOS>
<SOS>b = lcm(b,i)<tab>lcm(b,i)をbとする<EOS>
<SOS>print(b)<tab>bを出力する<EOS>
<SOS>a,b = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>while b :<tab>bの間、繰り返す<EOS>
<SOS>a,b = b,a%b<tab>bとaをbで割った余りをaとbとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>N = 32768<tab>32768をNとする<EOS>
<SOS>p = [i for i in range(N)]<tab>{{0からN未満までの数列}}の各要素をiとし、iの列をpとする<EOS>
<SOS>for i  in range(2,int(N**0.5)+1) :<tab>2からNの0.5乗の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if p[i] :<tab>p(i)のとき、<EOS>
<SOS>for j  in range(i*i,N,i) :<tab>iにiを掛けた値からN未満までのi間隔の数列の各要素を順にjとして、繰り返す<EOS>
<SOS>p[j] = 0<tab>0をp[j]にする<EOS>
<SOS>p = sorted(set(p))[2:]<tab>pの集合をソートした列の先頭2個を取り除いた部分をpとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n==0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>if n&1 :<tab>&(n,1)のとき、<EOS>
<SOS>c = int(n-2 in p)<tab>{{nから2を引いた値}}がpに含まれるかどうかの整数値をcとする<EOS>
<SOS>print(c)<tab>cを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n==0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>while n!=1 :<tab>nが1と等しくない間、繰り返す<EOS>
<SOS>n = n*3+1 if n%2 else n/2<tab>nを2で割った余りのとき{{nに3を掛けた値}}に1を加えた値、そうでなければnを2で割った値をnとする<EOS>
<SOS>print(c)<tab>cを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>print(sum([(i*d)**2*d for i in range(600//d)]))<tab>{{{{0から600//d未満までの数列}}の各要素をiとし、{{(i*d)**2にdを掛けた値}}の列}}の総和を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>x = (c*d-a*f)/(b*d-a*e)<tab>({{{{cにdを掛けた値}}から{{aにfを掛けた値}}を引いた値}})の組を({{{{bにdを掛けた値}}から{{aにeを掛けた値}}を引いた値}})の組で割った値をxとする<EOS>
<SOS>print("%.3f %.3f"%((c-b*x)/a,x))<tab>"%.3f %.3f"を({{(c-b*x)の組をaで割った値}}とx)の組で割った余りを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>q = float(input())<tab>入力された文字列の浮動小数点数値をqとする<EOS>
<SOS>if q<0 :<tab>qが0より小さいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = q/2<tab>qを2で割った値をxとする<EOS>
<SOS>while abs(x**3-q)>=q*10**(-5) :<tab>{{xの3乗からqを引いた値}}の絶対値がqに10の(-5)の組乗を掛けた値以上の間、繰り返す<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>print(' '.join([x for x in input().replace(',','').replace('.','').split() if 2<len(x)<7]))<tab>{{{{input().replace(',','').replace('.','')を空白で分割した列}}の各要素をxとし、{{2<len(x)が7より小さい}}ときのxの列}}を文字列' 'で連結した文字列を出力する<EOS>
<SOS>print(input()[::-1])<tab>入力された文字列の逆順を出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>if n=="END OF INPUT" :<tab>nが"END OF INPUT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>for i  in n :<tab>nの各要素を順にiとして、繰り返す<EOS>
<SOS>if i==' ' :<tab>iが' 'のとき、<EOS>
<SOS>print(c,end="")<tab>cと((end, ""))からなる辞書を出力する<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>print(c)<tab>cを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>b = c=0<tab>0をcとするをbとする<EOS>
<SOS>for i  in range(len(a)-2) :<tab>0からaの長さから2を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if a[i:i+3]=='JOI' :<tab>aの位置iから位置{{iに3を加えた値}}までの部分が'JOI'のとき、<EOS>
<SOS>print(b)<tab>bを出力する<EOS>
<SOS>print(c)<tab>cを出力する<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>if s==s[::-1] :<tab>sがsの逆順のとき、<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'<tab>'ABCDEFGHIJKLMNOPQRSTUVWXYZ'をaとする<EOS>
<SOS>for x  in input() :<tab>入力された文字列の各要素を順にxとして、繰り返す<EOS>
<SOS>print(a[a.index(x)-3],end='')<tab>a({{a.index(x)から3を引いた値}})と((end, ''))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>s = input().split()<tab>入力された文字列を空白で分割した列をsとする<EOS>
<SOS>print(max(s,key=s.count),max(s,key=len))<tab>sと((key, sのcount))からなる辞書の最大値とsと((key, len))からなる辞書の最大値を出力する<EOS>
<SOS>print(input().replace('apple','#').replace('peach','apple').replace('#','peach'))<tab>{{{{入力された文字列内の'apple'を'#'で置き換えた文字列}}内の'peach'を'apple'で置き換えた文字列}}内の'#'を'peach'で置き換えた文字列を出力する<EOS>
<SOS>import re<tab>reモジュールを用いる<EOS>
<SOS>p = 0<tab>0をpとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>for i  in re.findall('[0-9]+',s) :<tab>re.findall('[0-9]+',s)の各要素を順にiとして、繰り返す<EOS>
<SOS>print(p)<tab>pを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>b = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをbとする<EOS>
<SOS>h = 0<tab>0をhとする<EOS>
<SOS>for i,j  in zip(a,b) :<tab>aとbの要素をそれぞれ組にした列の各要素を順にiとjとして、繰り返す<EOS>
<SOS>print(h,len(set(a)&set(b))-h)<tab>hと&(aの集合,bの集合)の長さからhを引いた値を出力する<EOS>
<SOS>return b*(100+x)//100+(a-b)*(100+x)//100<tab>{{bに({{100にxを加えた値}})の組を掛けた値}}を100で割った商に{{({{aからbを引いた値}})の組に({{100にxを加えた値}})の組を掛けた値}}を100で割った商を加えた値を関数出力とする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>x,y,s = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にx、y、sとする<EOS>
<SOS>if x==0 :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>for i  in range(s*100//(100+x),s+1) :<tab>{{sに100を掛けた値}}を({{100にxを加えた値}})の組で割った商からsに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1,i//2+1) :<tab>1から{{iを2で割った商}}に1を加えた値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if t(i,j,x)!=s :<tab>t(i,j,x)がsと等しくないとき、<EOS>
<SOS>pass<tab>何もしない<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>n,t,e = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、t、eとする<EOS>
<SOS>x = list(map(int,input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをxとする<EOS>
<SOS>ans = -1<tab>-1をansとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(x[i],20000,x[i]) :<tab>x(i)から20000未満までのx(i)間隔の数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if t-e<=j<=t+e :<tab>{{tからeを引いた値}}がj以下かどうかがtにeを加えた値以下のとき、<EOS>
<SOS>ans = i+1<tab>iに1を加えた値をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n==0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = str(oct(n)[2:])<tab>nの8進文字列の先頭2個を取り除いた部分の文字列をnとする<EOS>
<SOS>n = n.translate(str.maketrans('4567','5789'))<tab>n.translate(str.maketrans('4567','5789'))をnとする<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>s = h*h+w*w<tab>hにhを掛けた値にwにwを掛けた値を加えた値をsとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>while h*h<s :<tab>hにhを掛けた値がsより小さい間、繰り返す<EOS>
<SOS>w = h+1<tab>hに1を加えた値をwとする<EOS>
<SOS>while h*h+w*w<=s :<tab>{{hにhを掛けた値}}に{{wにwを掛けた値}}を加えた値がs以下の間、繰り返す<EOS>
<SOS>if h*h+w*w==s :<tab>{{hにhを掛けた値}}に{{wにwを掛けた値}}を加えた値がsのとき、<EOS>
<SOS>print(h,w)<tab>hとwを出力する<EOS>
<SOS>return<tab>関数処理を中断する<EOS>
<SOS>h = 1<tab>1をhとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>h,w = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にhとwとする<EOS>
<SOS>if h==0 :<tab>hが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>print('INVALID' if s.isalpha() or s.isdigit() or s.islower() or s.isupper() or len(s)<6 else 'VALID')<tab>s.isalpha() or s.isdigit() 、またはs.islower() 、または{{sの全てが英大文字かどうか}}、または{{sの長さが6より小さいかどうか}}のとき'INVALID'、そうでなければ'VALID'を出力する<EOS>
<SOS>s = ['','Man','Oku','Cho','Kei','Gai','Jo','Jou','Ko','Kan','Sei','Sai','Gok','Ggs','Asg','Nyt','Fks','Mts']<tab>(''、'Man'、'Oku'、'Cho'、'Kei'、'Gai'、'Jo'、'Jou'、'Ko'、'Kan'、'Sei'、'Sai'、'Gok'、'Ggs'、'Asg'、'Nyt'、'Fks'、'Mts')からなる列をsとする<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>m,n = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>if m==0 :<tab>mが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = ''<tab>''をaとする<EOS>
<SOS>for i  in range(0,len(str(m**n)),4) :<tab>0からmのn乗の文字列の長さ未満までの4間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>b = m**n//(10**i)%10000<tab>mのn乗を(10のi乗)の組で割った商を10000で割った余りをbとする<EOS>
<SOS>if b :<tab>bのとき、<EOS>
<SOS>a = str(b)+s[i//4]+a<tab>bの文字列にs({{iを4で割った商}})を加えた値にaを加えた値をaとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>for _  in range(int(input())) :<tab>0から入力された文字列の整数値未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>for i  in range(1,27,2) :<tab>1から27未満までの2間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(27) :<tab>0から27未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>a = []<tab>空列をaとする<EOS>
<SOS>for k  in range(len(s)) :<tab>0からsの長さ未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if s[k].islower() :<tab>s(k)の全てが英小文字のとき、<EOS>
<SOS>a = ''.join(a)<tab>aを文字列''で連結した文字列をaとする<EOS>
<SOS>if 'this' in a or 'that' in a :<tab>'this'がaに含まれ、または'that'がaに含まれるとき、<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while 1 :<tab>1の間、繰り返す<EOS>
<SOS>i,a,n = 0,'',1<tab>0、''、1をi、a、nとする<EOS>
<SOS>for i  in s :<tab>sの各要素を順にiとして、繰り返す<EOS>
<SOS>if n==0 :<tab>nが0のとき、<EOS>
<SOS>n = int(i)<tab>iの整数値をnとする<EOS>
<SOS>n = 0<tab>0をnとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>for _  in range(int(input())) :<tab>0から入力された文字列の整数値未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>a = b=c=0<tab>0をcをbとするとするをaとする<EOS>
<SOS>for x  in map(int,input().split()) :<tab>map(整数,入力された文字列を空白で分割した列)の各要素を順にxとして、繰り返す<EOS>
<SOS>if x>b :<tab>xがbより大きいとき、<EOS>
<SOS>b = x<tab>xをbとする<EOS>
<SOS>c = x<tab>xをcとする<EOS>
<SOS>print(['YES','NO'][a])<tab>('YES'と'NO')からなる列(a)を出力する<EOS>
<SOS>a,b = -1e11,1e11<tab>-1e11と1e11をaとbとする<EOS>
<SOS>for _  in range(int(input())) :<tab>0から入力された文字列の整数値未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>c = int(input())<tab>入力された文字列の整数値をcとする<EOS>
<SOS>a,b = max(a,c-b),min(b,c)<tab>aとcからbを引いた値の最大値とbとcの最小値をaとbとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>s = list(input().split())<tab>入力された文字列を空白で分割した列のリストをsとする<EOS>
<SOS>a = []<tab>空列をaとする<EOS>
<SOS>for x  in s :<tab>sの各要素を順にxとして、繰り返す<EOS>
<SOS>if x in ['+','-','*'] :<tab>xが('+'、'-'、'*')からなる列に含まれるとき、<EOS>
<SOS>c,b = str(a.pop()),str(a.pop())<tab>a.pop()の文字列とa.pop()の文字列をcとbとする<EOS>
<SOS>print(a.pop())<tab>a.pop()を出力する<EOS>
<SOS>input()<tab>入力された文字列<EOS>
<SOS>a = input().split()<tab>入力された文字列を空白で分割した列をaとする<EOS>
<SOS>input()<tab>入力された文字列<EOS>
<SOS>print(len(set(a)&set(input().split())))<tab>&(aの集合,{{input()を空白で分割した列}}の集合)の長さを出力する<EOS>
<SOS>input()<tab>入力された文字列<EOS>
<SOS>a = input().split()<tab>入力された文字列を空白で分割した列をaとする<EOS>
<SOS>input()<tab>入力された文字列<EOS>
<SOS>print(len(set(a)&set(input().split())))<tab>&(aの集合,{{input()を空白で分割した列}}の集合)の長さを出力する<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(x**3)<tab>xの3乗を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(n * 32)<tab>nに32を掛けた値を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(int((x-30) / 2))<tab>{{({{xから30を引いた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>print(a+b+c)<tab>{{aにbを加えた値}}にcを加えた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a*b, (a+b)*2)<tab>aにbを掛けた値と({{aにbを加えた値}})の組に2を掛けた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>print("a > b")<tab>"a > b"を出力する<EOS>
<SOS>print("a < b")<tab>"a < b"を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(int((a+b)/2))<tab>{{({{aにbを加えた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if b > a  :<tab>bがaより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if c == 1  :<tab>cが1のとき、<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>time = int(input())<tab>入力された文字列の整数値をtimeとする<EOS>
<SOS>H = time//3600<tab>timeを3600で割った商をHとする<EOS>
<SOS>M = time%3600<tab>timeを3600で割った余りをMとする<EOS>
<SOS>S = M%60<tab>Mを60で割った余りをSとする<EOS>
<SOS>M = M//60<tab>Mを60で割った商をMとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>d = int(a / b)<tab>aをbで割った値の整数値をdとする<EOS>
<SOS>e = a % b<tab>aをbで割った余りをeとする<EOS>
<SOS>f = a / b<tab>aをbで割った値をfとする<EOS>
<SOS>print("{0} {1} {2:.5f}".format(d, e, f))<tab>format(d,e,f)を出力する<EOS>
<SOS>pi = 3.141592653589<tab>3.141592653589をpiとする<EOS>
<SOS>r = float(input())<tab>入力された文字列の浮動小数点数値をrとする<EOS>
<SOS>a = r * r * pi<tab>rにrを掛けた値にpiを掛けた値をaとする<EOS>
<SOS>b = r * 2 * pi<tab>rに2を掛けた値にpiを掛けた値をbとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a * b / 3.305785)<tab>{{aにbを掛けた値}}を3.305785で割った値を出力する<EOS>
<SOS>a, b,c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>if b > c  :<tab>bがcより大きいとき、<EOS>
<SOS>b, c = c, b<tab>bとcを入れ替える<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b, c)<tab>a、b、cを出力する<EOS>
<SOS>e1, e2, e3, e4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にe1、e2、e3、e4とする<EOS>
<SOS>if e1 == e2 and e3 == e4 or e1 == e3 and e2 == e4 or e1 == e4 and e2 == e3  :<tab>{{e1がe2}}、かつ{{e3がe4かどうか}}、または{{e1がe3}}、かつ{{e2がe4かどうか}}、または{{e1がe4}}、かつ{{e2がe3かどうか}}のとき、<EOS>
<SOS>print("yes")<tab>"yes"を出力する<EOS>
<SOS>N, A, B, C, D  = map(int, input().split())[#Document [# '# setX']]<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にN、A、B、C、Dとする<EOS>
<SOS>if N % A == 0  :<tab>NをAで割った余りが0のとき、<EOS>
<SOS>X = N // A * B<tab>NをAで割った商にBを掛けた値をXとする<EOS>
<SOS>if N % C == 0  :<tab>NをCで割った余りが0のとき、<EOS>
<SOS>Y = N // C * D<tab>NをCで割った商にDを掛けた値をYとする<EOS>
<SOS>print(min(X, Y))<tab>XとYの最小値を出力する<EOS>
<SOS>A, B, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にA、B、Cとする<EOS>
<SOS>coin = 0<tab>0をcoinとする<EOS>
<SOS>day = 1<tab>1をdayとする<EOS>
<SOS>while coin < C  :<tab>coinがCより小さい間、繰り返す<EOS>
<SOS>if day % 7 == 0  :<tab>dayを7で割った余りが0のとき、<EOS>
<SOS>print(day-1)<tab>dayから1を引いた値を出力する<EOS>
<SOS>n = 1000<tab>1000をnとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < n  :<tab>iがnより小さい間、繰り返す<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>if t == 1  :<tab>tが1のとき、<EOS>
<SOS>return 6000<tab>6000を関数出力とする<EOS>
<SOS>return 4000<tab>4000を関数出力とする<EOS>
<SOS>return 3000<tab>3000を関数出力とする<EOS>
<SOS>return 2000<tab>2000を関数出力とする<EOS>
<SOS>t1, n1  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt1とn1とする<EOS>
<SOS>t2, n2  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt2とn2とする<EOS>
<SOS>t3, n3  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt3とn3とする<EOS>
<SOS>t4, n4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt4とn4とする<EOS>
<SOS>print(change(t1) * n1)<tab>change(t1)にn1を掛けた値を出力する<EOS>
<SOS>print(change(t2) * n2)<tab>change(t2)にn2を掛けた値を出力する<EOS>
<SOS>print(change(t3) * n3)<tab>change(t3)にn3を掛けた値を出力する<EOS>
<SOS>print(change(t4) * n4)<tab>change(t4)にn4を掛けた値を出力する<EOS>
<SOS>for i  in range(7)  :<tab>0から7未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>hi, low  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にhiとlowとする<EOS>
<SOS>print(hi - low)<tab>hiからlowを引いた値を出力する<EOS>
<SOS>for i  in range(9)  :<tab>0から9未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, a, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にname、a、bとする<EOS>
<SOS>print(name, int(a)+int(b), 200*int(a)+300*int(b))<tab>name、aの整数値にbの整数値を加えた値、{{200にaの整数値を掛けた値}}に{{300にbの整数値を掛けた値}}を加えた値を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(sum)<tab>sumを出力する<EOS>
<SOS>i = 1<tab>1をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>if x == 0  :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == 0 and b == 0  :<tab>aが0、かつbが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b)<tab>aとbを出力する<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>for i  in range(N)  :<tab>0からN未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a**2 == b**2 + c**2 or b**2 == c**2 + a**2 or c**2 == a**2 + b**2  :<tab>{{aの2乗が{{bの2乗にcの2乗を加えた値}}}}、または{{bの2乗が{{cの2乗にaの2乗を加えた値}}かどうか}}、またはcの2乗が{{aの2乗にbの2乗を加えた値}}のとき、<EOS>
<SOS>print("YES")<tab>"YES"を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = 100000<tab>100000をSとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if S % 1000 != 0  :<tab>Sを1000で割った余りが0と等しくないとき、<EOS>
<SOS>S = (int(S / 1000) + 1) * 1000<tab>({{{{Sを1000で割った値}}の整数値に1を加えた値}})の組に1000を掛けた値をSとする<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>for i  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H, W  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == 0 and W == 0  :<tab>Hが0、かつWが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>for h  in range(H)  :<tab>0からH未満までの数列の各要素を順にhとして、繰り返す<EOS>
<SOS>for w  in range(W)  :<tab>0からW未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>if (h + w) % 2 == 0  :<tab>({{hにwを加えた値}})の組を2で割った余りが0のとき、<EOS>
<SOS>print("#", end="")<tab>"#"と((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, op, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にa、op、bとする<EOS>
<SOS>a = int(a)<tab>aの整数値をaとする<EOS>
<SOS>b = int(b)<tab>bの整数値をbとする<EOS>
<SOS>if op == "?"  :<tab>opが"?"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(a + b)<tab>aにbを加えた値を出力する<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>print(int(a / b))<tab>{{aをbで割った値}}の整数値を出力する<EOS>
<SOS>print(a * b)<tab>aにbを掛けた値を出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>l = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlとする<EOS>
<SOS>print(min(l), max(l), sum(l))<tab>lの最小値、lの最大値、lの総和を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>data = list(int(input()) for i in range(N))<tab>{{0からN未満までの数列}}の各要素をiとし、入力された文字列の整数値の列のリストをdataとする<EOS>
<SOS>del data[0]<tab>dataの最初値を削除する<EOS>
<SOS>del data[-1]<tab>dataの末尾値を削除する<EOS>
<SOS>data_ave = sum(data)/len(data)<tab>dataの総和をdataの長さで割った値をdata_aveとする<EOS>
<SOS>print(int(data_ave))<tab>data_aveの整数値を出力する<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>print(Fib(N))<tab>Fib(N)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return<tab>関数処理を中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(0, 0.00000000)<tab>0と0.00000000を出力する<EOS>
<SOS>print(100.00000000, 0.00000000)<tab>100.00000000と0.00000000を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(5)  :<tab>0から5未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>score = int(input())<tab>入力された文字列の整数値をscoreとする<EOS>
<SOS>if score < 40  :<tab>scoreが40より小さいとき、<EOS>
<SOS>score = 40<tab>40をscoreとする<EOS>
<SOS>print(sum//5)<tab>sumを5で割った商を出力する<EOS>
<SOS>list_a = []<tab>空列をlist_aとする<EOS>
<SOS>list_b = []<tab>空列をlist_bとする<EOS>
<SOS>for x  in range(4)  :<tab>0から4未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>for x  in range(2)  :<tab>0から2未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>print(sum(list_a[0:3]) + list_b[0])<tab>{{list_aの位置0から位置3までの部分}}の総和にlist_bの最初値を加えた値を出力する<EOS>
<SOS>list_W = []<tab>空列をlist_Wとする<EOS>
<SOS>list_K = []<tab>空列をlist_Kとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>sum_W = sum(list_W[0:3])<tab>list_Wの位置0から位置3までの部分の総和をsum_Wとする<EOS>
<SOS>sum_K = sum(list_K[0:3])<tab>list_Kの位置0から位置3までの部分の総和をsum_Kとする<EOS>
<SOS>print(sum_W, sum_K)<tab>sum_Wとsum_Kを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>A = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをAとする<EOS>
<SOS>m = min(A)<tab>Aの最小値をmとする<EOS>
<SOS>M = max(A)<tab>Aの最大値をMとする<EOS>
<SOS>print(math.ceil((m + M) / 2) - m)<tab>math.ceil((m + M) / 2) からmを引いた値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>List = []<tab>空列をListとする<EOS>
<SOS>max_ans = 0<tab>0をmax_ansとする<EOS>
<SOS>sum_ans = 0<tab>0をsum_ansとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i < m  :<tab>iがmより小さいとき、<EOS>
<SOS>if i >= m - 1 and max_ans < sum_ans  :<tab>iが{{mから1を引いた値}}以上、かつmax_ansがsum_ansより小さいとき、<EOS>
<SOS>max_ans = sum_ans<tab>sum_ansをmax_ansとする<EOS>
<SOS>print(max_ans)<tab>max_ansを出力する<EOS>
<SOS>LIST = []<tab>空列をLISTとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(LIST[0])<tab>LISTの最初値を出力する<EOS>
<SOS>print(LIST[1])<tab>LIST(1)を出力する<EOS>
<SOS>print(LIST[2])<tab>LIST(2)を出力する<EOS>
<SOS>str_org = str(input())<tab>入力された文字列の文字列をstr_orgとする<EOS>
<SOS>print(str_org.upper())<tab>str_orgを英大文字に変換した文字列を出力する<EOS>
<SOS>str = input()<tab>入力された文字列をstrとする<EOS>
<SOS>print(str.swapcase())<tab>strの英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>count_char = list(0 for i in range(26))<tab>{{0から26未満までの数列}}の各要素をiとし、0の列のリストをcount_charとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>for i  in range(97, 123)  :<tab>97から123未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(chr(i), ":", count_char[i-97])<tab>文字コードiの文字、":"、count_char({{iから97を引いた値}})を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>num = input()<tab>入力された文字列をnumとする<EOS>
<SOS>if num == '0'  :<tab>numが'0'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>num_lst = [int(i) for i in num]<tab>numの各要素をiとし、iの整数値の列をnum_lstとする<EOS>
<SOS>print(sum(num_lst))<tab>num_lstの総和を出力する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>count_K = a.count("K")<tab>a内の"K"の出現をカウントした整数をcount_Kとする<EOS>
<SOS>count_P = a.count("P")<tab>a内の"P"の出現をカウントした整数をcount_Pとする<EOS>
<SOS>count_U = a.count("U")<tab>a内の"U"の出現をカウントした整数をcount_Uとする<EOS>
<SOS>count_C = a.count("C")<tab>a内の"C"の出現をカウントした整数をcount_Cとする<EOS>
<SOS>print(min(count_K, count_P, count_U, count_C))<tab>count_K、count_P、count_U、count_Cの最小値を出力する<EOS>
<SOS>W = input()<tab>入力された文字列をWとする<EOS>
<SOS>n = 0<tab>0をnとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>T = input()<tab>入力された文字列をTとする<EOS>
<SOS>if T== "END_OF_TEXT"  :<tab>Tが"END_OF_TEXT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>small_T = list(T.split())<tab>Tを空白で分割した列のリストをsmall_Tとする<EOS>
<SOS>for i  in range(len(small_T))  :<tab>0からsmall_Tの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if str.lower(small_T[i]) == str.lower(W)  :<tab>strとsmall_T(i)を英小文字に変換した文字列がstrとWを英小文字に変換した文字列のとき、<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>s = list(input())<tab>入力された文字列のリストをsとする<EOS>
<SOS>p = list(input())<tab>入力された文字列のリストをpとする<EOS>
<SOS>for x  in range(len(p))  :<tab>0からpの長さ未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if p[j] == s[i]  :<tab>p(j)がs(i)のとき、<EOS>
<SOS>if j == len(p)  :<tab>jがpの長さのとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == len(s)  :<tab>iがsの長さのとき、<EOS>
<SOS>print("No")<tab>"No"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>b = list(input())<tab>入力された文字列のリストをbとする<EOS>
<SOS>for j  in range(len(a)+1-len(b))  :<tab>0から{{aの長さに1を加えた値}}からbの長さを引いた値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>Same = True<tab>真をSameとする<EOS>
<SOS>ans = j<tab>jをansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(b)  :<tab>iがbの長さより小さい間、繰り返す<EOS>
<SOS>if b[i] == a[j]  :<tab>b(i)がa(j)のとき、<EOS>
<SOS>if Same == True  :<tab>Sameが真のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>Taro_ten = 0<tab>0をTaro_tenとする<EOS>
<SOS>Hanako_ten = 0<tab>0をHanako_tenとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b  = list(input().split())<tab>入力された文字列を空白で分割した列のリストを展開し順にaとbとする<EOS>
<SOS>Taro = list(a)<tab>aのリストをTaroとする<EOS>
<SOS>Hanako = list(b)<tab>bのリストをHanakoとする<EOS>
<SOS>length = min(len(Taro), len(Hanako))<tab>Taroの長さとHanakoの長さの最小値をlengthとする<EOS>
<SOS>for i  in range(length)  :<tab>0からlength未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if ord(Taro[i]) > ord(Hanako[i])  :<tab>Taro(i)の順序数がHanako(i)の順序数より大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == length -1  :<tab>iがlengthから1を引いた値のとき、<EOS>
<SOS>if len(Taro) > length  :<tab>Taroの長さがlengthより大きいとき、<EOS>
<SOS>print(Taro_ten, Hanako_ten)<tab>Taro_tenとHanako_tenを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>score = input()<tab>入力された文字列をscoreとする<EOS>
<SOS>if score == "0"  :<tab>scoreが"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>score_a = score.count("A")<tab>score内の"A"の出現をカウントした整数をscore_aとする<EOS>
<SOS>score_b = score.count("B")<tab>score内の"B"の出現をカウントした整数をscore_bとする<EOS>
<SOS>if score[0] == "A"  :<tab>score(0)が"A"のとき、<EOS>
<SOS>if score_a > score_b  :<tab>score_aがscore_bより大きいとき、<EOS>
<SOS>print(score_a, score_b)<tab>score_aとscore_bを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>x1, y1, x2, y2  = map(float, input().split())<tab>map(float,入力された文字列を空白で分割した列)を展開し順にx1、y1、x2、y2とする<EOS>
<SOS>dist = math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)<tab>math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)をdistとする<EOS>
<SOS>print("{:.5f}".format(dist))<tab>format(dist)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>a, b, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、Cとする<EOS>
<SOS>S = a * b * math.sin(math.pi * C / 180) / 2<tab>{{aにbを掛けた値}}にmath.sin(math.pi * C / 180) を掛けた値を2で割った値をSとする<EOS>
<SOS>c = math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))<tab>math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))をcとする<EOS>
<SOS>L = a + b + c<tab>aにbを加えた値にcを加えた値をLとする<EOS>
<SOS>h = 2 * S / a<tab>2にSを掛けた値をaで割った値をhとする<EOS>
<SOS>print('{:.4f}'.format(S))<tab>format(S)を出力する<EOS>
<SOS>print('{:.4f}'.format(L))<tab>format(L)を出力する<EOS>
<SOS>print('{:.4f}'.format(h))<tab>format(h)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをsとする<EOS>
<SOS>m = sum(s) / len(s)<tab>sの総和をsの長さで割った値をmとする<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = math.sqrt(a)<tab>math.sqrt(a)をaとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, f, r  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にm、f、rとする<EOS>
<SOS>if m == -1 and f == -1 and r == -1  :<tab>{{mが-1}}、かつ{{fが-1かどうか}}、かつrが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if m == -1 or f == -1  :<tab>mが-1、またはfが-1のとき、<EOS>
<SOS>print("F")<tab>"F"を出力する<EOS>
<SOS>print("A")<tab>"A"を出力する<EOS>
<SOS>print("B")<tab>"B"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("D")<tab>"D"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n-1)  :<tab>1からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(i+1, n)  :<tab>iに1を加えた値からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for k  in range(j+1, n+1)  :<tab>jに1を加えた値からnに1を加えた値未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if i + j + k == m  :<tab>{{iにjを加えた値}}にkを加えた値がmのとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>card = [[False for i in range(13)] for j in range(4)]<tab>{{0から4未満までの数列}}の各要素をjとし、{{{{0から13未満までの数列}}の各要素をiとし、偽の列}}の列をcardとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>mark, suit  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にmarkとsuitとする<EOS>
<SOS>if mark == "S"  :<tab>markが"S"のとき、<EOS>
<SOS>mark_num = 0<tab>0をmark_numとする<EOS>
<SOS>mark_num = 1<tab>1をmark_numとする<EOS>
<SOS>mark_num = 2<tab>2をmark_numとする<EOS>
<SOS>mark_num = 3<tab>3をmark_numとする<EOS>
<SOS>card[mark_num][int(suit)-1]  = True<tab>真をcard[mark_num][int(suit)-1] にする<EOS>
<SOS>for j  in range(4)  :<tab>0から4未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for i  in range(13)  :<tab>0から13未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if card[j][i] == False  :<tab>card(j)(i)が偽のとき、<EOS>
<SOS>if j == 0  :<tab>jが0のとき、<EOS>
<SOS>print("S", i+1)<tab>"S"とiに1を加えた値を出力する<EOS>
<SOS>print("H", i+1)<tab>"H"とiに1を加えた値を出力する<EOS>
<SOS>print("C", i+1)<tab>"C"とiに1を加えた値を出力する<EOS>
<SOS>print("D", i+1)<tab>"D"とiに1を加えた値を出力する<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>A = [int(input()) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、入力された文字列の整数値の列をAとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(m)  :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n, m, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、lとする<EOS>
<SOS>A = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をAとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(l)  :<tab>0からl未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for k  in range(m)  :<tab>0からm未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if j == l-1  :<tab>jがlから1を引いた値のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>L = []<tab>空列をLとする<EOS>
<SOS>temp = n<tab>nをtempとする<EOS>
<SOS>print(n,end="")<tab>nと((end, ""))からなる辞書を出力する<EOS>
<SOS>print(":",end="")<tab>":"と((end, ""))からなる辞書を出力する<EOS>
<SOS>for i  in range(2, int(n**(1/2)//1)+1) :<tab>2から{{nの(1/2)乗を1で割った商}}の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if temp%i==0 :<tab>tempをiで割った余りが0のとき、<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>while temp%i==0 :<tab>tempをiで割った余りが0の間、繰り返す<EOS>
<SOS>for j  in range(c) :<tab>0からc未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print("",i,end="")<tab>""、i、((end, ""))からなる辞書を出力する<EOS>
<SOS>if temp!=1 :<tab>tempが1と等しくないとき、<EOS>
<SOS>print("",temp, end="")<tab>""、temp、((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>factorization(n)<tab>factorization(n)<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>return (x % mod)<tab>(xをmodで割った余り)の組を関数出力とする<EOS>
<SOS>if b == 1  :<tab>bが1のとき、<EOS>
<SOS>return a<tab>aを関数出力とする<EOS>
<SOS>a_2 = S(a**2)<tab>S(aの2乗)をa_2とする<EOS>
<SOS>b_2 = b // 2<tab>bを2で割った商をb_2とする<EOS>
<SOS>return S(A(a_2, b_2, mod))<tab>S(A(a_2,b_2,mod))を関数出力とする<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>print(A(m, n, mod))<tab>A(m,n,mod)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if y == 0  :<tab>yが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if x < y  :<tab>xがyより小さいとき、<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>x = x % y<tab>xをyで割った余りをxとする<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>print(x, ans)<tab>xとansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if a < b  :<tab>aがbより小さいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>amari = a % b<tab>aをbで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>return (b)<tab>(b)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>c = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcとする<EOS>
<SOS>for i  in range(n-1, 0, -1)  :<tab>nから1を引いた値から0未満までの-1間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c[i-1]  = int(c[i] * c[i-1] / gcd(c[i], c[i-1]))<tab>{{c(i)にc({{iから1を引いた値}})を掛けた値}}をgcd(c(i),c({{iから1を引いた値}}))で割った値の整数値をc[i-1] にする<EOS>
<SOS>print(c[0])<tab>cの最初値を出力する<EOS>
<SOS>N, M  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にNとMとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if N < M  :<tab>NがMより小さいとき、<EOS>
<SOS>N, M = M, N<tab>NとMを入れ替える<EOS>
<SOS>amari = N % M<tab>NをMで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(M)<tab>Mを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return 'F'<tab>'F'を関数出力とする<EOS>
<SOS>return 'T'<tab>'T'を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(n)  :<tab>0からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>a = int(input())<tab>入力された文字列の整数値をaとする<EOS>
<SOS>if Sosu(a) == 'T'  :<tab>Sosu(a)が'T'のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(3, int(math.sqrt(n))+1, 2)  :<tab>3からmath.sqrt(n)の整数値に1を加えた値未満までの2間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if n % i == 0  :<tab>nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>S = [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4]<tab>(0、0、1、2、2、3、3、4、4、4、4)からなる列をSとする<EOS>
<SOS>for i  in range(11, 1000000)  :<tab>11から1000000未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i % 2 == 0  :<tab>iを2で割った余りが0のとき、<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>print(S[n])<tab>S(n)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(2, a)  :<tab>2からa未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>other = a - i<tab>aからiを引いた値をotherとする<EOS>
<SOS>if other >= i and Sosu(other)  :<tab>otherがi以上、かつSosu(other)のとき、<EOS>
<SOS>return count<tab>countを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(main(n))<tab>main(n)を出力する<EOS>
<SOS>if n % 2 == 0  :<tab>nを2で割った余りが0のとき、<EOS>
<SOS>return n // 2<tab>nを2で割った商を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>while n != 1  :<tab>nが1と等しくない間、繰り返す<EOS>
<SOS>n = Collatz(n)<tab>Collatz(n)をnとする<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>S = 0<tab>0をSとする<EOS>
<SOS>for i  in range(600//d)  :<tab>0から600をdで割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>if q == -1  :<tab>qが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = 1<tab>1をnとする<EOS>
<SOS>x = q / 2<tab>qを2で割った値をxとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if abs(x**3 - q) < (0.00001 * q)  :<tab>{{xの3乗からqを引いた値}}の絶対値が({{0.00001にqを掛けた値}})の組より小さいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = x - (x**3 - q) / (3 * x**2)<tab>xから({{xの3乗からqを引いた値}})の組を({{3にxの2乗を掛けた値}})の組で割った値を引いた値をxとする<EOS>
<SOS>print('{:.6f}'.format(x))<tab>format(x)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a = input()<tab>入力された文字列をaとする<EOS>
<SOS>if a == "END OF INPUT"  :<tab>aが"END OF INPUT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>b = list(a)<tab>aのリストをbとする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(len(b))  :<tab>0からbの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if b[i] != ' '  :<tab>b(i)が' 'と等しくないとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>count_j = 0<tab>0をcount_jとする<EOS>
<SOS>count_i = 0<tab>0をcount_iとする<EOS>
<SOS>for i  in range(len(l)-2)  :<tab>'0からlの長さから2を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if l[i] == "J" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"J"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>if l[i] == "I" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"I"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>return count_j, count_i<tab>(count_jとcount_i)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>j, i  = JOIOI(l)<tab>JOIOI(l)を展開し順にjとiとする<EOS>
<SOS>print(j)<tab>jを出力する<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>pal = "True"<tab>"True"をpalとする<EOS>
<SOS>for i  in range(len(s)//2)  :<tab>0からsの長さを2で割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] != s[-i-1]  :<tab>s(i)がs({{-iから1を引いた値}})と等しくないとき、<EOS>
<SOS>pal = "False"<tab>"False"をpalとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if pal == "True"  :<tab>palが"True"のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>sentence = list(input().split())<tab>入力された文字列を空白で分割した列のリストをsentenceとする<EOS>
<SOS>max_length = 0<tab>0をmax_lengthとする<EOS>
<SOS>max_sentence = ""<tab>""をmax_sentenceとする<EOS>
<SOS>count = []<tab>空列をcountとする<EOS>
<SOS>for i  in range(len(sentence))  :<tab>0からsentenceの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if max_length < len(sentence[i])  :<tab>max_lengthがsentence(i)の長さより小さいとき、<EOS>
<SOS>max_length = len(sentence[i])<tab>sentence(i)の長さをmax_lengthとする<EOS>
<SOS>max_sentence = sentence[i]<tab>sentence(i)をmax_sentenceとする<EOS>
<SOS>new_word = False<tab>偽をnew_wordとする<EOS>
<SOS>for j  in range(len(count))  :<tab>0からcountの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if count[j][0] == sentence[i]  :<tab>count(j)(0)がsentence(i)のとき、<EOS>
<SOS>new_word = True<tab>真をnew_wordとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if new_word == False  :<tab>new_wordが偽のとき、<EOS>
<SOS>count = sorted(count, key = itemgetter(1), reverse = True)<tab>countと((key, itemgetter(1))と(reverse, 真))からなる辞書をソートした列をcountとする<EOS>
<SOS>print(count[0][0], max_sentence)<tab>countの最初値の最初値とmax_sentenceを出力する<EOS>
<SOS>A = list(input().split())<tab>入力された文字列を空白で分割した列のリストをAとする<EOS>
<SOS>for i  in range(len(A))  :<tab>0からAの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if "apple" in A[i]  :<tab>"apple"がA(i)に含まれるとき、<EOS>
<SOS>A[i]  = A[i].replace("apple", "peach")<tab>A(i)内の"apple"を"peach"で置き換えた文字列をA[i] にする<EOS>
<SOS>A[i]  = A[i].replace("peach", "apple")<tab>A(i)内の"peach"を"apple"で置き換えた文字列をA[i] にする<EOS>
<SOS>print(" ".join(A))<tab>Aを文字列" "で連結した文字列を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>hit = 0<tab>0をhitとする<EOS>
<SOS>brow = 0<tab>0をbrowとする<EOS>
<SOS>if a1 == b1  :<tab>a1がb1のとき、<EOS>
<SOS>if a2 == b2  :<tab>a2がb2のとき、<EOS>
<SOS>if a3 == b3  :<tab>a3がb3のとき、<EOS>
<SOS>if a4 == b4  :<tab>a4がb4のとき、<EOS>
<SOS>if a1 == b2 or a1 == b3 or a1 == b4  :<tab>{{a1がb2}}、または{{a1がb3かどうか}}、またはa1がb4のとき、<EOS>
<SOS>if a2 == b1 or a2 == b3 or a2 == b4  :<tab>{{a2がb1}}、または{{a2がb3かどうか}}、またはa2がb4のとき、<EOS>
<SOS>if a3 == b1 or a3 == b2 or a3 == b4  :<tab>{{a3がb1}}、または{{a3がb2かどうか}}、またはa3がb4のとき、<EOS>
<SOS>if a4 == b1 or a4 == b2 or a4 == b3  :<tab>{{a4がb1}}、または{{a4がb2かどうか}}、またはa4がb3のとき、<EOS>
<SOS>print(hit, brow)<tab>hitとbrowを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for j  in range(i, n)  :<tab>iからn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if s == n  :<tab>sがnのとき、<EOS>
<SOS>if s > n  :<tab>sがnより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>for i  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>i_tax = int(i + i*x/100)<tab>iに{{{{iにxを掛けた値}}を100で割った値}}を加えた値の整数値をi_taxとする<EOS>
<SOS>for j  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>j_tax = int(j + j*x/100)<tab>jに{{{{jにxを掛けた値}}を100で割った値}}を加えた値の整数値をj_taxとする<EOS>
<SOS>if i_tax + j_tax > s  :<tab>i_taxにj_taxを加えた値がsより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i_tax + j_tax == s  :<tab>i_taxにj_taxを加えた値がsのとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>ans = int(i + i*y/100) + int(j + j*y/100)<tab>{{iに{{{{iにyを掛けた値}}を100で割った値}}を加えた値}}の整数値に{{jに{{{{jにyを掛けた値}}を100で割った値}}を加えた値}}の整数値を加えた値をansとする<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y, s  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にx、y、sとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = calc_before(x, s)<tab>calc_before(x,s)をlstとする<EOS>
<SOS>max_price = 0<tab>0をmax_priceとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>price = calc_after(lst[i][0], lst[i][1], y)<tab>calc_after(lst(i)の最初値,lst(i)(1),y)をpriceとする<EOS>
<SOS>max_price = max(price, max_price)<tab>priceとmax_priceの最大値をmax_priceとする<EOS>
<SOS>print(max_price)<tab>max_priceを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>catalog = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcatalogとする<EOS>
<SOS>max_p = 0<tab>0をmax_pとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if i != j  :<tab>iがjと等しくないとき、<EOS>
<SOS>x = catalog[i] + catalog[j]<tab>catalog(i)にcatalog(j)を加えた値をxとする<EOS>
<SOS>if x <= m and x > max_p  :<tab>xがm以下、かつxがmax_pより大きいとき、<EOS>
<SOS>max_p = x<tab>xをmax_pとする<EOS>
<SOS>if max_p == 0  :<tab>max_pが0のとき、<EOS>
<SOS>print("NONE")<tab>"NONE"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlstとする<EOS>
<SOS>ave_lst = sum(lst) / len(lst)<tab>lstの総和をlstの長さで割った値をave_lstとする<EOS>
<SOS>Sum = 0<tab>0をSumとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] <= ave_lst  :<tab>lst(i)がave_lst以下のとき、<EOS>
<SOS>print(Sum)<tab>Sumを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if N == 1  :<tab>Nが1のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(a+1, b+1)  :<tab>aに1を加えた値からbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(amount_sosu(n, n*2))<tab>amount_sosu(n,{{nに2を掛けた値}})を出力する<EOS>
<SOS>n, t, e  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、t、eとする<EOS>
<SOS>watch = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをwatchとする<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>for w  in range(n)  :<tab>0からn未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>for i  in range(e+1)  :<tab>0からeに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if (t+i) % watch[w] == 0  :<tab>({{tにiを加えた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if (t-i) % watch[w] == 0  :<tab>({{tからiを引いた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>print(w+1)<tab>wに1を加えた値を出力する<EOS>
<SOS>d, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にdとlとする<EOS>
<SOS>s = int(d / l + d % l)<tab>{{dをlで割った値}}に{{dをlで割った余り}}を加えた値の整数値をsとする<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>if d == 0  :<tab>dが0のとき、<EOS>
<SOS>new_i = square[n][0] - 1<tab>square(n)(0)から1を引いた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] - 1<tab>square(n)(1)から1を引いた値をnew_jとする<EOS>
<SOS>new_i = square[n][0] + 1<tab>square(n)(0)に1を加えた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] + 1<tab>square(n)(1)に1を加えた値をnew_jとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>square = [[0, 0]]<tab>((0と0)からなる列)からなる列をsquareとする<EOS>
<SOS>for i  in range(N-1)  :<tab>0からNから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n, d  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとdとする<EOS>
<SOS>sort_x_square = sorted(square)<tab>squareをソートした列をsort_x_squareとする<EOS>
<SOS>print(sort_x_square[-1][0] - sort_x_square[0][0]+1, sort_y_square[-1][1] - sort_y_square[0][1]+1)<tab>{{sort_x_squareの末尾値(0)からsort_x_squareの最初値の最初値を引いた値}}に1を加えた値と{{sort_y_squareの末尾値(1)からsort_y_squareの最初値(1)を引いた値}}に1を加えた値を出力する<EOS>
<SOS>new = []<tab>空列をnewとする<EOS>
<SOS>re_a = list(reversed(a))<tab>aを反転した列のリストをre_aとする<EOS>
<SOS>re_b = list(reversed(b))<tab>bを反転した列のリストをre_bとする<EOS>
<SOS>return list(set(new))<tab>newの集合のリストを関数出力とする<EOS>
<SOS>m = int(input())<tab>入力された文字列の整数値をmとする<EOS>
<SOS>for i  in range(m)  :<tab>0からm未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>train = list(input())<tab>入力された文字列のリストをtrainとする<EOS>
<SOS>new_train = []<tab>空列をnew_trainとする<EOS>
<SOS>for j  in range(1, len(train))  :<tab>1からtrainの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>pre_train = train[:j]<tab>trainの位置先頭から位置jまでの部分をpre_trainとする<EOS>
<SOS>bk_train = train[j:]<tab>trainの先頭j個を取り除いた部分をbk_trainとする<EOS>
<SOS>new_train = new_train + rename(pre_train, bk_train)<tab>new_trainにrename(pre_train,bk_train)を加えた値をnew_trainとする<EOS>
<SOS>print(len(list(set(new_train))))<tab>new_trainの集合のリストの長さを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>tmp = []<tab>空列をtmpとする<EOS>
<SOS>if s == '.'  :<tab>sが'.'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>for i  in range(len(s))  :<tab>0からsの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] == '('  :<tab>s(i)が'('のとき、<EOS>
<SOS>if '(' not in tmp  :<tab>not in('(',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if '[' not in tmp  :<tab>not in('[',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>elif tmp[-1] == '['  :<tab>("tmp(-1)が'['の",)<EOS>
<SOS>if len(tmp) != 0 or ans == False  :<tab>tmpの長さが0と等しくなく、またはansが偽のとき、<EOS>
<SOS>print('no')<tab>'no'を出力する<EOS>
<SOS>pas = input()<tab>入力された文字列をpasとする<EOS>
<SOS>if len(pas) < 6  :<tab>pasの長さが6より小さいとき、<EOS>
<SOS>print("INVALID")<tab>"INVALID"を出力する<EOS>
<SOS>tmp = 0<tab>0をtmpとする<EOS>
<SOS>for i  in range(11)  :<tab>0から11未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i <= 4  :<tab>iが4以下のとき、<EOS>
<SOS>tmp = tmp % 11<tab>tmpを11で割った余りをtmpとする<EOS>
<SOS>if tmp <= 1  :<tab>tmpが1以下のとき、<EOS>
<SOS>return 0<tab>0を関数出力とする<EOS>
<SOS>m = list(input())<tab>入力された文字列のリストをmとする<EOS>
<SOS>if m[11] == '?'  :<tab>m(11)が'?'のとき、<EOS>
<SOS>print(CheckDisit(m))<tab>CheckDisit(m)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>color = [[0, 0, 0], [0, 0, 255], [0, 255, 0], [0, 255, 255], [255, 0, 0], [255, 0, 255], [255, 255, 0], [255, 255, 255]]<tab>((0、0、0)からなる列、(0、0、255)からなる列、(0、255、0)からなる列、(0、255、255)からなる列、(255、0、0)からなる列、(255、0、255)からなる列、(255、255、0)からなる列、(255、255、255)からなる列)からなる列をcolorとする<EOS>
<SOS>color_16 = input()<tab>入力された文字列をcolor_16とする<EOS>
<SOS>if color_16 == "0"  :<tab>color_16が"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>color_R = int(color_16[1] + color_16[2], 16)<tab>16進数文字列color_16(1)にcolor_16(2)を加えた値の整数値をcolor_Rとする<EOS>
<SOS>color_G = int(color_16[3] + color_16[4], 16)<tab>16進数文字列color_16(3)にcolor_16(4)を加えた値の整数値をcolor_Gとする<EOS>
<SOS>color_B = int(color_16[5] + color_16[6], 16)<tab>16進数文字列color_16(5)にcolor_16(6)を加えた値の整数値をcolor_Bとする<EOS>
<SOS>min_d = 500<tab>500をmin_dとする<EOS>
<SOS>for i  in range(8)  :<tab>0から8未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>R = color[i][0]<tab>color(i)の最初値をRとする<EOS>
<SOS>G = color[i][1]<tab>color(i)(1)をGとする<EOS>
<SOS>B = color[i][2]<tab>color(i)(2)をBとする<EOS>
<SOS>d = math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)<tab>math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)をdとする<EOS>
<SOS>if min_d > d  :<tab>min_dがdより大きいとき、<EOS>
<SOS>min_d = d<tab>dをmin_dとする<EOS>
<SOS>color_num = i<tab>iをcolor_numとする<EOS>
<SOS>if color_num == 0  :<tab>color_numが0のとき、<EOS>
<SOS>print("black")<tab>"black"を出力する<EOS>
<SOS>print("blue")<tab>"blue"を出力する<EOS>
<SOS>print("lime")<tab>"lime"を出力する<EOS>
<SOS>print("aqua")<tab>"aqua"を出力する<EOS>
<SOS>print("red")<tab>"red"を出力する<EOS>
<SOS>print("fuchsia")<tab>"fuchsia"を出力する<EOS>
<SOS>print("yellow")<tab>"yellow"を出力する<EOS>
<SOS>tanni = ['Man', 'Oku', 'Cho', 'Kei', 'Gai', 'Jo', 'Jou', 'Ko', 'Kan', 'Sei',<tab>('Man'、'Oku'、'Cho'、'Kei'、'Gai'、'Jo'、'Jou'、'Ko'、'Kan'、'Sei'、'Sai'、'Gok'、'Ggs'、'Asg'、'Nyt'、'Fks'、'Mts'、'end')からなる列をtanniとする<EOS>
<SOS>', 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<tab>, 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<EOS><EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = m**n<tab>mのn乗をsとする<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = s // 10**4<tab>sを10の4乗で割った商をsとする<EOS>
<SOS>if s == 0  :<tab>sが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if tanni[i] != 'end'  :<tab>tanni(i)が'end'と等しくないとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>for j  in range(len(ans))  :<tab>0からansの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if ans[j] == 0  :<tab>ans(j)が0のとき、<EOS>
<SOS>switch = True<tab>真をswitchとする<EOS>
<SOS>if switch == True  :<tab>switchが真のとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '*'  :<tab>siki(j)が'*'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) * int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を掛けた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if (int(siki[j-1]) < 0 and int(siki[j+1]) < 0) or (int(siki[j-1]) >= 0 and int(siki[j+1]) >= 0)  :<tab>({{siki[j-1]の整数値が0より小さく}}、かつ{{siki[j+1]の整数値が0より小さいかどうか}})の組、または({{siki[j-1]の整数値が0以上}}、かつ{{siki[j+1]の整数値が0以上かどうか}})の組のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) // int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値をsiki({{jに1を加えた値}})の整数値で割った商の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if '+' not in siki and '-' not in siki :<tab>not in('+',siki)、かつnot in('-',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '+'  :<tab>siki(j)が'+'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) + int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を加えた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) - int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値からsiki({{jに1を加えた値}})の整数値を引いた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>siki = calc_zyouzyo(siki)<tab>calc_zyouzyo(siki)をsikiとする<EOS>
<SOS>siki = calc_kagen(siki)<tab>calc_kagen(siki)をsikiとする<EOS>
<SOS>return (siki)<tab>(siki)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>tmp = list(input())<tab>入力された文字列のリストをtmpとする<EOS>
<SOS>siki = []<tab>空列をsikiとする<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>for j  in range(len(tmp))  :<tab>0からtmpの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if tmp[j] in ['*', '/', '+', '-', '(', ')', '=']  :<tab>tmp(j)が('*'、'/'、'+'、'-'、'('、')'、'=')からなる列に含まれるとき、<EOS>
<SOS>if num != ''  :<tab>numが''と等しくないとき、<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>siki.remove('=')<tab>sikiから'='を取り除いた集まり<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if j == len(siki) or ')' not in siki :<tab>jがsikiの長さ、またはnot in(')',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>if siki[j] == ')'  :<tab>siki(j)が')'のとき、<EOS>
<SOS>for k  in range(j-1,-1, -1)  :<tab>jから1を引いた値から-1未満までの-1間隔の数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if siki[k] == '('  :<tab>siki(k)が'('のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>siki[k]  = calc(stack)<tab>calc(stack)をsiki[k] にする<EOS>
<SOS>del siki[k+1 : j+1]<tab>sikiの位置kに1を加えた値から位置jに1を加えた値までの部分を削除する<EOS>
<SOS>j = k+1<tab>kに1を加えた値をjとする<EOS>
<SOS>siki = calc(siki)<tab>calc(siki)をsikiとする<EOS>
<SOS>print(siki)<tab>sikiを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(s)  :<tab>iがsの長さより小さい間、繰り返す<EOS>
<SOS>if s[i] == "@"  :<tab>s(i)が"@"のとき、<EOS>
<SOS>for j  in range(int(s[i+1]))  :<tab>0からs({{iに1を加えた値}})の整数値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>H, A, B  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にH、A、Bとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(A, B+1)  :<tab>AからBに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if H % i == 0  :<tab>Hをiで割った余りが0のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for a  in range(10)  :<tab>0から10未満までの数列の各要素を順にaとして、繰り返す<EOS>
<SOS>for b  in range(10)  :<tab>0から10未満までの数列の各要素を順にbとして、繰り返す<EOS>
<SOS>for c  in range(10)  :<tab>0から10未満までの数列の各要素を順にcとして、繰り返す<EOS>
<SOS>for d  in range(10)  :<tab>0から10未満までの数列の各要素を順にdとして、繰り返す<EOS>
<SOS>if a + b + c + d == n  :<tab>{{{{aにbを加えた値}}にcを加えた値}}にdを加えた値がnのとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>maxv = v<tab>vをmaxvとする<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>rieki = -(10**9)<tab>-(10の9乗)の組をriekiとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>if rieki < v - minv  :<tab>riekiがvからminvを引いた値より小さいとき、<EOS>
<SOS>rieki = v - minv<tab>vからminvを引いた値をriekiとする<EOS>
<SOS>if minv > v  :<tab>minvがvより大きいとき、<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>print(rieki)<tab>riekiを出力する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>lst = input().split()<tab>入力された文字列を空白で分割した列をlstとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] in ['+', '-', '*', '/']  :<tab>lst(i)が('+'、'-'、'*'、'/')からなる列に含まれるとき、<EOS>
<SOS>if lst[i] == '+'  :<tab>lst(i)が'+'のとき、<EOS>
<SOS>print(stack[0])<tab>stackの最初値を出力する<EOS>
<SOS>n, q  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとqとする<EOS>
<SOS>process = []<tab>空列をprocessとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, time  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にnameとtimeとする<EOS>
<SOS>time = 0<tab>0をtimeとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if len(process) == 0  :<tab>processの長さが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if process[0][1] > q  :<tab>processの最初値(1)がqより大きいとき、<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをSとする<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>T = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをTとする<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for i  in range(q)  :<tab>0からq未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if T[i] in S  :<tab>T(i)がSに含まれるとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>if j-1 >= 0  :<tab>jから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i][j-1] == "."  :<tab>A(i)({{jから1を引いた値}})が"."のとき、<EOS>
<SOS>A[i][j-1]  = "+"<tab>"+"をA[i][j-1] にする<EOS>
<SOS>Check(A, i, j-1, W, H)<tab>Check(A,i,jから1を引いた値,W,H)<EOS>
<SOS>if i+1 < H  :<tab>iに1を加えた値がHより小さいとき、<EOS>
<SOS>if A[i+1][j] == "."  :<tab>A({{iに1を加えた値}})(j)が"."のとき、<EOS>
<SOS>A[i+1][j] = "+"<tab>"+"をA[i+1][j]にする<EOS>
<SOS>Check(A, i+1, j, W, H)<tab>Check(A,iに1を加えた値,j,W,H)<EOS>
<SOS>if j+1 < W  :<tab>jに1を加えた値がWより小さいとき、<EOS>
<SOS>if A[i][j+1] == "."  :<tab>A(i)({{jに1を加えた値}})が"."のとき、<EOS>
<SOS>A[i][j+1]  = "+"<tab>"+"をA[i][j+1] にする<EOS>
<SOS>Check(A, i, j+1, W, H)<tab>Check(A,i,jに1を加えた値,W,H)<EOS>
<SOS>if i-1 >= 0  :<tab>iから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i-1][j] == "."  :<tab>A({{iから1を引いた値}})(j)が"."のとき、<EOS>
<SOS>A[i-1][j]  = "+"<tab>"+"をA[i-1][j] にする<EOS>
<SOS>Check(A, i-1, j, W, H)<tab>Check(A,iから1を引いた値,j,W,H)<EOS>
<SOS>return (A)<tab>(A)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>W, H  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にWとHとする<EOS>
<SOS>if W == 0 and H == 0  :<tab>Wが0、かつHが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>Tile = [list(input()) for i in range(H)]<tab>{{0からH未満までの数列}}の各要素をiとし、入力された文字列のリストの列をTileとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile[i][j] == "@"  :<tab>Tile(i)(j)が"@"のとき、<EOS>
<SOS>my_i = i<tab>iをmy_iとする<EOS>
<SOS>my_j = j<tab>jをmy_jとする<EOS>
<SOS>Tile[my_i][my_j]  = "+"<tab>"+"をTile[my_i][my_j] にする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile_new[i][j] == "+"  :<tab>Tile_new(i)(j)が"+"のとき、<EOS>
<SOS>print(count<tab>countを出力する<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(x**3)<tab>xの3乗を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(n * 32)<tab>nに32を掛けた値を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(int((x-30) / 2))<tab>{{({{xから30を引いた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>print(a+b+c)<tab>{{aにbを加えた値}}にcを加えた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a*b, (a+b)*2)<tab>aにbを掛けた値と({{aにbを加えた値}})の組に2を掛けた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>print("a > b")<tab>"a > b"を出力する<EOS>
<SOS>print("a < b")<tab>"a < b"を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(int((a+b)/2))<tab>{{({{aにbを加えた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if b > a  :<tab>bがaより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if c == 1  :<tab>cが1のとき、<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>time = int(input())<tab>入力された文字列の整数値をtimeとする<EOS>
<SOS>H = time//3600<tab>timeを3600で割った商をHとする<EOS>
<SOS>M = time%3600<tab>timeを3600で割った余りをMとする<EOS>
<SOS>S = M%60<tab>Mを60で割った余りをSとする<EOS>
<SOS>M = M//60<tab>Mを60で割った商をMとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>d = int(a / b)<tab>aをbで割った値の整数値をdとする<EOS>
<SOS>e = a % b<tab>aをbで割った余りをeとする<EOS>
<SOS>f = a / b<tab>aをbで割った値をfとする<EOS>
<SOS>print("{0} {1} {2:.5f}".format(d, e, f))<tab>format(d,e,f)を出力する<EOS>
<SOS>pi = 3.141592653589<tab>3.141592653589をpiとする<EOS>
<SOS>r = float(input())<tab>入力された文字列の浮動小数点数値をrとする<EOS>
<SOS>a = r * r * pi<tab>rにrを掛けた値にpiを掛けた値をaとする<EOS>
<SOS>b = r * 2 * pi<tab>rに2を掛けた値にpiを掛けた値をbとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a * b / 3.305785)<tab>{{aにbを掛けた値}}を3.305785で割った値を出力する<EOS>
<SOS>a, b,c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>if b > c  :<tab>bがcより大きいとき、<EOS>
<SOS>b, c = c, b<tab>bとcを入れ替える<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b, c)<tab>a、b、cを出力する<EOS>
<SOS>e1, e2, e3, e4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にe1、e2、e3、e4とする<EOS>
<SOS>if e1 == e2 and e3 == e4 or e1 == e3 and e2 == e4 or e1 == e4 and e2 == e3  :<tab>{{e1がe2}}、かつ{{e3がe4かどうか}}、または{{e1がe3}}、かつ{{e2がe4かどうか}}、または{{e1がe4}}、かつ{{e2がe3かどうか}}のとき、<EOS>
<SOS>print("yes")<tab>"yes"を出力する<EOS>
<SOS>N, A, B, C, D  = map(int, input().split())[#Document [# '# setX']]<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にN、A、B、C、Dとする<EOS>
<SOS>if N % A == 0  :<tab>NをAで割った余りが0のとき、<EOS>
<SOS>X = N // A * B<tab>NをAで割った商にBを掛けた値をXとする<EOS>
<SOS>if N % C == 0  :<tab>NをCで割った余りが0のとき、<EOS>
<SOS>Y = N // C * D<tab>NをCで割った商にDを掛けた値をYとする<EOS>
<SOS>print(min(X, Y))<tab>XとYの最小値を出力する<EOS>
<SOS>A, B, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にA、B、Cとする<EOS>
<SOS>coin = 0<tab>0をcoinとする<EOS>
<SOS>day = 1<tab>1をdayとする<EOS>
<SOS>while coin < C  :<tab>coinがCより小さい間、繰り返す<EOS>
<SOS>if day % 7 == 0  :<tab>dayを7で割った余りが0のとき、<EOS>
<SOS>print(day-1)<tab>dayから1を引いた値を出力する<EOS>
<SOS>n = 1000<tab>1000をnとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < n  :<tab>iがnより小さい間、繰り返す<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>if t == 1  :<tab>tが1のとき、<EOS>
<SOS>return 6000<tab>6000を関数出力とする<EOS>
<SOS>return 4000<tab>4000を関数出力とする<EOS>
<SOS>return 3000<tab>3000を関数出力とする<EOS>
<SOS>return 2000<tab>2000を関数出力とする<EOS>
<SOS>t1, n1  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt1とn1とする<EOS>
<SOS>t2, n2  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt2とn2とする<EOS>
<SOS>t3, n3  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt3とn3とする<EOS>
<SOS>t4, n4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt4とn4とする<EOS>
<SOS>print(change(t1) * n1)<tab>change(t1)にn1を掛けた値を出力する<EOS>
<SOS>print(change(t2) * n2)<tab>change(t2)にn2を掛けた値を出力する<EOS>
<SOS>print(change(t3) * n3)<tab>change(t3)にn3を掛けた値を出力する<EOS>
<SOS>print(change(t4) * n4)<tab>change(t4)にn4を掛けた値を出力する<EOS>
<SOS>for i  in range(7)  :<tab>0から7未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>hi, low  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にhiとlowとする<EOS>
<SOS>print(hi - low)<tab>hiからlowを引いた値を出力する<EOS>
<SOS>for i  in range(9)  :<tab>0から9未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, a, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にname、a、bとする<EOS>
<SOS>print(name, int(a)+int(b), 200*int(a)+300*int(b))<tab>name、aの整数値にbの整数値を加えた値、{{200にaの整数値を掛けた値}}に{{300にbの整数値を掛けた値}}を加えた値を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(sum)<tab>sumを出力する<EOS>
<SOS>i = 1<tab>1をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>if x == 0  :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == 0 and b == 0  :<tab>aが0、かつbが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b)<tab>aとbを出力する<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>for i  in range(N)  :<tab>0からN未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a**2 == b**2 + c**2 or b**2 == c**2 + a**2 or c**2 == a**2 + b**2  :<tab>{{aの2乗が{{bの2乗にcの2乗を加えた値}}}}、または{{bの2乗が{{cの2乗にaの2乗を加えた値}}かどうか}}、またはcの2乗が{{aの2乗にbの2乗を加えた値}}のとき、<EOS>
<SOS>print("YES")<tab>"YES"を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = 100000<tab>100000をSとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if S % 1000 != 0  :<tab>Sを1000で割った余りが0と等しくないとき、<EOS>
<SOS>S = (int(S / 1000) + 1) * 1000<tab>({{{{Sを1000で割った値}}の整数値に1を加えた値}})の組に1000を掛けた値をSとする<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>for i  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H, W  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == 0 and W == 0  :<tab>Hが0、かつWが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>for h  in range(H)  :<tab>0からH未満までの数列の各要素を順にhとして、繰り返す<EOS>
<SOS>for w  in range(W)  :<tab>0からW未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>if (h + w) % 2 == 0  :<tab>({{hにwを加えた値}})の組を2で割った余りが0のとき、<EOS>
<SOS>print("#", end="")<tab>"#"と((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, op, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にa、op、bとする<EOS>
<SOS>a = int(a)<tab>aの整数値をaとする<EOS>
<SOS>b = int(b)<tab>bの整数値をbとする<EOS>
<SOS>if op == "?"  :<tab>opが"?"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(a + b)<tab>aにbを加えた値を出力する<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>print(int(a / b))<tab>{{aをbで割った値}}の整数値を出力する<EOS>
<SOS>print(a * b)<tab>aにbを掛けた値を出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>l = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlとする<EOS>
<SOS>print(min(l), max(l), sum(l))<tab>lの最小値、lの最大値、lの総和を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>data = list(int(input()) for i in range(N))<tab>{{0からN未満までの数列}}の各要素をiとし、入力された文字列の整数値の列のリストをdataとする<EOS>
<SOS>del data[0]<tab>dataの最初値を削除する<EOS>
<SOS>del data[-1]<tab>dataの末尾値を削除する<EOS>
<SOS>data_ave = sum(data)/len(data)<tab>dataの総和をdataの長さで割った値をdata_aveとする<EOS>
<SOS>print(int(data_ave))<tab>data_aveの整数値を出力する<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>print(Fib(N))<tab>Fib(N)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return<tab>関数処理を中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(0, 0.00000000)<tab>0と0.00000000を出力する<EOS>
<SOS>print(100.00000000, 0.00000000)<tab>100.00000000と0.00000000を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(5)  :<tab>0から5未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>score = int(input())<tab>入力された文字列の整数値をscoreとする<EOS>
<SOS>if score < 40  :<tab>scoreが40より小さいとき、<EOS>
<SOS>score = 40<tab>40をscoreとする<EOS>
<SOS>print(sum//5)<tab>sumを5で割った商を出力する<EOS>
<SOS>list_a = []<tab>空列をlist_aとする<EOS>
<SOS>list_b = []<tab>空列をlist_bとする<EOS>
<SOS>for x  in range(4)  :<tab>0から4未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>for x  in range(2)  :<tab>0から2未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>print(sum(list_a[0:3]) + list_b[0])<tab>{{list_aの位置0から位置3までの部分}}の総和にlist_bの最初値を加えた値を出力する<EOS>
<SOS>list_W = []<tab>空列をlist_Wとする<EOS>
<SOS>list_K = []<tab>空列をlist_Kとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>sum_W = sum(list_W[0:3])<tab>list_Wの位置0から位置3までの部分の総和をsum_Wとする<EOS>
<SOS>sum_K = sum(list_K[0:3])<tab>list_Kの位置0から位置3までの部分の総和をsum_Kとする<EOS>
<SOS>print(sum_W, sum_K)<tab>sum_Wとsum_Kを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>A = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをAとする<EOS>
<SOS>m = min(A)<tab>Aの最小値をmとする<EOS>
<SOS>M = max(A)<tab>Aの最大値をMとする<EOS>
<SOS>print(math.ceil((m + M) / 2) - m)<tab>math.ceil((m + M) / 2) からmを引いた値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>List = []<tab>空列をListとする<EOS>
<SOS>max_ans = 0<tab>0をmax_ansとする<EOS>
<SOS>sum_ans = 0<tab>0をsum_ansとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i < m  :<tab>iがmより小さいとき、<EOS>
<SOS>if i >= m - 1 and max_ans < sum_ans  :<tab>iが{{mから1を引いた値}}以上、かつmax_ansがsum_ansより小さいとき、<EOS>
<SOS>max_ans = sum_ans<tab>sum_ansをmax_ansとする<EOS>
<SOS>print(max_ans)<tab>max_ansを出力する<EOS>
<SOS>LIST = []<tab>空列をLISTとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(LIST[0])<tab>LISTの最初値を出力する<EOS>
<SOS>print(LIST[1])<tab>LIST(1)を出力する<EOS>
<SOS>print(LIST[2])<tab>LIST(2)を出力する<EOS>
<SOS>str_org = str(input())<tab>入力された文字列の文字列をstr_orgとする<EOS>
<SOS>print(str_org.upper())<tab>str_orgを英大文字に変換した文字列を出力する<EOS>
<SOS>str = input()<tab>入力された文字列をstrとする<EOS>
<SOS>print(str.swapcase())<tab>strの英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>count_char = list(0 for i in range(26))<tab>{{0から26未満までの数列}}の各要素をiとし、0の列のリストをcount_charとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>for i  in range(97, 123)  :<tab>97から123未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(chr(i), ":", count_char[i-97])<tab>文字コードiの文字、":"、count_char({{iから97を引いた値}})を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>num = input()<tab>入力された文字列をnumとする<EOS>
<SOS>if num == '0'  :<tab>numが'0'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>num_lst = [int(i) for i in num]<tab>numの各要素をiとし、iの整数値の列をnum_lstとする<EOS>
<SOS>print(sum(num_lst))<tab>num_lstの総和を出力する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>count_K = a.count("K")<tab>a内の"K"の出現をカウントした整数をcount_Kとする<EOS>
<SOS>count_P = a.count("P")<tab>a内の"P"の出現をカウントした整数をcount_Pとする<EOS>
<SOS>count_U = a.count("U")<tab>a内の"U"の出現をカウントした整数をcount_Uとする<EOS>
<SOS>count_C = a.count("C")<tab>a内の"C"の出現をカウントした整数をcount_Cとする<EOS>
<SOS>print(min(count_K, count_P, count_U, count_C))<tab>count_K、count_P、count_U、count_Cの最小値を出力する<EOS>
<SOS>W = input()<tab>入力された文字列をWとする<EOS>
<SOS>n = 0<tab>0をnとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>T = input()<tab>入力された文字列をTとする<EOS>
<SOS>if T== "END_OF_TEXT"  :<tab>Tが"END_OF_TEXT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>small_T = list(T.split())<tab>Tを空白で分割した列のリストをsmall_Tとする<EOS>
<SOS>for i  in range(len(small_T))  :<tab>0からsmall_Tの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if str.lower(small_T[i]) == str.lower(W)  :<tab>strとsmall_T(i)を英小文字に変換した文字列がstrとWを英小文字に変換した文字列のとき、<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>s = list(input())<tab>入力された文字列のリストをsとする<EOS>
<SOS>p = list(input())<tab>入力された文字列のリストをpとする<EOS>
<SOS>for x  in range(len(p))  :<tab>0からpの長さ未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if p[j] == s[i]  :<tab>p(j)がs(i)のとき、<EOS>
<SOS>if j == len(p)  :<tab>jがpの長さのとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == len(s)  :<tab>iがsの長さのとき、<EOS>
<SOS>print("No")<tab>"No"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>b = list(input())<tab>入力された文字列のリストをbとする<EOS>
<SOS>for j  in range(len(a)+1-len(b))  :<tab>0から{{aの長さに1を加えた値}}からbの長さを引いた値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>Same = True<tab>真をSameとする<EOS>
<SOS>ans = j<tab>jをansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(b)  :<tab>iがbの長さより小さい間、繰り返す<EOS>
<SOS>if b[i] == a[j]  :<tab>b(i)がa(j)のとき、<EOS>
<SOS>if Same == True  :<tab>Sameが真のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>Taro_ten = 0<tab>0をTaro_tenとする<EOS>
<SOS>Hanako_ten = 0<tab>0をHanako_tenとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b  = list(input().split())<tab>入力された文字列を空白で分割した列のリストを展開し順にaとbとする<EOS>
<SOS>Taro = list(a)<tab>aのリストをTaroとする<EOS>
<SOS>Hanako = list(b)<tab>bのリストをHanakoとする<EOS>
<SOS>length = min(len(Taro), len(Hanako))<tab>Taroの長さとHanakoの長さの最小値をlengthとする<EOS>
<SOS>for i  in range(length)  :<tab>0からlength未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if ord(Taro[i]) > ord(Hanako[i])  :<tab>Taro(i)の順序数がHanako(i)の順序数より大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == length -1  :<tab>iがlengthから1を引いた値のとき、<EOS>
<SOS>if len(Taro) > length  :<tab>Taroの長さがlengthより大きいとき、<EOS>
<SOS>print(Taro_ten, Hanako_ten)<tab>Taro_tenとHanako_tenを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>score = input()<tab>入力された文字列をscoreとする<EOS>
<SOS>if score == "0"  :<tab>scoreが"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>score_a = score.count("A")<tab>score内の"A"の出現をカウントした整数をscore_aとする<EOS>
<SOS>score_b = score.count("B")<tab>score内の"B"の出現をカウントした整数をscore_bとする<EOS>
<SOS>if score[0] == "A"  :<tab>score(0)が"A"のとき、<EOS>
<SOS>if score_a > score_b  :<tab>score_aがscore_bより大きいとき、<EOS>
<SOS>print(score_a, score_b)<tab>score_aとscore_bを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>x1, y1, x2, y2  = map(float, input().split())<tab>map(float,入力された文字列を空白で分割した列)を展開し順にx1、y1、x2、y2とする<EOS>
<SOS>dist = math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)<tab>math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)をdistとする<EOS>
<SOS>print("{:.5f}".format(dist))<tab>format(dist)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>a, b, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、Cとする<EOS>
<SOS>S = a * b * math.sin(math.pi * C / 180) / 2<tab>{{aにbを掛けた値}}にmath.sin(math.pi * C / 180) を掛けた値を2で割った値をSとする<EOS>
<SOS>c = math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))<tab>math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))をcとする<EOS>
<SOS>L = a + b + c<tab>aにbを加えた値にcを加えた値をLとする<EOS>
<SOS>h = 2 * S / a<tab>2にSを掛けた値をaで割った値をhとする<EOS>
<SOS>print('{:.4f}'.format(S))<tab>format(S)を出力する<EOS>
<SOS>print('{:.4f}'.format(L))<tab>format(L)を出力する<EOS>
<SOS>print('{:.4f}'.format(h))<tab>format(h)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをsとする<EOS>
<SOS>m = sum(s) / len(s)<tab>sの総和をsの長さで割った値をmとする<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = math.sqrt(a)<tab>math.sqrt(a)をaとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, f, r  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にm、f、rとする<EOS>
<SOS>if m == -1 and f == -1 and r == -1  :<tab>{{mが-1}}、かつ{{fが-1かどうか}}、かつrが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if m == -1 or f == -1  :<tab>mが-1、またはfが-1のとき、<EOS>
<SOS>print("F")<tab>"F"を出力する<EOS>
<SOS>print("A")<tab>"A"を出力する<EOS>
<SOS>print("B")<tab>"B"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("D")<tab>"D"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n-1)  :<tab>1からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(i+1, n)  :<tab>iに1を加えた値からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for k  in range(j+1, n+1)  :<tab>jに1を加えた値からnに1を加えた値未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if i + j + k == m  :<tab>{{iにjを加えた値}}にkを加えた値がmのとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>card = [[False for i in range(13)] for j in range(4)]<tab>{{0から4未満までの数列}}の各要素をjとし、{{{{0から13未満までの数列}}の各要素をiとし、偽の列}}の列をcardとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>mark, suit  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にmarkとsuitとする<EOS>
<SOS>if mark == "S"  :<tab>markが"S"のとき、<EOS>
<SOS>mark_num = 0<tab>0をmark_numとする<EOS>
<SOS>mark_num = 1<tab>1をmark_numとする<EOS>
<SOS>mark_num = 2<tab>2をmark_numとする<EOS>
<SOS>mark_num = 3<tab>3をmark_numとする<EOS>
<SOS>card[mark_num][int(suit)-1]  = True<tab>真をcard[mark_num][int(suit)-1] にする<EOS>
<SOS>for j  in range(4)  :<tab>0から4未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for i  in range(13)  :<tab>0から13未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if card[j][i] == False  :<tab>card(j)(i)が偽のとき、<EOS>
<SOS>if j == 0  :<tab>jが0のとき、<EOS>
<SOS>print("S", i+1)<tab>"S"とiに1を加えた値を出力する<EOS>
<SOS>print("H", i+1)<tab>"H"とiに1を加えた値を出力する<EOS>
<SOS>print("C", i+1)<tab>"C"とiに1を加えた値を出力する<EOS>
<SOS>print("D", i+1)<tab>"D"とiに1を加えた値を出力する<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>A = [int(input()) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、入力された文字列の整数値の列をAとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(m)  :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n, m, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、lとする<EOS>
<SOS>A = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をAとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(l)  :<tab>0からl未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for k  in range(m)  :<tab>0からm未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if j == l-1  :<tab>jがlから1を引いた値のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>L = []<tab>空列をLとする<EOS>
<SOS>temp = n<tab>nをtempとする<EOS>
<SOS>print(n,end="")<tab>nと((end, ""))からなる辞書を出力する<EOS>
<SOS>print(":",end="")<tab>":"と((end, ""))からなる辞書を出力する<EOS>
<SOS>for i  in range(2, int(n**(1/2)//1)+1) :<tab>2から{{nの(1/2)乗を1で割った商}}の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if temp%i==0 :<tab>tempをiで割った余りが0のとき、<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>while temp%i==0 :<tab>tempをiで割った余りが0の間、繰り返す<EOS>
<SOS>for j  in range(c) :<tab>0からc未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print("",i,end="")<tab>""、i、((end, ""))からなる辞書を出力する<EOS>
<SOS>if temp!=1 :<tab>tempが1と等しくないとき、<EOS>
<SOS>print("",temp, end="")<tab>""、temp、((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>factorization(n)<tab>factorization(n)<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>return (x % mod)<tab>(xをmodで割った余り)の組を関数出力とする<EOS>
<SOS>if b == 1  :<tab>bが1のとき、<EOS>
<SOS>return a<tab>aを関数出力とする<EOS>
<SOS>a_2 = S(a**2)<tab>S(aの2乗)をa_2とする<EOS>
<SOS>b_2 = b // 2<tab>bを2で割った商をb_2とする<EOS>
<SOS>return S(A(a_2, b_2, mod))<tab>S(A(a_2,b_2,mod))を関数出力とする<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>print(A(m, n, mod))<tab>A(m,n,mod)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if y == 0  :<tab>yが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if x < y  :<tab>xがyより小さいとき、<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>x = x % y<tab>xをyで割った余りをxとする<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>print(x, ans)<tab>xとansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if a < b  :<tab>aがbより小さいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>amari = a % b<tab>aをbで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>return (b)<tab>(b)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>c = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcとする<EOS>
<SOS>for i  in range(n-1, 0, -1)  :<tab>nから1を引いた値から0未満までの-1間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c[i-1]  = int(c[i] * c[i-1] / gcd(c[i], c[i-1]))<tab>{{c(i)にc({{iから1を引いた値}})を掛けた値}}をgcd(c(i),c({{iから1を引いた値}}))で割った値の整数値をc[i-1] にする<EOS>
<SOS>print(c[0])<tab>cの最初値を出力する<EOS>
<SOS>N, M  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にNとMとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if N < M  :<tab>NがMより小さいとき、<EOS>
<SOS>N, M = M, N<tab>NとMを入れ替える<EOS>
<SOS>amari = N % M<tab>NをMで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(M)<tab>Mを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return 'F'<tab>'F'を関数出力とする<EOS>
<SOS>return 'T'<tab>'T'を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(n)  :<tab>0からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>a = int(input())<tab>入力された文字列の整数値をaとする<EOS>
<SOS>if Sosu(a) == 'T'  :<tab>Sosu(a)が'T'のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(3, int(math.sqrt(n))+1, 2)  :<tab>3からmath.sqrt(n)の整数値に1を加えた値未満までの2間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if n % i == 0  :<tab>nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>S = [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4]<tab>(0、0、1、2、2、3、3、4、4、4、4)からなる列をSとする<EOS>
<SOS>for i  in range(11, 1000000)  :<tab>11から1000000未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i % 2 == 0  :<tab>iを2で割った余りが0のとき、<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>print(S[n])<tab>S(n)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(2, a)  :<tab>2からa未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>other = a - i<tab>aからiを引いた値をotherとする<EOS>
<SOS>if other >= i and Sosu(other)  :<tab>otherがi以上、かつSosu(other)のとき、<EOS>
<SOS>return count<tab>countを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(main(n))<tab>main(n)を出力する<EOS>
<SOS>if n % 2 == 0  :<tab>nを2で割った余りが0のとき、<EOS>
<SOS>return n // 2<tab>nを2で割った商を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>while n != 1  :<tab>nが1と等しくない間、繰り返す<EOS>
<SOS>n = Collatz(n)<tab>Collatz(n)をnとする<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>S = 0<tab>0をSとする<EOS>
<SOS>for i  in range(600//d)  :<tab>0から600をdで割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>if q == -1  :<tab>qが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = 1<tab>1をnとする<EOS>
<SOS>x = q / 2<tab>qを2で割った値をxとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if abs(x**3 - q) < (0.00001 * q)  :<tab>{{xの3乗からqを引いた値}}の絶対値が({{0.00001にqを掛けた値}})の組より小さいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = x - (x**3 - q) / (3 * x**2)<tab>xから({{xの3乗からqを引いた値}})の組を({{3にxの2乗を掛けた値}})の組で割った値を引いた値をxとする<EOS>
<SOS>print('{:.6f}'.format(x))<tab>format(x)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a = input()<tab>入力された文字列をaとする<EOS>
<SOS>if a == "END OF INPUT"  :<tab>aが"END OF INPUT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>b = list(a)<tab>aのリストをbとする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(len(b))  :<tab>0からbの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if b[i] != ' '  :<tab>b(i)が' 'と等しくないとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>count_j = 0<tab>0をcount_jとする<EOS>
<SOS>count_i = 0<tab>0をcount_iとする<EOS>
<SOS>for i  in range(len(l)-2)  :<tab>'0からlの長さから2を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if l[i] == "J" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"J"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>if l[i] == "I" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"I"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>return count_j, count_i<tab>(count_jとcount_i)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>j, i  = JOIOI(l)<tab>JOIOI(l)を展開し順にjとiとする<EOS>
<SOS>print(j)<tab>jを出力する<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>pal = "True"<tab>"True"をpalとする<EOS>
<SOS>for i  in range(len(s)//2)  :<tab>0からsの長さを2で割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] != s[-i-1]  :<tab>s(i)がs({{-iから1を引いた値}})と等しくないとき、<EOS>
<SOS>pal = "False"<tab>"False"をpalとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if pal == "True"  :<tab>palが"True"のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>sentence = list(input().split())<tab>入力された文字列を空白で分割した列のリストをsentenceとする<EOS>
<SOS>max_length = 0<tab>0をmax_lengthとする<EOS>
<SOS>max_sentence = ""<tab>""をmax_sentenceとする<EOS>
<SOS>count = []<tab>空列をcountとする<EOS>
<SOS>for i  in range(len(sentence))  :<tab>0からsentenceの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if max_length < len(sentence[i])  :<tab>max_lengthがsentence(i)の長さより小さいとき、<EOS>
<SOS>max_length = len(sentence[i])<tab>sentence(i)の長さをmax_lengthとする<EOS>
<SOS>max_sentence = sentence[i]<tab>sentence(i)をmax_sentenceとする<EOS>
<SOS>new_word = False<tab>偽をnew_wordとする<EOS>
<SOS>for j  in range(len(count))  :<tab>0からcountの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if count[j][0] == sentence[i]  :<tab>count(j)(0)がsentence(i)のとき、<EOS>
<SOS>new_word = True<tab>真をnew_wordとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if new_word == False  :<tab>new_wordが偽のとき、<EOS>
<SOS>count = sorted(count, key = itemgetter(1), reverse = True)<tab>countと((key, itemgetter(1))と(reverse, 真))からなる辞書をソートした列をcountとする<EOS>
<SOS>print(count[0][0], max_sentence)<tab>countの最初値の最初値とmax_sentenceを出力する<EOS>
<SOS>A = list(input().split())<tab>入力された文字列を空白で分割した列のリストをAとする<EOS>
<SOS>for i  in range(len(A))  :<tab>0からAの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if "apple" in A[i]  :<tab>"apple"がA(i)に含まれるとき、<EOS>
<SOS>A[i]  = A[i].replace("apple", "peach")<tab>A(i)内の"apple"を"peach"で置き換えた文字列をA[i] にする<EOS>
<SOS>A[i]  = A[i].replace("peach", "apple")<tab>A(i)内の"peach"を"apple"で置き換えた文字列をA[i] にする<EOS>
<SOS>print(" ".join(A))<tab>Aを文字列" "で連結した文字列を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>hit = 0<tab>0をhitとする<EOS>
<SOS>brow = 0<tab>0をbrowとする<EOS>
<SOS>if a1 == b1  :<tab>a1がb1のとき、<EOS>
<SOS>if a2 == b2  :<tab>a2がb2のとき、<EOS>
<SOS>if a3 == b3  :<tab>a3がb3のとき、<EOS>
<SOS>if a4 == b4  :<tab>a4がb4のとき、<EOS>
<SOS>if a1 == b2 or a1 == b3 or a1 == b4  :<tab>{{a1がb2}}、または{{a1がb3かどうか}}、またはa1がb4のとき、<EOS>
<SOS>if a2 == b1 or a2 == b3 or a2 == b4  :<tab>{{a2がb1}}、または{{a2がb3かどうか}}、またはa2がb4のとき、<EOS>
<SOS>if a3 == b1 or a3 == b2 or a3 == b4  :<tab>{{a3がb1}}、または{{a3がb2かどうか}}、またはa3がb4のとき、<EOS>
<SOS>if a4 == b1 or a4 == b2 or a4 == b3  :<tab>{{a4がb1}}、または{{a4がb2かどうか}}、またはa4がb3のとき、<EOS>
<SOS>print(hit, brow)<tab>hitとbrowを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for j  in range(i, n)  :<tab>iからn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if s == n  :<tab>sがnのとき、<EOS>
<SOS>if s > n  :<tab>sがnより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>for i  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>i_tax = int(i + i*x/100)<tab>iに{{{{iにxを掛けた値}}を100で割った値}}を加えた値の整数値をi_taxとする<EOS>
<SOS>for j  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>j_tax = int(j + j*x/100)<tab>jに{{{{jにxを掛けた値}}を100で割った値}}を加えた値の整数値をj_taxとする<EOS>
<SOS>if i_tax + j_tax > s  :<tab>i_taxにj_taxを加えた値がsより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i_tax + j_tax == s  :<tab>i_taxにj_taxを加えた値がsのとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>ans = int(i + i*y/100) + int(j + j*y/100)<tab>{{iに{{{{iにyを掛けた値}}を100で割った値}}を加えた値}}の整数値に{{jに{{{{jにyを掛けた値}}を100で割った値}}を加えた値}}の整数値を加えた値をansとする<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y, s  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にx、y、sとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = calc_before(x, s)<tab>calc_before(x,s)をlstとする<EOS>
<SOS>max_price = 0<tab>0をmax_priceとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>price = calc_after(lst[i][0], lst[i][1], y)<tab>calc_after(lst(i)の最初値,lst(i)(1),y)をpriceとする<EOS>
<SOS>max_price = max(price, max_price)<tab>priceとmax_priceの最大値をmax_priceとする<EOS>
<SOS>print(max_price)<tab>max_priceを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>catalog = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcatalogとする<EOS>
<SOS>max_p = 0<tab>0をmax_pとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if i != j  :<tab>iがjと等しくないとき、<EOS>
<SOS>x = catalog[i] + catalog[j]<tab>catalog(i)にcatalog(j)を加えた値をxとする<EOS>
<SOS>if x <= m and x > max_p  :<tab>xがm以下、かつxがmax_pより大きいとき、<EOS>
<SOS>max_p = x<tab>xをmax_pとする<EOS>
<SOS>if max_p == 0  :<tab>max_pが0のとき、<EOS>
<SOS>print("NONE")<tab>"NONE"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlstとする<EOS>
<SOS>ave_lst = sum(lst) / len(lst)<tab>lstの総和をlstの長さで割った値をave_lstとする<EOS>
<SOS>Sum = 0<tab>0をSumとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] <= ave_lst  :<tab>lst(i)がave_lst以下のとき、<EOS>
<SOS>print(Sum)<tab>Sumを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if N == 1  :<tab>Nが1のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(a+1, b+1)  :<tab>aに1を加えた値からbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(amount_sosu(n, n*2))<tab>amount_sosu(n,{{nに2を掛けた値}})を出力する<EOS>
<SOS>n, t, e  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、t、eとする<EOS>
<SOS>watch = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをwatchとする<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>for w  in range(n)  :<tab>0からn未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>for i  in range(e+1)  :<tab>0からeに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if (t+i) % watch[w] == 0  :<tab>({{tにiを加えた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if (t-i) % watch[w] == 0  :<tab>({{tからiを引いた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>print(w+1)<tab>wに1を加えた値を出力する<EOS>
<SOS>d, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にdとlとする<EOS>
<SOS>s = int(d / l + d % l)<tab>{{dをlで割った値}}に{{dをlで割った余り}}を加えた値の整数値をsとする<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>if d == 0  :<tab>dが0のとき、<EOS>
<SOS>new_i = square[n][0] - 1<tab>square(n)(0)から1を引いた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] - 1<tab>square(n)(1)から1を引いた値をnew_jとする<EOS>
<SOS>new_i = square[n][0] + 1<tab>square(n)(0)に1を加えた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] + 1<tab>square(n)(1)に1を加えた値をnew_jとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>square = [[0, 0]]<tab>((0と0)からなる列)からなる列をsquareとする<EOS>
<SOS>for i  in range(N-1)  :<tab>0からNから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n, d  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとdとする<EOS>
<SOS>sort_x_square = sorted(square)<tab>squareをソートした列をsort_x_squareとする<EOS>
<SOS>print(sort_x_square[-1][0] - sort_x_square[0][0]+1, sort_y_square[-1][1] - sort_y_square[0][1]+1)<tab>{{sort_x_squareの末尾値(0)からsort_x_squareの最初値の最初値を引いた値}}に1を加えた値と{{sort_y_squareの末尾値(1)からsort_y_squareの最初値(1)を引いた値}}に1を加えた値を出力する<EOS>
<SOS>new = []<tab>空列をnewとする<EOS>
<SOS>re_a = list(reversed(a))<tab>aを反転した列のリストをre_aとする<EOS>
<SOS>re_b = list(reversed(b))<tab>bを反転した列のリストをre_bとする<EOS>
<SOS>return list(set(new))<tab>newの集合のリストを関数出力とする<EOS>
<SOS>m = int(input())<tab>入力された文字列の整数値をmとする<EOS>
<SOS>for i  in range(m)  :<tab>0からm未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>train = list(input())<tab>入力された文字列のリストをtrainとする<EOS>
<SOS>new_train = []<tab>空列をnew_trainとする<EOS>
<SOS>for j  in range(1, len(train))  :<tab>1からtrainの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>pre_train = train[:j]<tab>trainの位置先頭から位置jまでの部分をpre_trainとする<EOS>
<SOS>bk_train = train[j:]<tab>trainの先頭j個を取り除いた部分をbk_trainとする<EOS>
<SOS>new_train = new_train + rename(pre_train, bk_train)<tab>new_trainにrename(pre_train,bk_train)を加えた値をnew_trainとする<EOS>
<SOS>print(len(list(set(new_train))))<tab>new_trainの集合のリストの長さを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>tmp = []<tab>空列をtmpとする<EOS>
<SOS>if s == '.'  :<tab>sが'.'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>for i  in range(len(s))  :<tab>0からsの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] == '('  :<tab>s(i)が'('のとき、<EOS>
<SOS>if '(' not in tmp  :<tab>not in('(',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if '[' not in tmp  :<tab>not in('[',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>elif tmp[-1] == '['  :<tab>("tmp(-1)が'['の",)<EOS>
<SOS>if len(tmp) != 0 or ans == False  :<tab>tmpの長さが0と等しくなく、またはansが偽のとき、<EOS>
<SOS>print('no')<tab>'no'を出力する<EOS>
<SOS>pas = input()<tab>入力された文字列をpasとする<EOS>
<SOS>if len(pas) < 6  :<tab>pasの長さが6より小さいとき、<EOS>
<SOS>print("INVALID")<tab>"INVALID"を出力する<EOS>
<SOS>tmp = 0<tab>0をtmpとする<EOS>
<SOS>for i  in range(11)  :<tab>0から11未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i <= 4  :<tab>iが4以下のとき、<EOS>
<SOS>tmp = tmp % 11<tab>tmpを11で割った余りをtmpとする<EOS>
<SOS>if tmp <= 1  :<tab>tmpが1以下のとき、<EOS>
<SOS>return 0<tab>0を関数出力とする<EOS>
<SOS>m = list(input())<tab>入力された文字列のリストをmとする<EOS>
<SOS>if m[11] == '?'  :<tab>m(11)が'?'のとき、<EOS>
<SOS>print(CheckDisit(m))<tab>CheckDisit(m)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>color = [[0, 0, 0], [0, 0, 255], [0, 255, 0], [0, 255, 255], [255, 0, 0], [255, 0, 255], [255, 255, 0], [255, 255, 255]]<tab>((0、0、0)からなる列、(0、0、255)からなる列、(0、255、0)からなる列、(0、255、255)からなる列、(255、0、0)からなる列、(255、0、255)からなる列、(255、255、0)からなる列、(255、255、255)からなる列)からなる列をcolorとする<EOS>
<SOS>color_16 = input()<tab>入力された文字列をcolor_16とする<EOS>
<SOS>if color_16 == "0"  :<tab>color_16が"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>color_R = int(color_16[1] + color_16[2], 16)<tab>16進数文字列color_16(1)にcolor_16(2)を加えた値の整数値をcolor_Rとする<EOS>
<SOS>color_G = int(color_16[3] + color_16[4], 16)<tab>16進数文字列color_16(3)にcolor_16(4)を加えた値の整数値をcolor_Gとする<EOS>
<SOS>color_B = int(color_16[5] + color_16[6], 16)<tab>16進数文字列color_16(5)にcolor_16(6)を加えた値の整数値をcolor_Bとする<EOS>
<SOS>min_d = 500<tab>500をmin_dとする<EOS>
<SOS>for i  in range(8)  :<tab>0から8未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>R = color[i][0]<tab>color(i)の最初値をRとする<EOS>
<SOS>G = color[i][1]<tab>color(i)(1)をGとする<EOS>
<SOS>B = color[i][2]<tab>color(i)(2)をBとする<EOS>
<SOS>d = math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)<tab>math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)をdとする<EOS>
<SOS>if min_d > d  :<tab>min_dがdより大きいとき、<EOS>
<SOS>min_d = d<tab>dをmin_dとする<EOS>
<SOS>color_num = i<tab>iをcolor_numとする<EOS>
<SOS>if color_num == 0  :<tab>color_numが0のとき、<EOS>
<SOS>print("black")<tab>"black"を出力する<EOS>
<SOS>print("blue")<tab>"blue"を出力する<EOS>
<SOS>print("lime")<tab>"lime"を出力する<EOS>
<SOS>print("aqua")<tab>"aqua"を出力する<EOS>
<SOS>print("red")<tab>"red"を出力する<EOS>
<SOS>print("fuchsia")<tab>"fuchsia"を出力する<EOS>
<SOS>print("yellow")<tab>"yellow"を出力する<EOS>
<SOS>tanni = ['Man', 'Oku', 'Cho', 'Kei', 'Gai', 'Jo', 'Jou', 'Ko', 'Kan', 'Sei',<tab>('Man'、'Oku'、'Cho'、'Kei'、'Gai'、'Jo'、'Jou'、'Ko'、'Kan'、'Sei'、'Sai'、'Gok'、'Ggs'、'Asg'、'Nyt'、'Fks'、'Mts'、'end')からなる列をtanniとする<EOS>
<SOS>', 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<tab>, 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<EOS><EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = m**n<tab>mのn乗をsとする<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = s // 10**4<tab>sを10の4乗で割った商をsとする<EOS>
<SOS>if s == 0  :<tab>sが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if tanni[i] != 'end'  :<tab>tanni(i)が'end'と等しくないとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>for j  in range(len(ans))  :<tab>0からansの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if ans[j] == 0  :<tab>ans(j)が0のとき、<EOS>
<SOS>switch = True<tab>真をswitchとする<EOS>
<SOS>if switch == True  :<tab>switchが真のとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '*'  :<tab>siki(j)が'*'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) * int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を掛けた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if (int(siki[j-1]) < 0 and int(siki[j+1]) < 0) or (int(siki[j-1]) >= 0 and int(siki[j+1]) >= 0)  :<tab>({{siki[j-1]の整数値が0より小さく}}、かつ{{siki[j+1]の整数値が0より小さいかどうか}})の組、または({{siki[j-1]の整数値が0以上}}、かつ{{siki[j+1]の整数値が0以上かどうか}})の組のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) // int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値をsiki({{jに1を加えた値}})の整数値で割った商の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if '+' not in siki and '-' not in siki :<tab>not in('+',siki)、かつnot in('-',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '+'  :<tab>siki(j)が'+'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) + int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を加えた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) - int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値からsiki({{jに1を加えた値}})の整数値を引いた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>siki = calc_zyouzyo(siki)<tab>calc_zyouzyo(siki)をsikiとする<EOS>
<SOS>siki = calc_kagen(siki)<tab>calc_kagen(siki)をsikiとする<EOS>
<SOS>return (siki)<tab>(siki)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>tmp = list(input())<tab>入力された文字列のリストをtmpとする<EOS>
<SOS>siki = []<tab>空列をsikiとする<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>for j  in range(len(tmp))  :<tab>0からtmpの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if tmp[j] in ['*', '/', '+', '-', '(', ')', '=']  :<tab>tmp(j)が('*'、'/'、'+'、'-'、'('、')'、'=')からなる列に含まれるとき、<EOS>
<SOS>if num != ''  :<tab>numが''と等しくないとき、<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>siki.remove('=')<tab>sikiから'='を取り除いた集まり<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if j == len(siki) or ')' not in siki :<tab>jがsikiの長さ、またはnot in(')',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>if siki[j] == ')'  :<tab>siki(j)が')'のとき、<EOS>
<SOS>for k  in range(j-1,-1, -1)  :<tab>jから1を引いた値から-1未満までの-1間隔の数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if siki[k] == '('  :<tab>siki(k)が'('のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>siki[k]  = calc(stack)<tab>calc(stack)をsiki[k] にする<EOS>
<SOS>del siki[k+1 : j+1]<tab>sikiの位置kに1を加えた値から位置jに1を加えた値までの部分を削除する<EOS>
<SOS>j = k+1<tab>kに1を加えた値をjとする<EOS>
<SOS>siki = calc(siki)<tab>calc(siki)をsikiとする<EOS>
<SOS>print(siki)<tab>sikiを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(s)  :<tab>iがsの長さより小さい間、繰り返す<EOS>
<SOS>if s[i] == "@"  :<tab>s(i)が"@"のとき、<EOS>
<SOS>for j  in range(int(s[i+1]))  :<tab>0からs({{iに1を加えた値}})の整数値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>H, A, B  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にH、A、Bとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(A, B+1)  :<tab>AからBに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if H % i == 0  :<tab>Hをiで割った余りが0のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for a  in range(10)  :<tab>0から10未満までの数列の各要素を順にaとして、繰り返す<EOS>
<SOS>for b  in range(10)  :<tab>0から10未満までの数列の各要素を順にbとして、繰り返す<EOS>
<SOS>for c  in range(10)  :<tab>0から10未満までの数列の各要素を順にcとして、繰り返す<EOS>
<SOS>for d  in range(10)  :<tab>0から10未満までの数列の各要素を順にdとして、繰り返す<EOS>
<SOS>if a + b + c + d == n  :<tab>{{{{aにbを加えた値}}にcを加えた値}}にdを加えた値がnのとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>maxv = v<tab>vをmaxvとする<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>rieki = -(10**9)<tab>-(10の9乗)の組をriekiとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>if rieki < v - minv  :<tab>riekiがvからminvを引いた値より小さいとき、<EOS>
<SOS>rieki = v - minv<tab>vからminvを引いた値をriekiとする<EOS>
<SOS>if minv > v  :<tab>minvがvより大きいとき、<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>print(rieki)<tab>riekiを出力する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>lst = input().split()<tab>入力された文字列を空白で分割した列をlstとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] in ['+', '-', '*', '/']  :<tab>lst(i)が('+'、'-'、'*'、'/')からなる列に含まれるとき、<EOS>
<SOS>if lst[i] == '+'  :<tab>lst(i)が'+'のとき、<EOS>
<SOS>print(stack[0])<tab>stackの最初値を出力する<EOS>
<SOS>n, q  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとqとする<EOS>
<SOS>process = []<tab>空列をprocessとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, time  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にnameとtimeとする<EOS>
<SOS>time = 0<tab>0をtimeとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if len(process) == 0  :<tab>processの長さが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if process[0][1] > q  :<tab>processの最初値(1)がqより大きいとき、<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをSとする<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>T = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをTとする<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for i  in range(q)  :<tab>0からq未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if T[i] in S  :<tab>T(i)がSに含まれるとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>if j-1 >= 0  :<tab>jから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i][j-1] == "."  :<tab>A(i)({{jから1を引いた値}})が"."のとき、<EOS>
<SOS>A[i][j-1]  = "+"<tab>"+"をA[i][j-1] にする<EOS>
<SOS>Check(A, i, j-1, W, H)<tab>Check(A,i,jから1を引いた値,W,H)<EOS>
<SOS>if i+1 < H  :<tab>iに1を加えた値がHより小さいとき、<EOS>
<SOS>if A[i+1][j] == "."  :<tab>A({{iに1を加えた値}})(j)が"."のとき、<EOS>
<SOS>A[i+1][j] = "+"<tab>"+"をA[i+1][j]にする<EOS>
<SOS>Check(A, i+1, j, W, H)<tab>Check(A,iに1を加えた値,j,W,H)<EOS>
<SOS>if j+1 < W  :<tab>jに1を加えた値がWより小さいとき、<EOS>
<SOS>if A[i][j+1] == "."  :<tab>A(i)({{jに1を加えた値}})が"."のとき、<EOS>
<SOS>A[i][j+1]  = "+"<tab>"+"をA[i][j+1] にする<EOS>
<SOS>Check(A, i, j+1, W, H)<tab>Check(A,i,jに1を加えた値,W,H)<EOS>
<SOS>if i-1 >= 0  :<tab>iから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i-1][j] == "."  :<tab>A({{iから1を引いた値}})(j)が"."のとき、<EOS>
<SOS>A[i-1][j]  = "+"<tab>"+"をA[i-1][j] にする<EOS>
<SOS>Check(A, i-1, j, W, H)<tab>Check(A,iから1を引いた値,j,W,H)<EOS>
<SOS>return (A)<tab>(A)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>W, H  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にWとHとする<EOS>
<SOS>if W == 0 and H == 0  :<tab>Wが0、かつHが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>Tile = [list(input()) for i in range(H)]<tab>{{0からH未満までの数列}}の各要素をiとし、入力された文字列のリストの列をTileとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile[i][j] == "@"  :<tab>Tile(i)(j)が"@"のとき、<EOS>
<SOS>my_i = i<tab>iをmy_iとする<EOS>
<SOS>my_j = j<tab>jをmy_jとする<EOS>
<SOS>Tile[my_i][my_j]  = "+"<tab>"+"をTile[my_i][my_j] にする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile_new[i][j] == "+"  :<tab>Tile_new(i)(j)が"+"のとき、<EOS>
<SOS>print(count<tab>countを出力する<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(x**3)<tab>xの3乗を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(n * 32)<tab>nに32を掛けた値を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(int((x-30) / 2))<tab>{{({{xから30を引いた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>print(a+b+c)<tab>{{aにbを加えた値}}にcを加えた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a*b, (a+b)*2)<tab>aにbを掛けた値と({{aにbを加えた値}})の組に2を掛けた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>print("a > b")<tab>"a > b"を出力する<EOS>
<SOS>print("a < b")<tab>"a < b"を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(int((a+b)/2))<tab>{{({{aにbを加えた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if b > a  :<tab>bがaより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if c == 1  :<tab>cが1のとき、<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>time = int(input())<tab>入力された文字列の整数値をtimeとする<EOS>
<SOS>H = time//3600<tab>timeを3600で割った商をHとする<EOS>
<SOS>M = time%3600<tab>timeを3600で割った余りをMとする<EOS>
<SOS>S = M%60<tab>Mを60で割った余りをSとする<EOS>
<SOS>M = M//60<tab>Mを60で割った商をMとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>d = int(a / b)<tab>aをbで割った値の整数値をdとする<EOS>
<SOS>e = a % b<tab>aをbで割った余りをeとする<EOS>
<SOS>f = a / b<tab>aをbで割った値をfとする<EOS>
<SOS>print("{0} {1} {2:.5f}".format(d, e, f))<tab>format(d,e,f)を出力する<EOS>
<SOS>pi = 3.141592653589<tab>3.141592653589をpiとする<EOS>
<SOS>r = float(input())<tab>入力された文字列の浮動小数点数値をrとする<EOS>
<SOS>a = r * r * pi<tab>rにrを掛けた値にpiを掛けた値をaとする<EOS>
<SOS>b = r * 2 * pi<tab>rに2を掛けた値にpiを掛けた値をbとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a * b / 3.305785)<tab>{{aにbを掛けた値}}を3.305785で割った値を出力する<EOS>
<SOS>a, b,c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>if b > c  :<tab>bがcより大きいとき、<EOS>
<SOS>b, c = c, b<tab>bとcを入れ替える<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b, c)<tab>a、b、cを出力する<EOS>
<SOS>e1, e2, e3, e4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にe1、e2、e3、e4とする<EOS>
<SOS>if e1 == e2 and e3 == e4 or e1 == e3 and e2 == e4 or e1 == e4 and e2 == e3  :<tab>{{e1がe2}}、かつ{{e3がe4かどうか}}、または{{e1がe3}}、かつ{{e2がe4かどうか}}、または{{e1がe4}}、かつ{{e2がe3かどうか}}のとき、<EOS>
<SOS>print("yes")<tab>"yes"を出力する<EOS>
<SOS>N, A, B, C, D  = map(int, input().split())[#Document [# '# setX']]<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にN、A、B、C、Dとする<EOS>
<SOS>if N % A == 0  :<tab>NをAで割った余りが0のとき、<EOS>
<SOS>X = N // A * B<tab>NをAで割った商にBを掛けた値をXとする<EOS>
<SOS>if N % C == 0  :<tab>NをCで割った余りが0のとき、<EOS>
<SOS>Y = N // C * D<tab>NをCで割った商にDを掛けた値をYとする<EOS>
<SOS>print(min(X, Y))<tab>XとYの最小値を出力する<EOS>
<SOS>A, B, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にA、B、Cとする<EOS>
<SOS>coin = 0<tab>0をcoinとする<EOS>
<SOS>day = 1<tab>1をdayとする<EOS>
<SOS>while coin < C  :<tab>coinがCより小さい間、繰り返す<EOS>
<SOS>if day % 7 == 0  :<tab>dayを7で割った余りが0のとき、<EOS>
<SOS>print(day-1)<tab>dayから1を引いた値を出力する<EOS>
<SOS>n = 1000<tab>1000をnとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < n  :<tab>iがnより小さい間、繰り返す<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>if t == 1  :<tab>tが1のとき、<EOS>
<SOS>return 6000<tab>6000を関数出力とする<EOS>
<SOS>return 4000<tab>4000を関数出力とする<EOS>
<SOS>return 3000<tab>3000を関数出力とする<EOS>
<SOS>return 2000<tab>2000を関数出力とする<EOS>
<SOS>t1, n1  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt1とn1とする<EOS>
<SOS>t2, n2  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt2とn2とする<EOS>
<SOS>t3, n3  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt3とn3とする<EOS>
<SOS>t4, n4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt4とn4とする<EOS>
<SOS>print(change(t1) * n1)<tab>change(t1)にn1を掛けた値を出力する<EOS>
<SOS>print(change(t2) * n2)<tab>change(t2)にn2を掛けた値を出力する<EOS>
<SOS>print(change(t3) * n3)<tab>change(t3)にn3を掛けた値を出力する<EOS>
<SOS>print(change(t4) * n4)<tab>change(t4)にn4を掛けた値を出力する<EOS>
<SOS>for i  in range(7)  :<tab>0から7未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>hi, low  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にhiとlowとする<EOS>
<SOS>print(hi - low)<tab>hiからlowを引いた値を出力する<EOS>
<SOS>for i  in range(9)  :<tab>0から9未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, a, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にname、a、bとする<EOS>
<SOS>print(name, int(a)+int(b), 200*int(a)+300*int(b))<tab>name、aの整数値にbの整数値を加えた値、{{200にaの整数値を掛けた値}}に{{300にbの整数値を掛けた値}}を加えた値を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(sum)<tab>sumを出力する<EOS>
<SOS>i = 1<tab>1をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>if x == 0  :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == 0 and b == 0  :<tab>aが0、かつbが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b)<tab>aとbを出力する<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>for i  in range(N)  :<tab>0からN未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a**2 == b**2 + c**2 or b**2 == c**2 + a**2 or c**2 == a**2 + b**2  :<tab>{{aの2乗が{{bの2乗にcの2乗を加えた値}}}}、または{{bの2乗が{{cの2乗にaの2乗を加えた値}}かどうか}}、またはcの2乗が{{aの2乗にbの2乗を加えた値}}のとき、<EOS>
<SOS>print("YES")<tab>"YES"を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = 100000<tab>100000をSとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if S % 1000 != 0  :<tab>Sを1000で割った余りが0と等しくないとき、<EOS>
<SOS>S = (int(S / 1000) + 1) * 1000<tab>({{{{Sを1000で割った値}}の整数値に1を加えた値}})の組に1000を掛けた値をSとする<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>for i  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H, W  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == 0 and W == 0  :<tab>Hが0、かつWが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>for h  in range(H)  :<tab>0からH未満までの数列の各要素を順にhとして、繰り返す<EOS>
<SOS>for w  in range(W)  :<tab>0からW未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>if (h + w) % 2 == 0  :<tab>({{hにwを加えた値}})の組を2で割った余りが0のとき、<EOS>
<SOS>print("#", end="")<tab>"#"と((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, op, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にa、op、bとする<EOS>
<SOS>a = int(a)<tab>aの整数値をaとする<EOS>
<SOS>b = int(b)<tab>bの整数値をbとする<EOS>
<SOS>if op == "?"  :<tab>opが"?"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(a + b)<tab>aにbを加えた値を出力する<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>print(int(a / b))<tab>{{aをbで割った値}}の整数値を出力する<EOS>
<SOS>print(a * b)<tab>aにbを掛けた値を出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>l = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlとする<EOS>
<SOS>print(min(l), max(l), sum(l))<tab>lの最小値、lの最大値、lの総和を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>data = list(int(input()) for i in range(N))<tab>{{0からN未満までの数列}}の各要素をiとし、入力された文字列の整数値の列のリストをdataとする<EOS>
<SOS>del data[0]<tab>dataの最初値を削除する<EOS>
<SOS>del data[-1]<tab>dataの末尾値を削除する<EOS>
<SOS>data_ave = sum(data)/len(data)<tab>dataの総和をdataの長さで割った値をdata_aveとする<EOS>
<SOS>print(int(data_ave))<tab>data_aveの整数値を出力する<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>print(Fib(N))<tab>Fib(N)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return<tab>関数処理を中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(0, 0.00000000)<tab>0と0.00000000を出力する<EOS>
<SOS>print(100.00000000, 0.00000000)<tab>100.00000000と0.00000000を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(5)  :<tab>0から5未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>score = int(input())<tab>入力された文字列の整数値をscoreとする<EOS>
<SOS>if score < 40  :<tab>scoreが40より小さいとき、<EOS>
<SOS>score = 40<tab>40をscoreとする<EOS>
<SOS>print(sum//5)<tab>sumを5で割った商を出力する<EOS>
<SOS>list_a = []<tab>空列をlist_aとする<EOS>
<SOS>list_b = []<tab>空列をlist_bとする<EOS>
<SOS>for x  in range(4)  :<tab>0から4未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>for x  in range(2)  :<tab>0から2未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>print(sum(list_a[0:3]) + list_b[0])<tab>{{list_aの位置0から位置3までの部分}}の総和にlist_bの最初値を加えた値を出力する<EOS>
<SOS>list_W = []<tab>空列をlist_Wとする<EOS>
<SOS>list_K = []<tab>空列をlist_Kとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>sum_W = sum(list_W[0:3])<tab>list_Wの位置0から位置3までの部分の総和をsum_Wとする<EOS>
<SOS>sum_K = sum(list_K[0:3])<tab>list_Kの位置0から位置3までの部分の総和をsum_Kとする<EOS>
<SOS>print(sum_W, sum_K)<tab>sum_Wとsum_Kを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>A = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをAとする<EOS>
<SOS>m = min(A)<tab>Aの最小値をmとする<EOS>
<SOS>M = max(A)<tab>Aの最大値をMとする<EOS>
<SOS>print(math.ceil((m + M) / 2) - m)<tab>math.ceil((m + M) / 2) からmを引いた値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>List = []<tab>空列をListとする<EOS>
<SOS>max_ans = 0<tab>0をmax_ansとする<EOS>
<SOS>sum_ans = 0<tab>0をsum_ansとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i < m  :<tab>iがmより小さいとき、<EOS>
<SOS>if i >= m - 1 and max_ans < sum_ans  :<tab>iが{{mから1を引いた値}}以上、かつmax_ansがsum_ansより小さいとき、<EOS>
<SOS>max_ans = sum_ans<tab>sum_ansをmax_ansとする<EOS>
<SOS>print(max_ans)<tab>max_ansを出力する<EOS>
<SOS>LIST = []<tab>空列をLISTとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(LIST[0])<tab>LISTの最初値を出力する<EOS>
<SOS>print(LIST[1])<tab>LIST(1)を出力する<EOS>
<SOS>print(LIST[2])<tab>LIST(2)を出力する<EOS>
<SOS>str_org = str(input())<tab>入力された文字列の文字列をstr_orgとする<EOS>
<SOS>print(str_org.upper())<tab>str_orgを英大文字に変換した文字列を出力する<EOS>
<SOS>str = input()<tab>入力された文字列をstrとする<EOS>
<SOS>print(str.swapcase())<tab>strの英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>count_char = list(0 for i in range(26))<tab>{{0から26未満までの数列}}の各要素をiとし、0の列のリストをcount_charとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>for i  in range(97, 123)  :<tab>97から123未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(chr(i), ":", count_char[i-97])<tab>文字コードiの文字、":"、count_char({{iから97を引いた値}})を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>num = input()<tab>入力された文字列をnumとする<EOS>
<SOS>if num == '0'  :<tab>numが'0'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>num_lst = [int(i) for i in num]<tab>numの各要素をiとし、iの整数値の列をnum_lstとする<EOS>
<SOS>print(sum(num_lst))<tab>num_lstの総和を出力する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>count_K = a.count("K")<tab>a内の"K"の出現をカウントした整数をcount_Kとする<EOS>
<SOS>count_P = a.count("P")<tab>a内の"P"の出現をカウントした整数をcount_Pとする<EOS>
<SOS>count_U = a.count("U")<tab>a内の"U"の出現をカウントした整数をcount_Uとする<EOS>
<SOS>count_C = a.count("C")<tab>a内の"C"の出現をカウントした整数をcount_Cとする<EOS>
<SOS>print(min(count_K, count_P, count_U, count_C))<tab>count_K、count_P、count_U、count_Cの最小値を出力する<EOS>
<SOS>W = input()<tab>入力された文字列をWとする<EOS>
<SOS>n = 0<tab>0をnとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>T = input()<tab>入力された文字列をTとする<EOS>
<SOS>if T== "END_OF_TEXT"  :<tab>Tが"END_OF_TEXT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>small_T = list(T.split())<tab>Tを空白で分割した列のリストをsmall_Tとする<EOS>
<SOS>for i  in range(len(small_T))  :<tab>0からsmall_Tの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if str.lower(small_T[i]) == str.lower(W)  :<tab>strとsmall_T(i)を英小文字に変換した文字列がstrとWを英小文字に変換した文字列のとき、<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>s = list(input())<tab>入力された文字列のリストをsとする<EOS>
<SOS>p = list(input())<tab>入力された文字列のリストをpとする<EOS>
<SOS>for x  in range(len(p))  :<tab>0からpの長さ未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if p[j] == s[i]  :<tab>p(j)がs(i)のとき、<EOS>
<SOS>if j == len(p)  :<tab>jがpの長さのとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == len(s)  :<tab>iがsの長さのとき、<EOS>
<SOS>print("No")<tab>"No"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>b = list(input())<tab>入力された文字列のリストをbとする<EOS>
<SOS>for j  in range(len(a)+1-len(b))  :<tab>0から{{aの長さに1を加えた値}}からbの長さを引いた値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>Same = True<tab>真をSameとする<EOS>
<SOS>ans = j<tab>jをansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(b)  :<tab>iがbの長さより小さい間、繰り返す<EOS>
<SOS>if b[i] == a[j]  :<tab>b(i)がa(j)のとき、<EOS>
<SOS>if Same == True  :<tab>Sameが真のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>Taro_ten = 0<tab>0をTaro_tenとする<EOS>
<SOS>Hanako_ten = 0<tab>0をHanako_tenとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b  = list(input().split())<tab>入力された文字列を空白で分割した列のリストを展開し順にaとbとする<EOS>
<SOS>Taro = list(a)<tab>aのリストをTaroとする<EOS>
<SOS>Hanako = list(b)<tab>bのリストをHanakoとする<EOS>
<SOS>length = min(len(Taro), len(Hanako))<tab>Taroの長さとHanakoの長さの最小値をlengthとする<EOS>
<SOS>for i  in range(length)  :<tab>0からlength未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if ord(Taro[i]) > ord(Hanako[i])  :<tab>Taro(i)の順序数がHanako(i)の順序数より大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == length -1  :<tab>iがlengthから1を引いた値のとき、<EOS>
<SOS>if len(Taro) > length  :<tab>Taroの長さがlengthより大きいとき、<EOS>
<SOS>print(Taro_ten, Hanako_ten)<tab>Taro_tenとHanako_tenを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>score = input()<tab>入力された文字列をscoreとする<EOS>
<SOS>if score == "0"  :<tab>scoreが"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>score_a = score.count("A")<tab>score内の"A"の出現をカウントした整数をscore_aとする<EOS>
<SOS>score_b = score.count("B")<tab>score内の"B"の出現をカウントした整数をscore_bとする<EOS>
<SOS>if score[0] == "A"  :<tab>score(0)が"A"のとき、<EOS>
<SOS>if score_a > score_b  :<tab>score_aがscore_bより大きいとき、<EOS>
<SOS>print(score_a, score_b)<tab>score_aとscore_bを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>x1, y1, x2, y2  = map(float, input().split())<tab>map(float,入力された文字列を空白で分割した列)を展開し順にx1、y1、x2、y2とする<EOS>
<SOS>dist = math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)<tab>math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)をdistとする<EOS>
<SOS>print("{:.5f}".format(dist))<tab>format(dist)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>a, b, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、Cとする<EOS>
<SOS>S = a * b * math.sin(math.pi * C / 180) / 2<tab>{{aにbを掛けた値}}にmath.sin(math.pi * C / 180) を掛けた値を2で割った値をSとする<EOS>
<SOS>c = math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))<tab>math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))をcとする<EOS>
<SOS>L = a + b + c<tab>aにbを加えた値にcを加えた値をLとする<EOS>
<SOS>h = 2 * S / a<tab>2にSを掛けた値をaで割った値をhとする<EOS>
<SOS>print('{:.4f}'.format(S))<tab>format(S)を出力する<EOS>
<SOS>print('{:.4f}'.format(L))<tab>format(L)を出力する<EOS>
<SOS>print('{:.4f}'.format(h))<tab>format(h)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをsとする<EOS>
<SOS>m = sum(s) / len(s)<tab>sの総和をsの長さで割った値をmとする<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = math.sqrt(a)<tab>math.sqrt(a)をaとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, f, r  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にm、f、rとする<EOS>
<SOS>if m == -1 and f == -1 and r == -1  :<tab>{{mが-1}}、かつ{{fが-1かどうか}}、かつrが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if m == -1 or f == -1  :<tab>mが-1、またはfが-1のとき、<EOS>
<SOS>print("F")<tab>"F"を出力する<EOS>
<SOS>print("A")<tab>"A"を出力する<EOS>
<SOS>print("B")<tab>"B"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("D")<tab>"D"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n-1)  :<tab>1からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(i+1, n)  :<tab>iに1を加えた値からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for k  in range(j+1, n+1)  :<tab>jに1を加えた値からnに1を加えた値未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if i + j + k == m  :<tab>{{iにjを加えた値}}にkを加えた値がmのとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>card = [[False for i in range(13)] for j in range(4)]<tab>{{0から4未満までの数列}}の各要素をjとし、{{{{0から13未満までの数列}}の各要素をiとし、偽の列}}の列をcardとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>mark, suit  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にmarkとsuitとする<EOS>
<SOS>if mark == "S"  :<tab>markが"S"のとき、<EOS>
<SOS>mark_num = 0<tab>0をmark_numとする<EOS>
<SOS>mark_num = 1<tab>1をmark_numとする<EOS>
<SOS>mark_num = 2<tab>2をmark_numとする<EOS>
<SOS>mark_num = 3<tab>3をmark_numとする<EOS>
<SOS>card[mark_num][int(suit)-1]  = True<tab>真をcard[mark_num][int(suit)-1] にする<EOS>
<SOS>for j  in range(4)  :<tab>0から4未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for i  in range(13)  :<tab>0から13未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if card[j][i] == False  :<tab>card(j)(i)が偽のとき、<EOS>
<SOS>if j == 0  :<tab>jが0のとき、<EOS>
<SOS>print("S", i+1)<tab>"S"とiに1を加えた値を出力する<EOS>
<SOS>print("H", i+1)<tab>"H"とiに1を加えた値を出力する<EOS>
<SOS>print("C", i+1)<tab>"C"とiに1を加えた値を出力する<EOS>
<SOS>print("D", i+1)<tab>"D"とiに1を加えた値を出力する<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>A = [int(input()) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、入力された文字列の整数値の列をAとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(m)  :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n, m, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、lとする<EOS>
<SOS>A = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をAとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(l)  :<tab>0からl未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for k  in range(m)  :<tab>0からm未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if j == l-1  :<tab>jがlから1を引いた値のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>L = []<tab>空列をLとする<EOS>
<SOS>temp = n<tab>nをtempとする<EOS>
<SOS>print(n,end="")<tab>nと((end, ""))からなる辞書を出力する<EOS>
<SOS>print(":",end="")<tab>":"と((end, ""))からなる辞書を出力する<EOS>
<SOS>for i  in range(2, int(n**(1/2)//1)+1) :<tab>2から{{nの(1/2)乗を1で割った商}}の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if temp%i==0 :<tab>tempをiで割った余りが0のとき、<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>while temp%i==0 :<tab>tempをiで割った余りが0の間、繰り返す<EOS>
<SOS>for j  in range(c) :<tab>0からc未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print("",i,end="")<tab>""、i、((end, ""))からなる辞書を出力する<EOS>
<SOS>if temp!=1 :<tab>tempが1と等しくないとき、<EOS>
<SOS>print("",temp, end="")<tab>""、temp、((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>factorization(n)<tab>factorization(n)<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>return (x % mod)<tab>(xをmodで割った余り)の組を関数出力とする<EOS>
<SOS>if b == 1  :<tab>bが1のとき、<EOS>
<SOS>return a<tab>aを関数出力とする<EOS>
<SOS>a_2 = S(a**2)<tab>S(aの2乗)をa_2とする<EOS>
<SOS>b_2 = b // 2<tab>bを2で割った商をb_2とする<EOS>
<SOS>return S(A(a_2, b_2, mod))<tab>S(A(a_2,b_2,mod))を関数出力とする<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>print(A(m, n, mod))<tab>A(m,n,mod)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if y == 0  :<tab>yが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if x < y  :<tab>xがyより小さいとき、<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>x = x % y<tab>xをyで割った余りをxとする<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>print(x, ans)<tab>xとansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if a < b  :<tab>aがbより小さいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>amari = a % b<tab>aをbで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>return (b)<tab>(b)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>c = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcとする<EOS>
<SOS>for i  in range(n-1, 0, -1)  :<tab>nから1を引いた値から0未満までの-1間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c[i-1]  = int(c[i] * c[i-1] / gcd(c[i], c[i-1]))<tab>{{c(i)にc({{iから1を引いた値}})を掛けた値}}をgcd(c(i),c({{iから1を引いた値}}))で割った値の整数値をc[i-1] にする<EOS>
<SOS>print(c[0])<tab>cの最初値を出力する<EOS>
<SOS>N, M  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にNとMとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if N < M  :<tab>NがMより小さいとき、<EOS>
<SOS>N, M = M, N<tab>NとMを入れ替える<EOS>
<SOS>amari = N % M<tab>NをMで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(M)<tab>Mを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return 'F'<tab>'F'を関数出力とする<EOS>
<SOS>return 'T'<tab>'T'を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(n)  :<tab>0からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>a = int(input())<tab>入力された文字列の整数値をaとする<EOS>
<SOS>if Sosu(a) == 'T'  :<tab>Sosu(a)が'T'のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(3, int(math.sqrt(n))+1, 2)  :<tab>3からmath.sqrt(n)の整数値に1を加えた値未満までの2間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if n % i == 0  :<tab>nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>S = [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4]<tab>(0、0、1、2、2、3、3、4、4、4、4)からなる列をSとする<EOS>
<SOS>for i  in range(11, 1000000)  :<tab>11から1000000未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i % 2 == 0  :<tab>iを2で割った余りが0のとき、<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>print(S[n])<tab>S(n)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(2, a)  :<tab>2からa未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>other = a - i<tab>aからiを引いた値をotherとする<EOS>
<SOS>if other >= i and Sosu(other)  :<tab>otherがi以上、かつSosu(other)のとき、<EOS>
<SOS>return count<tab>countを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(main(n))<tab>main(n)を出力する<EOS>
<SOS>if n % 2 == 0  :<tab>nを2で割った余りが0のとき、<EOS>
<SOS>return n // 2<tab>nを2で割った商を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>while n != 1  :<tab>nが1と等しくない間、繰り返す<EOS>
<SOS>n = Collatz(n)<tab>Collatz(n)をnとする<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>S = 0<tab>0をSとする<EOS>
<SOS>for i  in range(600//d)  :<tab>0から600をdで割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>if q == -1  :<tab>qが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = 1<tab>1をnとする<EOS>
<SOS>x = q / 2<tab>qを2で割った値をxとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if abs(x**3 - q) < (0.00001 * q)  :<tab>{{xの3乗からqを引いた値}}の絶対値が({{0.00001にqを掛けた値}})の組より小さいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = x - (x**3 - q) / (3 * x**2)<tab>xから({{xの3乗からqを引いた値}})の組を({{3にxの2乗を掛けた値}})の組で割った値を引いた値をxとする<EOS>
<SOS>print('{:.6f}'.format(x))<tab>format(x)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a = input()<tab>入力された文字列をaとする<EOS>
<SOS>if a == "END OF INPUT"  :<tab>aが"END OF INPUT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>b = list(a)<tab>aのリストをbとする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(len(b))  :<tab>0からbの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if b[i] != ' '  :<tab>b(i)が' 'と等しくないとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>count_j = 0<tab>0をcount_jとする<EOS>
<SOS>count_i = 0<tab>0をcount_iとする<EOS>
<SOS>for i  in range(len(l)-2)  :<tab>'0からlの長さから2を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if l[i] == "J" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"J"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>if l[i] == "I" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"I"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>return count_j, count_i<tab>(count_jとcount_i)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>j, i  = JOIOI(l)<tab>JOIOI(l)を展開し順にjとiとする<EOS>
<SOS>print(j)<tab>jを出力する<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>pal = "True"<tab>"True"をpalとする<EOS>
<SOS>for i  in range(len(s)//2)  :<tab>0からsの長さを2で割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] != s[-i-1]  :<tab>s(i)がs({{-iから1を引いた値}})と等しくないとき、<EOS>
<SOS>pal = "False"<tab>"False"をpalとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if pal == "True"  :<tab>palが"True"のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>sentence = list(input().split())<tab>入力された文字列を空白で分割した列のリストをsentenceとする<EOS>
<SOS>max_length = 0<tab>0をmax_lengthとする<EOS>
<SOS>max_sentence = ""<tab>""をmax_sentenceとする<EOS>
<SOS>count = []<tab>空列をcountとする<EOS>
<SOS>for i  in range(len(sentence))  :<tab>0からsentenceの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if max_length < len(sentence[i])  :<tab>max_lengthがsentence(i)の長さより小さいとき、<EOS>
<SOS>max_length = len(sentence[i])<tab>sentence(i)の長さをmax_lengthとする<EOS>
<SOS>max_sentence = sentence[i]<tab>sentence(i)をmax_sentenceとする<EOS>
<SOS>new_word = False<tab>偽をnew_wordとする<EOS>
<SOS>for j  in range(len(count))  :<tab>0からcountの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if count[j][0] == sentence[i]  :<tab>count(j)(0)がsentence(i)のとき、<EOS>
<SOS>new_word = True<tab>真をnew_wordとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if new_word == False  :<tab>new_wordが偽のとき、<EOS>
<SOS>count = sorted(count, key = itemgetter(1), reverse = True)<tab>countと((key, itemgetter(1))と(reverse, 真))からなる辞書をソートした列をcountとする<EOS>
<SOS>print(count[0][0], max_sentence)<tab>countの最初値の最初値とmax_sentenceを出力する<EOS>
<SOS>A = list(input().split())<tab>入力された文字列を空白で分割した列のリストをAとする<EOS>
<SOS>for i  in range(len(A))  :<tab>0からAの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if "apple" in A[i]  :<tab>"apple"がA(i)に含まれるとき、<EOS>
<SOS>A[i]  = A[i].replace("apple", "peach")<tab>A(i)内の"apple"を"peach"で置き換えた文字列をA[i] にする<EOS>
<SOS>A[i]  = A[i].replace("peach", "apple")<tab>A(i)内の"peach"を"apple"で置き換えた文字列をA[i] にする<EOS>
<SOS>print(" ".join(A))<tab>Aを文字列" "で連結した文字列を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>hit = 0<tab>0をhitとする<EOS>
<SOS>brow = 0<tab>0をbrowとする<EOS>
<SOS>if a1 == b1  :<tab>a1がb1のとき、<EOS>
<SOS>if a2 == b2  :<tab>a2がb2のとき、<EOS>
<SOS>if a3 == b3  :<tab>a3がb3のとき、<EOS>
<SOS>if a4 == b4  :<tab>a4がb4のとき、<EOS>
<SOS>if a1 == b2 or a1 == b3 or a1 == b4  :<tab>{{a1がb2}}、または{{a1がb3かどうか}}、またはa1がb4のとき、<EOS>
<SOS>if a2 == b1 or a2 == b3 or a2 == b4  :<tab>{{a2がb1}}、または{{a2がb3かどうか}}、またはa2がb4のとき、<EOS>
<SOS>if a3 == b1 or a3 == b2 or a3 == b4  :<tab>{{a3がb1}}、または{{a3がb2かどうか}}、またはa3がb4のとき、<EOS>
<SOS>if a4 == b1 or a4 == b2 or a4 == b3  :<tab>{{a4がb1}}、または{{a4がb2かどうか}}、またはa4がb3のとき、<EOS>
<SOS>print(hit, brow)<tab>hitとbrowを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for j  in range(i, n)  :<tab>iからn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if s == n  :<tab>sがnのとき、<EOS>
<SOS>if s > n  :<tab>sがnより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>for i  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>i_tax = int(i + i*x/100)<tab>iに{{{{iにxを掛けた値}}を100で割った値}}を加えた値の整数値をi_taxとする<EOS>
<SOS>for j  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>j_tax = int(j + j*x/100)<tab>jに{{{{jにxを掛けた値}}を100で割った値}}を加えた値の整数値をj_taxとする<EOS>
<SOS>if i_tax + j_tax > s  :<tab>i_taxにj_taxを加えた値がsより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i_tax + j_tax == s  :<tab>i_taxにj_taxを加えた値がsのとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>ans = int(i + i*y/100) + int(j + j*y/100)<tab>{{iに{{{{iにyを掛けた値}}を100で割った値}}を加えた値}}の整数値に{{jに{{{{jにyを掛けた値}}を100で割った値}}を加えた値}}の整数値を加えた値をansとする<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y, s  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にx、y、sとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = calc_before(x, s)<tab>calc_before(x,s)をlstとする<EOS>
<SOS>max_price = 0<tab>0をmax_priceとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>price = calc_after(lst[i][0], lst[i][1], y)<tab>calc_after(lst(i)の最初値,lst(i)(1),y)をpriceとする<EOS>
<SOS>max_price = max(price, max_price)<tab>priceとmax_priceの最大値をmax_priceとする<EOS>
<SOS>print(max_price)<tab>max_priceを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>catalog = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcatalogとする<EOS>
<SOS>max_p = 0<tab>0をmax_pとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if i != j  :<tab>iがjと等しくないとき、<EOS>
<SOS>x = catalog[i] + catalog[j]<tab>catalog(i)にcatalog(j)を加えた値をxとする<EOS>
<SOS>if x <= m and x > max_p  :<tab>xがm以下、かつxがmax_pより大きいとき、<EOS>
<SOS>max_p = x<tab>xをmax_pとする<EOS>
<SOS>if max_p == 0  :<tab>max_pが0のとき、<EOS>
<SOS>print("NONE")<tab>"NONE"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlstとする<EOS>
<SOS>ave_lst = sum(lst) / len(lst)<tab>lstの総和をlstの長さで割った値をave_lstとする<EOS>
<SOS>Sum = 0<tab>0をSumとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] <= ave_lst  :<tab>lst(i)がave_lst以下のとき、<EOS>
<SOS>print(Sum)<tab>Sumを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if N == 1  :<tab>Nが1のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(a+1, b+1)  :<tab>aに1を加えた値からbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(amount_sosu(n, n*2))<tab>amount_sosu(n,{{nに2を掛けた値}})を出力する<EOS>
<SOS>n, t, e  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、t、eとする<EOS>
<SOS>watch = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをwatchとする<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>for w  in range(n)  :<tab>0からn未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>for i  in range(e+1)  :<tab>0からeに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if (t+i) % watch[w] == 0  :<tab>({{tにiを加えた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if (t-i) % watch[w] == 0  :<tab>({{tからiを引いた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>print(w+1)<tab>wに1を加えた値を出力する<EOS>
<SOS>d, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にdとlとする<EOS>
<SOS>s = int(d / l + d % l)<tab>{{dをlで割った値}}に{{dをlで割った余り}}を加えた値の整数値をsとする<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>if d == 0  :<tab>dが0のとき、<EOS>
<SOS>new_i = square[n][0] - 1<tab>square(n)(0)から1を引いた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] - 1<tab>square(n)(1)から1を引いた値をnew_jとする<EOS>
<SOS>new_i = square[n][0] + 1<tab>square(n)(0)に1を加えた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] + 1<tab>square(n)(1)に1を加えた値をnew_jとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>square = [[0, 0]]<tab>((0と0)からなる列)からなる列をsquareとする<EOS>
<SOS>for i  in range(N-1)  :<tab>0からNから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n, d  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとdとする<EOS>
<SOS>sort_x_square = sorted(square)<tab>squareをソートした列をsort_x_squareとする<EOS>
<SOS>print(sort_x_square[-1][0] - sort_x_square[0][0]+1, sort_y_square[-1][1] - sort_y_square[0][1]+1)<tab>{{sort_x_squareの末尾値(0)からsort_x_squareの最初値の最初値を引いた値}}に1を加えた値と{{sort_y_squareの末尾値(1)からsort_y_squareの最初値(1)を引いた値}}に1を加えた値を出力する<EOS>
<SOS>new = []<tab>空列をnewとする<EOS>
<SOS>re_a = list(reversed(a))<tab>aを反転した列のリストをre_aとする<EOS>
<SOS>re_b = list(reversed(b))<tab>bを反転した列のリストをre_bとする<EOS>
<SOS>return list(set(new))<tab>newの集合のリストを関数出力とする<EOS>
<SOS>m = int(input())<tab>入力された文字列の整数値をmとする<EOS>
<SOS>for i  in range(m)  :<tab>0からm未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>train = list(input())<tab>入力された文字列のリストをtrainとする<EOS>
<SOS>new_train = []<tab>空列をnew_trainとする<EOS>
<SOS>for j  in range(1, len(train))  :<tab>1からtrainの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>pre_train = train[:j]<tab>trainの位置先頭から位置jまでの部分をpre_trainとする<EOS>
<SOS>bk_train = train[j:]<tab>trainの先頭j個を取り除いた部分をbk_trainとする<EOS>
<SOS>new_train = new_train + rename(pre_train, bk_train)<tab>new_trainにrename(pre_train,bk_train)を加えた値をnew_trainとする<EOS>
<SOS>print(len(list(set(new_train))))<tab>new_trainの集合のリストの長さを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>tmp = []<tab>空列をtmpとする<EOS>
<SOS>if s == '.'  :<tab>sが'.'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>for i  in range(len(s))  :<tab>0からsの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] == '('  :<tab>s(i)が'('のとき、<EOS>
<SOS>if '(' not in tmp  :<tab>not in('(',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if '[' not in tmp  :<tab>not in('[',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>elif tmp[-1] == '['  :<tab>("tmp(-1)が'['の",)<EOS>
<SOS>if len(tmp) != 0 or ans == False  :<tab>tmpの長さが0と等しくなく、またはansが偽のとき、<EOS>
<SOS>print('no')<tab>'no'を出力する<EOS>
<SOS>pas = input()<tab>入力された文字列をpasとする<EOS>
<SOS>if len(pas) < 6  :<tab>pasの長さが6より小さいとき、<EOS>
<SOS>print("INVALID")<tab>"INVALID"を出力する<EOS>
<SOS>tmp = 0<tab>0をtmpとする<EOS>
<SOS>for i  in range(11)  :<tab>0から11未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i <= 4  :<tab>iが4以下のとき、<EOS>
<SOS>tmp = tmp % 11<tab>tmpを11で割った余りをtmpとする<EOS>
<SOS>if tmp <= 1  :<tab>tmpが1以下のとき、<EOS>
<SOS>return 0<tab>0を関数出力とする<EOS>
<SOS>m = list(input())<tab>入力された文字列のリストをmとする<EOS>
<SOS>if m[11] == '?'  :<tab>m(11)が'?'のとき、<EOS>
<SOS>print(CheckDisit(m))<tab>CheckDisit(m)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>color = [[0, 0, 0], [0, 0, 255], [0, 255, 0], [0, 255, 255], [255, 0, 0], [255, 0, 255], [255, 255, 0], [255, 255, 255]]<tab>((0、0、0)からなる列、(0、0、255)からなる列、(0、255、0)からなる列、(0、255、255)からなる列、(255、0、0)からなる列、(255、0、255)からなる列、(255、255、0)からなる列、(255、255、255)からなる列)からなる列をcolorとする<EOS>
<SOS>color_16 = input()<tab>入力された文字列をcolor_16とする<EOS>
<SOS>if color_16 == "0"  :<tab>color_16が"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>color_R = int(color_16[1] + color_16[2], 16)<tab>16進数文字列color_16(1)にcolor_16(2)を加えた値の整数値をcolor_Rとする<EOS>
<SOS>color_G = int(color_16[3] + color_16[4], 16)<tab>16進数文字列color_16(3)にcolor_16(4)を加えた値の整数値をcolor_Gとする<EOS>
<SOS>color_B = int(color_16[5] + color_16[6], 16)<tab>16進数文字列color_16(5)にcolor_16(6)を加えた値の整数値をcolor_Bとする<EOS>
<SOS>min_d = 500<tab>500をmin_dとする<EOS>
<SOS>for i  in range(8)  :<tab>0から8未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>R = color[i][0]<tab>color(i)の最初値をRとする<EOS>
<SOS>G = color[i][1]<tab>color(i)(1)をGとする<EOS>
<SOS>B = color[i][2]<tab>color(i)(2)をBとする<EOS>
<SOS>d = math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)<tab>math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)をdとする<EOS>
<SOS>if min_d > d  :<tab>min_dがdより大きいとき、<EOS>
<SOS>min_d = d<tab>dをmin_dとする<EOS>
<SOS>color_num = i<tab>iをcolor_numとする<EOS>
<SOS>if color_num == 0  :<tab>color_numが0のとき、<EOS>
<SOS>print("black")<tab>"black"を出力する<EOS>
<SOS>print("blue")<tab>"blue"を出力する<EOS>
<SOS>print("lime")<tab>"lime"を出力する<EOS>
<SOS>print("aqua")<tab>"aqua"を出力する<EOS>
<SOS>print("red")<tab>"red"を出力する<EOS>
<SOS>print("fuchsia")<tab>"fuchsia"を出力する<EOS>
<SOS>print("yellow")<tab>"yellow"を出力する<EOS>
<SOS>tanni = ['Man', 'Oku', 'Cho', 'Kei', 'Gai', 'Jo', 'Jou', 'Ko', 'Kan', 'Sei',<tab>('Man'、'Oku'、'Cho'、'Kei'、'Gai'、'Jo'、'Jou'、'Ko'、'Kan'、'Sei'、'Sai'、'Gok'、'Ggs'、'Asg'、'Nyt'、'Fks'、'Mts'、'end')からなる列をtanniとする<EOS>
<SOS>', 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<tab>, 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<EOS><EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = m**n<tab>mのn乗をsとする<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = s // 10**4<tab>sを10の4乗で割った商をsとする<EOS>
<SOS>if s == 0  :<tab>sが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if tanni[i] != 'end'  :<tab>tanni(i)が'end'と等しくないとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>for j  in range(len(ans))  :<tab>0からansの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if ans[j] == 0  :<tab>ans(j)が0のとき、<EOS>
<SOS>switch = True<tab>真をswitchとする<EOS>
<SOS>if switch == True  :<tab>switchが真のとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '*'  :<tab>siki(j)が'*'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) * int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を掛けた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if (int(siki[j-1]) < 0 and int(siki[j+1]) < 0) or (int(siki[j-1]) >= 0 and int(siki[j+1]) >= 0)  :<tab>({{siki[j-1]の整数値が0より小さく}}、かつ{{siki[j+1]の整数値が0より小さいかどうか}})の組、または({{siki[j-1]の整数値が0以上}}、かつ{{siki[j+1]の整数値が0以上かどうか}})の組のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) // int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値をsiki({{jに1を加えた値}})の整数値で割った商の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if '+' not in siki and '-' not in siki :<tab>not in('+',siki)、かつnot in('-',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '+'  :<tab>siki(j)が'+'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) + int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を加えた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) - int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値からsiki({{jに1を加えた値}})の整数値を引いた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>siki = calc_zyouzyo(siki)<tab>calc_zyouzyo(siki)をsikiとする<EOS>
<SOS>siki = calc_kagen(siki)<tab>calc_kagen(siki)をsikiとする<EOS>
<SOS>return (siki)<tab>(siki)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>tmp = list(input())<tab>入力された文字列のリストをtmpとする<EOS>
<SOS>siki = []<tab>空列をsikiとする<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>for j  in range(len(tmp))  :<tab>0からtmpの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if tmp[j] in ['*', '/', '+', '-', '(', ')', '=']  :<tab>tmp(j)が('*'、'/'、'+'、'-'、'('、')'、'=')からなる列に含まれるとき、<EOS>
<SOS>if num != ''  :<tab>numが''と等しくないとき、<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>siki.remove('=')<tab>sikiから'='を取り除いた集まり<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if j == len(siki) or ')' not in siki :<tab>jがsikiの長さ、またはnot in(')',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>if siki[j] == ')'  :<tab>siki(j)が')'のとき、<EOS>
<SOS>for k  in range(j-1,-1, -1)  :<tab>jから1を引いた値から-1未満までの-1間隔の数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if siki[k] == '('  :<tab>siki(k)が'('のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>siki[k]  = calc(stack)<tab>calc(stack)をsiki[k] にする<EOS>
<SOS>del siki[k+1 : j+1]<tab>sikiの位置kに1を加えた値から位置jに1を加えた値までの部分を削除する<EOS>
<SOS>j = k+1<tab>kに1を加えた値をjとする<EOS>
<SOS>siki = calc(siki)<tab>calc(siki)をsikiとする<EOS>
<SOS>print(siki)<tab>sikiを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(s)  :<tab>iがsの長さより小さい間、繰り返す<EOS>
<SOS>if s[i] == "@"  :<tab>s(i)が"@"のとき、<EOS>
<SOS>for j  in range(int(s[i+1]))  :<tab>0からs({{iに1を加えた値}})の整数値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>H, A, B  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にH、A、Bとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(A, B+1)  :<tab>AからBに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if H % i == 0  :<tab>Hをiで割った余りが0のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for a  in range(10)  :<tab>0から10未満までの数列の各要素を順にaとして、繰り返す<EOS>
<SOS>for b  in range(10)  :<tab>0から10未満までの数列の各要素を順にbとして、繰り返す<EOS>
<SOS>for c  in range(10)  :<tab>0から10未満までの数列の各要素を順にcとして、繰り返す<EOS>
<SOS>for d  in range(10)  :<tab>0から10未満までの数列の各要素を順にdとして、繰り返す<EOS>
<SOS>if a + b + c + d == n  :<tab>{{{{aにbを加えた値}}にcを加えた値}}にdを加えた値がnのとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>maxv = v<tab>vをmaxvとする<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>rieki = -(10**9)<tab>-(10の9乗)の組をriekiとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>if rieki < v - minv  :<tab>riekiがvからminvを引いた値より小さいとき、<EOS>
<SOS>rieki = v - minv<tab>vからminvを引いた値をriekiとする<EOS>
<SOS>if minv > v  :<tab>minvがvより大きいとき、<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>print(rieki)<tab>riekiを出力する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>lst = input().split()<tab>入力された文字列を空白で分割した列をlstとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] in ['+', '-', '*', '/']  :<tab>lst(i)が('+'、'-'、'*'、'/')からなる列に含まれるとき、<EOS>
<SOS>if lst[i] == '+'  :<tab>lst(i)が'+'のとき、<EOS>
<SOS>print(stack[0])<tab>stackの最初値を出力する<EOS>
<SOS>n, q  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとqとする<EOS>
<SOS>process = []<tab>空列をprocessとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, time  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にnameとtimeとする<EOS>
<SOS>time = 0<tab>0をtimeとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if len(process) == 0  :<tab>processの長さが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if process[0][1] > q  :<tab>processの最初値(1)がqより大きいとき、<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをSとする<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>T = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをTとする<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for i  in range(q)  :<tab>0からq未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if T[i] in S  :<tab>T(i)がSに含まれるとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>if j-1 >= 0  :<tab>jから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i][j-1] == "."  :<tab>A(i)({{jから1を引いた値}})が"."のとき、<EOS>
<SOS>A[i][j-1]  = "+"<tab>"+"をA[i][j-1] にする<EOS>
<SOS>Check(A, i, j-1, W, H)<tab>Check(A,i,jから1を引いた値,W,H)<EOS>
<SOS>if i+1 < H  :<tab>iに1を加えた値がHより小さいとき、<EOS>
<SOS>if A[i+1][j] == "."  :<tab>A({{iに1を加えた値}})(j)が"."のとき、<EOS>
<SOS>A[i+1][j] = "+"<tab>"+"をA[i+1][j]にする<EOS>
<SOS>Check(A, i+1, j, W, H)<tab>Check(A,iに1を加えた値,j,W,H)<EOS>
<SOS>if j+1 < W  :<tab>jに1を加えた値がWより小さいとき、<EOS>
<SOS>if A[i][j+1] == "."  :<tab>A(i)({{jに1を加えた値}})が"."のとき、<EOS>
<SOS>A[i][j+1]  = "+"<tab>"+"をA[i][j+1] にする<EOS>
<SOS>Check(A, i, j+1, W, H)<tab>Check(A,i,jに1を加えた値,W,H)<EOS>
<SOS>if i-1 >= 0  :<tab>iから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i-1][j] == "."  :<tab>A({{iから1を引いた値}})(j)が"."のとき、<EOS>
<SOS>A[i-1][j]  = "+"<tab>"+"をA[i-1][j] にする<EOS>
<SOS>Check(A, i-1, j, W, H)<tab>Check(A,iから1を引いた値,j,W,H)<EOS>
<SOS>return (A)<tab>(A)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>W, H  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にWとHとする<EOS>
<SOS>if W == 0 and H == 0  :<tab>Wが0、かつHが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>Tile = [list(input()) for i in range(H)]<tab>{{0からH未満までの数列}}の各要素をiとし、入力された文字列のリストの列をTileとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile[i][j] == "@"  :<tab>Tile(i)(j)が"@"のとき、<EOS>
<SOS>my_i = i<tab>iをmy_iとする<EOS>
<SOS>my_j = j<tab>jをmy_jとする<EOS>
<SOS>Tile[my_i][my_j]  = "+"<tab>"+"をTile[my_i][my_j] にする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile_new[i][j] == "+"  :<tab>Tile_new(i)(j)が"+"のとき、<EOS>
<SOS>print(count<tab>countを出力する<EOS>
<SOS>print(int(input()) * 32)<tab>入力された文字列の整数値に32を掛けた値を出力する<EOS>
<SOS>print((int(input())-30)//2)<tab>({{input()の整数値から30を引いた値}})の組を2で割った商を出力する<EOS>
<SOS>print(sum(map(int, input().split())))<tab>map(整数,{{入力された文字列を空白で分割した列}})の総和を出力する<EOS>
<SOS>print(sum(map(int,input().split()))//2)<tab>map(整数,{{input()を空白で分割した列}})の総和を2で割った商を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(abs(a - b))<tab>{{aからbを引いた値}}の絶対値を出力する<EOS>
<SOS>dic = {"1 0 0":"Close", "0 1 0":"Close", "1 1 0":"Open", "0 0 1":"Open", "0 0 0":"Close"}<tab>(("1 0 0", "Close")、("0 1 0", "Close")、("1 1 0", "Open")、("0 0 1", "Open")、("0 0 0", "Close"))からなる辞書をdicとする<EOS>
<SOS>print(dic[input()])<tab>dic(入力された文字列)を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a * b / 3.305785)<tab>{{aにbを掛けた値}}を3.305785で割った値を出力する<EOS>
<SOS>lst = sorted(list(map(int, input().split())))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをソートした列をlstとする<EOS>
<SOS>if lst[0] == lst[1] and lst[2] == lst[3] :<tab>lst(0)がlst(1)、かつlst(2)がlst(3)のとき、<EOS>
<SOS>print("yes")<tab>"yes"を出力する<EOS>
<SOS>n, a, b, c, d  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、a、b、c、dとする<EOS>
<SOS>print(min(ceil(n / a) * b, ceil(n / c) * d))<tab>{{ceil({{nをaで割った値}})にbを掛けた値}}と{{ceil({{nをcで割った値}})にdを掛けた値}}の最小値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>if c % a and c // a < 7 :<tab>cをaで割った余り、かつ{{cをaで割った商}}が7より小さいとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>dic = {1:6000, 2:4000, 3:3000, 4:2000}<tab>((1, 6000)、(2, 4000)、(3, 3000)、(4, 2000))からなる辞書をdicとする<EOS>
<SOS>for _  in range(4) :<tab>0から4未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>t, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にtとnとする<EOS>
<SOS>print(dic[t] * n)<tab>dic(t)にnを掛けた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>for _  in range(7) :<tab>0から7未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>put_dif()<tab>put_dif()<EOS>
<SOS>for _  in range(9) :<tab>0から9未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>name, v1, v2  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にname、v1、v2とする<EOS>
<SOS>print(name, int(v1) + int(v2), int(v1) * 200 + int(v2) * 300)<tab>name、v1の整数値にv2の整数値を加えた値、{{v1の整数値に200を掛けた値}}に{{v2の整数値に300を掛けた値}}を加えた値を出力する<EOS>
<SOS>print(sum([int(input()) for _ in range(10)]))<tab>{{{{0から10未満までの数列}}の各要素を_とし、input()の整数値の列}}の総和を出力する<EOS>
<SOS>input()<tab>入力された文字列<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>a = 100000<tab>100000をaとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = a * 1.05<tab>aに1.05を掛けた値をaとする<EOS>
<SOS>b = 0<tab>0をbとする<EOS>
<SOS>if a % 1000 :<tab>aを1000で割った余りのとき、<EOS>
<SOS>b = 1000<tab>1000をbとする<EOS>
<SOS>a = int(a // 1000 * 1000 + b)<tab>{{{{aを1000で割った商}}に1000を掛けた値}}にbを加えた値の整数値をaとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>[print(str(i)+"x"+str(j)+"="+str(i*j))for i in range(1,10)for j in range(1,10)]<tab>{{{{1から10未満までの数列}}の各要素をjとし、{{1から10未満までの数列}}の列}}の各要素をiとし、{{{{str(i)+"x"+str(j)に"="を加えた値}}にi*jの文字列を加えた値}}を出力するの列<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(sum(sorted([int(input()) for _ in range(n)])[1:-1]) // (n - 2))<tab>{{{{[int(input()) for _ in range(n)]をソートした列}}の位置1から位置-1までの部分}}の総和を({{nから2を引いた値}})の組で割った商を出力する<EOS>
<SOS>print(sum([max(int(input()),40) for _ in range(5)]) // 5)<tab>{{range(5)の各要素を_とし、max(int(input()),40) の列}}の総和を5で割った商を出力する<EOS>
<SOS>print(sum(sorted([int(input()) for _ in range(4)])[1:]) + max(int(input()), int(input())))<tab>{{{{[int(input()) for _ in range(4)]をソートした列}}の先頭を除いた部分}}の総和に入力された文字列の整数値と入力された文字列の整数値の最大値を加えた値を出力する<EOS>
<SOS>lst = []<tab>空列をlstとする<EOS>
<SOS>for i  in range(10) :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>return sum(lst[-3:])<tab>lstの先頭-3個を取り除いた部分の総和を関数出力とする<EOS>
<SOS>print(func(),func())<tab>func()とfunc()を出力する<EOS>
<SOS>lst = [i + 1 for i in range(30)]<tab>{{0から30未満までの数列}}の各要素をiとし、{{iに1を加えた値}}の列をlstとする<EOS>
<SOS>for _  in range(28) :<tab>0から28未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>lst[int(input()) - 1]  = 0<tab>0をlst[int(input()) - 1] にする<EOS>
<SOS>for i  in lst :<tab>lstの各要素を順にiとして、繰り返す<EOS>
<SOS>if i :<tab>iのとき、<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n,k  = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとkとする<EOS>
<SOS>if n == 0 and k == 0 :<tab>nが0、かつkが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = []<tab>空列をlstとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(k) :<tab>0からk未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>ans = count<tab>countをansとする<EOS>
<SOS>for i  in range(k, n) :<tab>kからn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>ans = max(ans,count)<tab>ansとcountの最大値をansとする<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>if __name__ == '__main__' :<tab>識別子が'__main__'のとき、<EOS>
<SOS>mountains = [int(input()) for _ in range(10)]<tab>{{0から10未満までの数列}}の各要素を_とし、入力された文字列の整数値の列をmountainsとする<EOS>
<SOS>for i  in range(3) :<tab>0から3未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(mountains[i])<tab>mountains(i)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>dic = defaultdict(int)<tab>defaultdict(整数)をdicとする<EOS>
<SOS>for _  in range(n) :<tab>0からn未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>for i  in range(10) :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if dic[i] != 0 :<tab>dic(i)が0と等しくないとき、<EOS>
<SOS>print(dic[i] * "*")<tab>dic(i)に"*"を掛けた値を出力する<EOS>
<SOS>print(input().upper())<tab>入力された文字列を英大文字に変換した文字列を出力する<EOS>
<SOS>d = Counter(list("KUPC" + input()))<tab>Counter({{"KUPC"に入力された文字列を加えた値}}のリスト)をdとする<EOS>
<SOS>print(min(d["K"], d["U"], d["P"], d["C"]) - 1)<tab>d("K")、d("U")、d("P")、d("C")の最小値から1を引いた値を出力する<EOS>
<SOS>pa = pb = 0<tab>0をpbとするをpaとする<EOS>
<SOS>for c  in r[1:] :<tab>rの先頭を除いた部分の各要素を順にcとして、繰り返す<EOS>
<SOS>if c == "A" :<tab>cが"A"のとき、<EOS>
<SOS>if pa < pb :<tab>paがpbより小さいとき、<EOS>
<SOS>print(pa, pb + 1)<tab>paとpbに1を加えた値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>r1 = input()<tab>入力された文字列をr1とする<EOS>
<SOS>if r1 == "0" :<tab>r1が"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>judge(r1)<tab>judge(r1)<EOS>
<SOS>judge(input())<tab>judge(入力された文字列)<EOS>
<SOS>judge(input())<tab>judge(入力された文字列)<EOS>
<SOS>ret = []<tab>空列をretとする<EOS>
<SOS>for i  in range(2, int(n ** (1 / 2)) + 1) :<tab>2からnの(1 / 2)の組乗の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i > n :<tab>iがnより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while n % i == 0 :<tab>nをiで割った余りが0の間、繰り返す<EOS>
<SOS>if n != 1 :<tab>nが1と等しくないとき、<EOS>
<SOS>return ret<tab>retを関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(str(n)+": ",end="")<tab>nの文字列に": "を加えた値と((end, ""))からなる辞書を出力する<EOS>
<SOS>print(*soinnsuubunnkai(n))<tab>*(soinnsuubunnkai(n))を出力する<EOS>
<SOS>MOD = 1000000007<tab>1000000007をMODとする<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>print(pow(m, n, MOD))<tab>mのn乗に対するMODの剰余を出力する<EOS>
<SOS>if v2 == 0 :<tab>v2が0のとき、<EOS>
<SOS>return (v1, counter)<tab>(v1とcounter)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == 0 :<tab>aが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a, b  = max(a, b), min(a, b)<tab>aとbの最大値とaとbの最小値をaとbとする<EOS>
<SOS>print(*euclid_gcd(a, b, 0))<tab>*(euclid_gcd(a,b,0))を出力する<EOS>
<SOS>return x * y // gcd(x, y)<tab>xにyを掛けた値をgcd(x,y)で割った商を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>alst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをalstとする<EOS>
<SOS>print(reduce(lcm, alst))<tab>reduce(lcm,alst)を出力する<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>while n > 1 :<tab>nが1より大きい間、繰り返す<EOS>
<SOS>if n % 2 :<tab>nを2で割った余りのとき、<EOS>
<SOS>n = n * 3 + 1<tab>nに3を掛けた値に1を加えた値をnとする<EOS>
<SOS>while n % 2 == 0 :<tab>nを2で割った余りが0の間、繰り返す<EOS>
<SOS>n = n // 2<tab>nを2で割った商をnとする<EOS>
<SOS>return cnt<tab>cntを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(coll(n))<tab>coll(n)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>if q == -1 :<tab>qが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = q / 2<tab>qを2で割った値をxとする<EOS>
<SOS>end = q * 10 ** -5<tab>qに10の-5乗を掛けた値をendとする<EOS>
<SOS>while abs(x ** 3 - q) >= end :<tab>{{xの3乗からqを引いた値}}の絶対値がend以上の間、繰り返す<EOS>
<SOS>x = (2 * x ** 3 + q) / (3 * x ** 2)<tab>({{{{2にxの3乗を掛けた値}}にqを加えた値}})の組を({{3にxの2乗を掛けた値}})の組で割った値をxとする<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>ss = input()<tab>入力された文字列をssとする<EOS>
<SOS>ss = ss.replace(",", " ")<tab>ss内の","を" "で置き換えた文字列をssとする<EOS>
<SOS>ss = ss.replace(".", " ")<tab>ss内の"."を" "で置き換えた文字列をssとする<EOS>
<SOS>print(*[s for s in ss.split() if 3 <= len(s) <= 6])<tab>*({{{{ssを空白で分割した列}}の各要素をsとし、{{3 <= len(s) が6以下の}}ときのsの列}})を出力する<EOS>
<SOS>print(input()[::-1])<tab>入力された文字列の逆順を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>base = ord("A")<tab>"A"の順序数をbaseとする<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>ans = ""<tab>""をansとする<EOS>
<SOS>for i  in s :<tab>sの各要素を順にiとして、繰り返す<EOS>
<SOS>ans = ans + chr((ord(i) - base - 3) % 26 + base)<tab>ansに文字コード{{{{(ord(i) - base - 3)の組を26で割った余り}}にbaseを加えた値}}の文字を加えた値をansとする<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>lst = input().split()<tab>入力された文字列を空白で分割した列をlstとする<EOS>
<SOS>dic = Counter(lst)<tab>Counter(lst)をdicとする<EOS>
<SOS>most_common = dic.most_common(1)[0][0]<tab>dic.most_common(1)の最初値の最初値をmost_commonとする<EOS>
<SOS>length = max([len(s) for s in lst])<tab>{{lstの各要素をsとし、sの長さの列}}の最大値をlengthとする<EOS>
<SOS>for s  in lst :<tab>lstの各要素を順にsとして、繰り返す<EOS>
<SOS>if len(s) == length :<tab>sの長さがlengthのとき、<EOS>
<SOS>longest = s<tab>sをlongestとする<EOS>
<SOS>print(most_common, longest)<tab>most_commonとlongestを出力する<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>s = s.replace("apple", "X")<tab>s内の"apple"を"X"で置き換えた文字列をsとする<EOS>
<SOS>s = s.replace("peach", "apple")<tab>s内の"peach"を"apple"で置き換えた文字列をsとする<EOS>
<SOS>s = s.replace("X", "peach")<tab>s内の"X"を"peach"で置き換えた文字列をsとする<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>nums = [str(i) for i in range(10)]<tab>{{0から10未満までの数列}}の各要素をiとし、iの文字列の列をnumsとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>alst = [int(input()) for _ in range(n)]<tab>{{0からn未満までの数列}}の各要素を_とし、入力された文字列の整数値の列をalstとする<EOS>
<SOS>blst = [int(input()) for _ in range(m)]<tab>{{0からm未満までの数列}}の各要素を_とし、入力された文字列の整数値の列をblstとする<EOS>
<SOS>suma = sum(alst)<tab>alstの総和をsumaとする<EOS>
<SOS>sumb = sum(blst)<tab>blstの総和をsumbとする<EOS>
<SOS>for a  in alst :<tab>alstの各要素を順にaとして、繰り返す<EOS>
<SOS>for b  in blst :<tab>blstの各要素を順にbとして、繰り返す<EOS>
<SOS>if (a - b) * 2 == suma - sumb :<tab>({{aからbを引いた値}})の組に2を掛けた値がsumaからsumbを引いた値のとき、<EOS>
<SOS>print(a, b)<tab>aとbを出力する<EOS>
<SOS>return<tab>関数処理を中断する<EOS>
<SOS>print(-1)<tab>-1を出力する<EOS>
<SOS>search()<tab>search()<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>items = sorted(list(map(int, input().split())))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをソートした列をitemsとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(n - 1) :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>p1 = items[i]<tab>items(i)をp1とする<EOS>
<SOS>for j  in range(i + 1, n) :<tab>iに1を加えた値からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>p2 = p1 + items[j]<tab>p1にitems(j)を加えた値をp2とする<EOS>
<SOS>if p2 > m :<tab>p2がmより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans < p2 :<tab>ansがp2より小さいとき、<EOS>
<SOS>ans = p2<tab>p2をansとする<EOS>
<SOS>if ans != 0 :<tab>ansが0と等しくないとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>alst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをalstとする<EOS>
<SOS>ave = sum(alst) / n<tab>alstの総和をnで割った値をaveとする<EOS>
<SOS>print(sum(a <= ave for a in alst))<tab>{{alstの各要素をaとし、{{aがave以下かどうか}}の列}}の総和を出力する<EOS>
<SOS>n, t, e  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、t、eとする<EOS>
<SOS>xlst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをxlstとする<EOS>
<SOS>for i, x  in enumerate(xlst) :<tab> xlstに番号を付けた列の各要素を順にiとxとして、繰り返す<EOS>
<SOS>a = (t - e - 1) // x<tab>({{{{tからeを引いた値}}から1を引いた値}})の組をxで割った商をaとする<EOS>
<SOS>if (a + 1) * x <= t + e :<tab>({{aに1を加えた値}})の組にxを掛けた値がtにeを加えた値以下のとき、<EOS>
<SOS>print(i + 1)<tab>iに1を加えた値を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>dic = {"0":"0", "1":"1", "2":"2", "3":"3", "4":"5", "5":"7", "6":"8", "7":"9"}<tab>(("0", "0")、("1", "1")、("2", "2")、("3", "3")、("4", "5")、("5", "7")、("6", "8")、("7", "9"))からなる辞書をdicとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>return "0"<tab>"0"を関数出力とする<EOS>
<SOS>acc = ""<tab>""をaccとする<EOS>
<SOS>while n :<tab>nの間、繰り返す<EOS>
<SOS>return acc[::-1]<tab>accの逆順を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(trans(n))<tab>trans(n)を出力する<EOS>
<SOS>d, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にdとlとする<EOS>
<SOS>print(d // l + d % l)<tab>{{dをlで割った商}}に{{dをlで割った余り}}を加えた値を出力する<EOS>
<SOS>lst = []<tab>空列をlstとする<EOS>
<SOS>for h  in range(1, 151) :<tab>1から151未満までの数列の各要素を順にhとして、繰り返す<EOS>
<SOS>for w  in range(h + 1, 151) :<tab>hに1を加えた値から151未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>h, w  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にhとwとする<EOS>
<SOS>if h == 0 :<tab>hが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ind = lst.index((h ** 2 + w ** 2, h, w))<tab>lst.index((h ** 2 + w ** 2, h, w))をindとする<EOS>
<SOS>print(*lst[ind + 1][1:])<tab>*({{lst({{indに1を加えた値}})の先頭を除いた部分}})を出力する<EOS>
<SOS>m = int(input())<tab>入力された文字列の整数値をmとする<EOS>
<SOS>for _  in range(m) :<tab>0からm未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>ss = set()<tab>集合をssとする<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>length = len(s)<tab>sの長さをlengthとする<EOS>
<SOS>for i  in range(1, length) :<tab>1からlength未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>left = s[:i]<tab>sの位置先頭から位置iまでの部分をleftとする<EOS>
<SOS>right = s[i:]<tab>sの先頭i個を取り除いた部分をrightとする<EOS>
<SOS>print(len(ss))<tab>ssの長さを出力する<EOS>
<SOS>score = 0<tab>0をscoreとする<EOS>
<SOS>for i  in range(1, 7) :<tab>1から7未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(7, 12) :<tab>7から12未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>last = 11 - score % 11<tab>11からscoreを11で割った余りを引いた値をlastとする<EOS>
<SOS>if str(last) == fixed_number[0] or (last >= 10 and fixed_number[0] == "0") :<tab>lastの文字列がfixed_number(0)、または({{lastが10以上}}、かつ{{fixed_number(0)が"0"かどうか}})の組のとき、<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>index = s.index("?")<tab>s.index("?")をindexとする<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for i  in range(10) :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c = str(i)<tab>iの文字列をcとする<EOS>
<SOS>fixed_number = s[:index] + c + s[index + 1:]<tab>{{sの位置先頭から位置indexまでの部分}}にcを加えた値にsの先頭{{indexに1を加えた値}}個を取り除いた部分を加えた値をfixed_numberとする<EOS>
<SOS>if is_collect(fixed_number) :<tab>is_collect(fixed_number)のとき、<EOS>
<SOS>ret = i<tab>iをretとする<EOS>
<SOS>if cnt == 1 :<tab>cntが1のとき、<EOS>
<SOS>return ret<tab>retを関数出力とする<EOS>
<SOS>ans = check(input()[::-1])<tab>check(入力された文字列の逆順)をansとする<EOS>
<SOS>print(ans if ans != None else "MULTIPLE")<tab>{{ansが未定値と等しくない}}ときans、そうでなければ"MULTIPLE"を出力する<EOS>
<SOS>INF = 10 ** 10<tab>10の10乗をINFとする<EOS>
<SOS>dic = {}<tab>空辞書をdicとする<EOS>
<SOS>for i  in range(10) :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>dic[str(i)]  = i<tab>iをdic[str(i)] にする<EOS>
<SOS>for i  in range(ord("a"), ord("f") + 1) :<tab>"a"の順序数から"f"の順序数に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>dic[chr(i)]  = i - ord("a") + 10<tab>iから"a"の順序数を引いた値に10を加えた値をdic[chr(i)] にする<EOS>
<SOS>return dic[s[0]] * 16 + dic[s[1]]<tab>dic(sの最初値)に16を掛けた値にdic(s(1))を加えた値を関数出力とする<EOS>
<SOS>colors = [("black",   list(map(hex_to_dec, ["00", "00", "00"]))), ("blue",    list(map(hex_to_dec, ["00", "00", "ff"]))), ("lime",    list(map(hex_to_dec, ["00", "ff", "00"]))), ("aqua",    list(map(hex_to_dec, ["00", "ff", "ff"]))), ("red",     list(map(hex_to_dec, ["ff", "00", "00"]))), ("fuchsia", list(map(hex_to_dec, ["ff", "00", "ff"]))), ("yellow",  list(map(hex_to_dec, ["ff", "ff", "00"]))), ("white",   list(map(hex_to_dec, ["ff", "ff", "ff"])))]<tab>(("black"とmap(hex_to_dec,("00"、"00"、"00")からなる列)のリスト)の組、("blue"とmap(hex_to_dec,("00"、"00"、"ff")からなる列)のリスト)の組、("lime"とmap(hex_to_dec,("00"、"ff"、"00")からなる列)のリスト)の組、("aqua"とmap(hex_to_dec,("00"、"ff"、"ff")からなる列)のリスト)の組、("red"とmap(hex_to_dec,("ff"、"00"、"00")からなる列)のリスト)の組、("fuchsia"とmap(hex_to_dec,("ff"、"00"、"ff")からなる列)のリスト)の組、("yellow"とmap(hex_to_dec,("ff"、"ff"、"00")からなる列)のリスト)の組、("white"とmap(hex_to_dec,("ff"、"ff"、"ff")からなる列)のリスト)の組)からなる列をcolorsとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>if s == "0" :<tab>sが"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>r, g, b  = map(hex_to_dec, [s[1:3], s[3:5], s[5:7]])<tab>map(hex_to_dec,({{sの位置1から位置3までの部分}}、{{sの位置3から位置5までの部分}}、{{sの位置5から位置7までの部分}})からなる列)を展開し順にr、g、bとする<EOS>
<SOS>lowest_name = "KUWA"<tab>"KUWA"をlowest_nameとする<EOS>
<SOS>lowest_score = INF<tab>INFをlowest_scoreとする<EOS>
<SOS>for name, rgb  in colors :<tab>colorsの各要素を順にnameとrgbとして、繰り返す<EOS>
<SOS>rc, gc, bc  = rgb<tab>rgbを展開し順にrc、gc、bcとする<EOS>
<SOS>score = (r - rc) ** 2 + (g - gc) ** 2 + (b - bc) ** 2<tab>({{rからrcを引いた値}})の組の2乗に({{gからgcを引いた値}})の組の2乗を加えた値に({{bからbcを引いた値}})の組の2乗を加えた値をscoreとする<EOS>
<SOS>if score < lowest_score :<tab>scoreがlowest_scoreより小さいとき、<EOS>
<SOS>lowest_name, lowest_score  = name, score<tab>nameとscoreをlowest_nameとlowest_scoreとする<EOS>
<SOS>print(lowest_name)<tab>lowest_nameを出力する<EOS>
<SOS>dic = ["", "Man", "Oku", "Cho", "Kei", "Gai", "Jo", "Jou", "Ko", "Kan", "Sei", "Sai", "Gok", "Ggs", "Asg", "Nyt", "Fks", "Mts"]<tab>(""、"Man"、"Oku"、"Cho"、"Kei"、"Gai"、"Jo"、"Jou"、"Ko"、"Kan"、"Sei"、"Sai"、"Gok"、"Ggs"、"Asg"、"Nyt"、"Fks"、"Mts")からなる列をdicとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>if m == 0 :<tab>mが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = m ** n<tab>mのn乗をxとする<EOS>
<SOS>ind = 0<tab>0をindとする<EOS>
<SOS>ans = ""<tab>""をansとする<EOS>
<SOS>while x :<tab>xの間、繰り返す<EOS>
<SOS>if x % 10000 :<tab>xを10000で割った余りのとき、<EOS>
<SOS>ans = str(x % 10000) + dic[ind] + ans<tab>{{xを10000で割った余り}}の文字列にdic(ind)を加えた値にansを加えた値をansとする<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>base = ord("a")<tab>"a"の順序数をbaseとする<EOS>
<SOS>alst = [i for i in range(1, 26, 2) if i % 13]<tab>{{1から26未満までの2間隔の数列}}の各要素をiとし、{{iを13で割った余りの}}ときのiの列をalstとする<EOS>
<SOS>for a  in alst :<tab>alstの各要素を順にaとして、繰り返す<EOS>
<SOS>for b  in range(26) :<tab>0から26未満までの数列の各要素を順にbとして、繰り返す<EOS>
<SOS>new = "".join([chr((a * (ord(x) - base) + b) % 26 + base) if x != " " else " " for x in s])<tab>({{{{xが" "と等しくない}}とき文字コード{{(a * (ord(x) - base) + b) % 26 にbaseを加えた値}}の文字、そうでなければ{{sの各要素をxとし、" "の列}}}})からなる列を文字列""で連結した文字列をnewとする<EOS>
<SOS>if "that" in new or "this" in new :<tab>"that"がnewに含まれ、または"this"がnewに含まれるとき、<EOS>
<SOS>return new<tab>newを関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for _  in range(n) :<tab>0からn未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>print(restore(input()))<tab>restore(入力された文字列)を出力する<EOS>
<SOS>h, a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にh、a、bとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(a, b + 1) :<tab>aからbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if h % i == 0 :<tab>hをiで割った余りが0のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>alst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをalstとする<EOS>
<SOS>s = sum(alst)<tab>alstの総和をsとする<EOS>
<SOS>alst = [a * 2 for a in alst]<tab>alstの各要素をaとし、{{aに2を掛けた値}}の列をalstとする<EOS>
<SOS>lst = [-s]<tab>(-s)からなる列をlstとする<EOS>
<SOS>for a  in alst :<tab>alstの各要素を順にaとして、繰り返す<EOS>
<SOS>print(min(map(abs, lst)))<tab>map(abs,lst)の最小値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>INF = 10 ** 20<tab>10の20乗をINFとする<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>c_lst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをc_lstとする<EOS>
<SOS>dp = [INF for _ in range(n + 1)]<tab>{{0から{{nに1を加えた値}}未満までの数列}}の各要素を_とし、INFの列をdpとする<EOS>
<SOS>dp[0]  = 0<tab>0をdp[0] にする<EOS>
<SOS>for coin  in c_lst :<tab>c_lstの各要素を順にcoinとして、繰り返す<EOS>
<SOS>for price  in range(coin, n + 1) :<tab>coinからnに1を加えた値未満までの数列の各要素を順にpriceとして、繰り返す<EOS>
<SOS>dp[price]  = min(dp[price], dp[price - coin] + 1)<tab>dp(price)とdp({{priceからcoinを引いた値}})に1を加えた値の最小値をdp[price] にする<EOS>
<SOS>print(dp[n])<tab>dp(n)を出力する<EOS>
<SOS>n, w  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとwとする<EOS>
<SOS>value = []<tab>空列をvalueとする<EOS>
<SOS>weight = []<tab>空列をweightとする<EOS>
<SOS>for _  in range(n) :<tab>0からn未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>vi, wi  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にviとwiとする<EOS>
<SOS>dp = [0 for _ in range(w + 1)]<tab>{{0から{{wに1を加えた値}}未満までの数列}}の各要素を_とし、0の列をdpとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(w, weight[i] - 1, -1) :<tab>wからweight(i)から1を引いた値未満までの-1間隔の数列の各要素を順にjとして、繰り返す<EOS>
<SOS>dp[j]  = max(dp[j], dp[j - weight[i]] + value[i])<tab>dp(j)とdp({{jからweight(i)を引いた値}})にvalue(i)を加えた値の最大値をdp[j] にする<EOS>
<SOS>print(dp[w])<tab>dp(w)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>b = int(input())<tab>入力された文字列の整数値をbとする<EOS>
<SOS>if b == 0 :<tab>bが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = b * 2<tab>bに2を掛けた値をxとする<EOS>
<SOS>for k  in range(int(x ** (1 / 2)), 0, -1) :<tab>xの({{1を2で割った値}})の組乗の整数値から0未満までの-1間隔の数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if x % k == 0 :<tab>xをkで割った余りが0のとき、<EOS>
<SOS>if (-k + 1 + (x // k)) % 2 == 0 :<tab>({{{{-k に1を加えた値}}に(x // k)の組を加えた値}})の組を2で割った余りが0のとき、<EOS>
<SOS>a = (-k + 1 + x // k) // 2<tab>({{{{-kに1を加えた値}}に{{xをkで割った商}}を加えた値}})の組を2で割った商をaとする<EOS>
<SOS>if a > 0 :<tab>aが0より大きいとき、<EOS>
<SOS>print(a, k)<tab>aとkを出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>w, h  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にwとhとする<EOS>
<SOS>if w == 0 :<tab>wが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>mp = [[-1] + list(map(int, input().split())) + [-1] for _ in range(h)]<tab>{{0からh未満までの数列}}の各要素を_とし、{{{{(-1)からなる列にmap(int, input().split())のリストを加えた値}}に(-1)からなる列を加えた値}}の列をmpとする<EOS>
<SOS>for y  in range(1, h + 1) :<tab>1からhに1を加えた値未満までの数列の各要素を順にyとして、繰り返す<EOS>
<SOS>for x  in range(1, w + 1) :<tab>1からwに1を加えた値未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>if mp[y][x] == 2 :<tab>mp(y)(x)が2のとき、<EOS>
<SOS>start = (x, y)<tab>(xとy)の組をstartとする<EOS>
<SOS>if mp[y][x] == 3 :<tab>mp(y)(x)が3のとき、<EOS>
<SOS>goal = (x, y)<tab>(xとy)の組をgoalとする<EOS>
<SOS>vec = ((0, -1), (0, 1), (-1, 0), (1, 0))<tab>((0と-1)の組、(0と1)の組、(-1と0)の組、(1と0)の組)の組をvecとする<EOS>
<SOS>if num <= 0 :<tab>numが0以下のとき、<EOS>
<SOS>return -1<tab>-1を関数出力とする<EOS>
<SOS>bx, by  = now<tab>nowを展開し順にbxとbyとする<EOS>
<SOS>ret = -1<tab>-1をretとする<EOS>
<SOS>for dx, dy  in vec :<tab>vecの各要素を順にdxとdyとして、繰り返す<EOS>
<SOS>if mp[by + dy][bx + dx] in (-1, 1) :<tab>mp({{byにdyを加えた値}})({{bxにdxを加えた値}})が(-1と1)の組に含まれるとき、<EOS>
<SOS>continue<tab>最初からもう一度、繰り返す<EOS>
<SOS>nx, ny  = bx, by<tab>bxとbyをnxとnyとする<EOS>
<SOS>while mp[ny + dy][nx + dx] not in (-1, 1) :<tab>not in(mp({{nyにdyを加えた値}})({{nxにdxを加えた値}}),(-1と1)の組)の間、繰り返す<EOS>
<SOS>if (nx, ny) == goal :<tab>(nxとny)の組がgoalのとき、<EOS>
<SOS>ret = max(ret, num - 1)<tab>retとnumから1を引いた値の最大値をretとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>return ret<tab>retを関数出力とする<EOS>
<SOS>score = search(start, goal, 10)<tab>search(start,goal,10)をscoreとする<EOS>
<SOS>if score == -1 :<tab>scoreが-1のとき、<EOS>
<SOS>print(-1)<tab>-1を出力する<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(x ** 3)<tab>xの3乗を出力する<EOS>
<SOS>W = int(input())<tab>入力された文字列の整数値をWとする<EOS>
<SOS>print(W * 32)<tab>Wに32を掛けた値を出力する<EOS>
<SOS>F = int(input())<tab>入力された文字列の整数値をFとする<EOS>
<SOS>print((F - 30) // 2)<tab>({{Fから30を引いた値}})の組を2で割った商を出力する<EOS>
<SOS>p, m, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にp、m、cとする<EOS>
<SOS>print(p + m + c)<tab>{{pにmを加えた値}}にcを加えた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>s = a * b<tab>aにbを掛けた値をsとする<EOS>
<SOS>l = a * 2 + b * 2<tab>aに2を掛けた値にbに2を掛けた値を加えた値をlとする<EOS>
<SOS>print(s, l)<tab>sとlを出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == b  :<tab>aがbのとき、<EOS>
<SOS>print("a == b")<tab>"a == b"を出力する<EOS>
<SOS>print("a < b")<tab>"a < b"を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a < b and b < c  :<tab>aがbより小さく、かつbがcより小さいとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print((a + b) // 2)<tab>({{aにbを加えた値}})の組を2で割った商を出力する<EOS>
<SOS>x1, x2  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にx1とx2とする<EOS>
<SOS>print(abs(x1 - x2))<tab>{{x1からx2を引いた値}}の絶対値を出力する<EOS>
<SOS>B = input()<tab>入力された文字列をBとする<EOS>
<SOS>O = ["1 1 0", "0 0 1"]<tab>("1 1 0"と"0 0 1")からなる列をOとする<EOS>
<SOS>if B in O  :<tab>BがOに含まれるとき、<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>S = int(input())<tab>入力された文字列の整数値をSとする<EOS>
<SOS>h = S // 3600<tab>Sを3600で割った商をhとする<EOS>
<SOS>m = (S - h * 3600) // 60<tab>({{Sから{{hに3600を掛けた値}}を引いた値}})の組を60で割った商をmとする<EOS>
<SOS>s = S - (h * 3600 + m * 60)<tab>Sから({{{{hに3600を掛けた値}}に{{mに60を掛けた値}}を加えた値}})の組を引いた値をsとする<EOS>
<SOS>print(h, ":", m, ":", s, sep = "")<tab>h、":"、m、":"、s、((sep, ""))からなる辞書を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a < b  :<tab>aがbより小さいとき、<EOS>
<SOS>if b < c  :<tab>bがcより小さいとき、<EOS>
<SOS>print(a, b, c)<tab>a、b、cを出力する<EOS>
<SOS>print(a, c, b)<tab>a、c、bを出力する<EOS>
<SOS>if a < c  :<tab>aがcより小さいとき、<EOS>
<SOS>print(b, a, c)<tab>b、a、cを出力する<EOS>
<SOS>print(b, c, a)<tab>b、c、aを出力する<EOS>
<SOS>W, H, x, y, r  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にW、H、x、y、rとする<EOS>
<SOS>if x - r >= 0 and y - r >= 0  :<tab>{{xからrを引いた値}}が0以上、かつ{{yからrを引いた値}}が0以上のとき、<EOS>
<SOS>if x + r <= W and y + r <= H  :<tab>{{xにrを加えた値}}がW以下、かつ{{yにrを加えた値}}がH以下のとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>e1, e2, e3, e4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にe1、e2、e3、e4とする<EOS>
<SOS>E = [e1, e2, e3, e4]<tab>(e1、e2、e3、e4)からなる列をEとする<EOS>
<SOS>e = set(E)<tab>Eの集合をeとする<EOS>
<SOS>e_list = list(e)<tab>eのリストをe_listとする<EOS>
<SOS>if len(e) == 2  :<tab>eの長さが2のとき、<EOS>
<SOS>if E.count(e_list[0]) == 2  :<tab>E内のe_listの最初値の出現をカウントした整数が2のとき、<EOS>
<SOS>print("yes")<tab>"yes"を出力する<EOS>
<SOS>N, A, B, C, D  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にN、A、B、C、Dとする<EOS>
<SOS>a = N // A<tab>NをAで割った商をaとする<EOS>
<SOS>c = N // C<tab>NをCで割った商をcとする<EOS>
<SOS>if a * A < N  :<tab>aにAを掛けた値がNより小さいとき、<EOS>
<SOS>if c * C < N  :<tab>cにCを掛けた値がNより小さいとき、<EOS>
<SOS>b = a * B<tab>aにBを掛けた値をbとする<EOS>
<SOS>d = c * D<tab>cにDを掛けた値をdとする<EOS>
<SOS>if b < d  :<tab>bがdより小さいとき、<EOS>
<SOS>print(b)<tab>bを出力する<EOS>
<SOS>for i  in range(1000)  :<tab>0から1000未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>dic = {1 : 6000, 2 : 4000, 3 : 3000, 4 : 2000}<tab>((1, 6000)、(2, 4000)、(3, 3000)、(4, 2000))からなる辞書をdicとする<EOS>
<SOS>for i  in range(4)  :<tab>0から4未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>t, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にtとnとする<EOS>
<SOS>print(dic[t] * n)<tab>dic(t)にnを掛けた値を出力する<EOS>
<SOS>for i  in range(7)  :<tab>0から7未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>for i  in range(9)  :<tab>0から9未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>e, a, b  = map(str, input().split())<tab>map(str,入力された文字列を空白で分割した列)を展開し順にe、a、bとする<EOS>
<SOS>a = int(a)<tab>aの整数値をaとする<EOS>
<SOS>b = int(b)<tab>bの整数値をbとする<EOS>
<SOS>print(e, a + b, a * 200 + b * 300)<tab>e、aにbを加えた値、{{aに200を掛けた値}}に{{bに300を掛けた値}}を加えた値を出力する<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>if x == 0  :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>for i  in range(N)  :<tab>0からN未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>L = [a, b, c]<tab>(a、b、c)からなる列をLとする<EOS>
<SOS>m = L.pop(L.index(max(L)))<tab>L.pop(L.index(max(L)))をmとする<EOS>
<SOS>s = L[0] ** 2 + L[1] ** 2<tab>L(0)の2乗にL(1)の2乗を加えた値をsとする<EOS>
<SOS>if m ** 2 == s  :<tab>mの2乗がsのとき、<EOS>
<SOS>print("YES")<tab>"YES"を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>s = 100000<tab>100000をsとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>m = s % 1000<tab>sを1000で割った余りをmとする<EOS>
<SOS>if m != 0  :<tab>mが0と等しくないとき、<EOS>
<SOS>s = s - m + 1000<tab>sからmを引いた値に1000を加えた値をsとする<EOS>
<SOS>print(int(s))<tab>sの整数値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for i  in range(a, b + 1)  :<tab>aからbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if c % i == 0  :<tab>cをiで割った余りが0のとき、<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>for i  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(i, "x", j, "=", i * j, sep = "")<tab>i、"x"、j、"="、iにjを掛けた値、((sep, ""))からなる辞書を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H,W = map(int,input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H==0 and W==0 :<tab>Hが0、かつWが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>for i  in range(H) :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W) :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print("#",end="")<tab>"#"と((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H, W  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == 0  :<tab>Hが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H, W  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == 0  :<tab>Hが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, op, b  = map(str, input().split())<tab>map(str,入力された文字列を空白で分割した列)を展開し順にa、op、bとする<EOS>
<SOS>a = int(a)<tab>aの整数値をaとする<EOS>
<SOS>b = int(b)<tab>bの整数値をbとする<EOS>
<SOS>if op == "?"  :<tab>opが"?"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>A = [int(a) for a in input().split()]<tab>{{入力された文字列を空白で分割した列}}の各要素をaとし、aの整数値の列をAとする<EOS>
<SOS>print(min(A), max(A), sum(A))<tab>Aの最小値、Aの最大値、Aの総和を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>P = []<tab>空列をPとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>A = [int(a) for a in input().split()]<tab>{{入力された文字列を空白で分割した列}}の各要素をaとし、aの整数値の列をAとする<EOS>
<SOS>for i  in range(n - 1, -1, -1)  :<tab>nから1を引いた値から-1未満までの-1間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i == 0  :<tab>iが0のとき、<EOS>
<SOS>print(A[i])<tab>A(i)を出力する<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for i  in range(5)  :<tab>0から5未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>p = int(input())<tab>入力された文字列の整数値をpとする<EOS>
<SOS>if p < 40  :<tab>pが40より小さいとき、<EOS>
<SOS>print(s // 5)<tab>sを5で割った商を出力する<EOS>
<SOS>Si = []<tab>空列をSiとする<EOS>
<SOS>So = []<tab>空列をSoとする<EOS>
<SOS>for i  in range(4)  :<tab>0から4未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>p = int(input())<tab>入力された文字列の整数値をpとする<EOS>
<SOS>for j  in range(2)  :<tab>0から2未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>p = int(input())<tab>入力された文字列の整数値をpとする<EOS>
<SOS>s = sum(Si) - min(Si) + sum(So) - min(So)<tab>{{Siの総和からSiの最小値を引いた値}}にSoの総和を加えた値からSoの最小値を引いた値をsとする<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>W = []<tab>空列をWとする<EOS>
<SOS>K = []<tab>空列をKとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(10)  :<tab>0から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>Ws = sorted(W, reverse = True)<tab>Wと((reverse, 真))からなる辞書をソートした列をWsとする<EOS>
<SOS>Ks = sorted(K, reverse = True)<tab>Kと((reverse, 真))からなる辞書をソートした列をKsとする<EOS>
<SOS>w = 0<tab>0をwとする<EOS>
<SOS>k = 0<tab>0をkとする<EOS>
<SOS>for i  in range(3)  :<tab>0から3未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(w, k)<tab>wとkを出力する<EOS>
<SOS>A = [i for i in range(1, 31)]<tab>{{1から31未満までの数列}}の各要素をiとし、iの列をAとする<EOS>
<SOS>N = []<tab>空列をNとする<EOS>
<SOS>for i  in range(28)  :<tab>0から28未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>R = list(set(A) - set(N))<tab>Aの集合からNの集合を引いた値のリストをRとする<EOS>
<SOS>print(min(R))<tab>Rの最小値を出力する<EOS>
<SOS>print(max(R))<tab>Rの最大値を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>X = [int(x) for x in input().split()]<tab>{{入力された文字列を空白で分割した列}}の各要素をxとし、xの整数値の列をXとする<EOS>
<SOS>sub = max(X) - min(X)<tab>Xの最大値からXの最小値を引いた値をsubとする<EOS>
<SOS>if sub % 2 == 0  :<tab>subを2で割った余りが0のとき、<EOS>
<SOS>print(sub // 2)<tab>subを2で割った商を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, k  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとkとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>M = []<tab>空列をMとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>Ms = sorted(M, reverse = True)<tab>Mと((reverse, 真))からなる辞書をソートした列をMsとする<EOS>
<SOS>for j  in range(3)  :<tab>0から3未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(Ms[j])<tab>Ms(j)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(input().upper())<tab>入力された文字列を英大文字に変換した文字列を出力する<EOS>
<SOS>print(input().swapcase())<tab>入力された文字列の英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>a = "abcdefghijklmnopqrstuvwxyz"<tab>"abcdefghijklmnopqrstuvwxyz"をaとする<EOS>
<SOS>A = [0 for i in range(26)]<tab>{{0から26未満までの数列}}の各要素をiとし、0の列をAとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>for j  in range(26)  :<tab>0から26未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(a[j], ":", A[j])<tab>a(j)、":"、A(j)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>if n == "0"  :<tab>nが"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>KUPC = ["K", "U", "P", "C"]<tab>("K"、"U"、"P"、"C")からなる列をKUPCとする<EOS>
<SOS>kupc = [0 for i in range(4)]<tab>{{0から4未満までの数列}}の各要素をiとし、0の列をkupcとする<EOS>
<SOS>for i  in range(len(n))  :<tab>0からnの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if n[i] in KUPC  :<tab>n(i)がKUPCに含まれるとき、<EOS>
<SOS>print(min(kupc))<tab>kupcの最小値を出力する<EOS>
<SOS>W = input()<tab>入力された文字列をWとする<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>t = input()<tab>入力された文字列をtとする<EOS>
<SOS>if t == "END_OF_TEXT"  :<tab>tが"END_OF_TEXT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>p = input()<tab>入力された文字列をpとする<EOS>
<SOS>S = s * 2<tab>sに2を掛けた値をSとする<EOS>
<SOS>if p in S  :<tab>pがSに含まれるとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>T = input()<tab>入力された文字列をTとする<EOS>
<SOS>P = input()<tab>入力された文字列をPとする<EOS>
<SOS>l = len(P)<tab>Pの長さをlとする<EOS>
<SOS>for i  in range(len(T) - l + 1)  :<tab>0から{{Tの長さからlを引いた値}}に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if T[i : i + l] == P  :<tab>Tの位置iから位置{{iにlを加えた値}}までの部分がPのとき、<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>C = input()<tab>入力された文字列をCとする<EOS>
<SOS>if C == "-"  :<tab>Cが"-"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>t = 0<tab>0をtとする<EOS>
<SOS>h = 0<tab>0をhとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>T, H  = map(str, input().split())<tab>map(str,入力された文字列を空白で分割した列)を展開し順にTとHとする<EOS>
<SOS>if T > H  :<tab>TがHより大きいとき、<EOS>
<SOS>print(t, h)<tab>tとhを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>d1 = input()<tab>入力された文字列をd1とする<EOS>
<SOS>if d1 == "0"  :<tab>d1が"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, f, r  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にm、f、rとする<EOS>
<SOS>if m == -1 and f == -1 and r == -1  :<tab>{{mが-1}}、かつ{{fが-1かどうか}}、かつrが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, x  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとxとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = [i for i in range(1, 14)]<tab>{{1から14未満までの数列}}の各要素をiとし、iの列をSとする<EOS>
<SOS>H = [i for i in range(1, 14)]<tab>{{1から14未満までの数列}}の各要素をiとし、iの列をHとする<EOS>
<SOS>C = [i for i in range(1, 14)]<tab>{{1から14未満までの数列}}の各要素をiとし、iの列をCとする<EOS>
<SOS>D = [i for i in range(1, 14)]<tab>{{1から14未満までの数列}}の各要素をiとし、iの列をDとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>m, r  = map(str, input().split())<tab>map(str,入力された文字列を空白で分割した列)を展開し順にmとrとする<EOS>
<SOS>if m == "S"  :<tab>mが"S"のとき、<EOS>
<SOS>S.remove(int(r))<tab>Sからrの整数値を取り除いた集まり<EOS>
<SOS>H.remove(int(r))<tab>Hからrの整数値を取り除いた集まり<EOS>
<SOS>C.remove(int(r))<tab>Cからrの整数値を取り除いた集まり<EOS>
<SOS>if len(S) > 0  :<tab>Sの長さが0より大きいとき、<EOS>
<SOS>for i  in range(len(S))  :<tab>0からSの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print("S", S[i])<tab>"S"とS(i)を出力する<EOS>
<SOS>if len(H) > 0  :<tab>Hの長さが0より大きいとき、<EOS>
<SOS>for i  in range(len(H))  :<tab>0からHの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print("H", H[i])<tab>"H"とH(i)を出力する<EOS>
<SOS>if len(C) > 0  :<tab>Cの長さが0より大きいとき、<EOS>
<SOS>for i  in range(len(C))  :<tab>0からCの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print("C", C[i])<tab>"C"とC(i)を出力する<EOS>
<SOS>if len(D) > 0  :<tab>Dの長さが0より大きいとき、<EOS>
<SOS>for i  in range(len(D))  :<tab>0からDの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print("D", D[i])<tab>"D"とD(i)を出力する<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>A = []<tab>空列をAとする<EOS>
<SOS>B = []<tab>空列をBとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(m)  :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>C = []<tab>空列をCとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>for j  in range(m)  :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(C[i])<tab>C(i)を出力する<EOS>
<SOS>n, m, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、lとする<EOS>
<SOS>A = []<tab>空列をAとする<EOS>
<SOS>B = []<tab>空列をBとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(m)  :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>C = []<tab>空列をCとする<EOS>
<SOS>L = []<tab>空列をLとする<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for i  in range(l)  :<tab>0からl未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(n)  :<tab>0からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for k  in range(m)  :<tab>0からm未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(l)  :<tab>0からl未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if j == l - 1  :<tab>jがlから1を引いた値のとき、<EOS>
<SOS>print(C[j][i])<tab>C(j)(i)を出力する<EOS>
<SOS>r, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にrとcとする<EOS>
<SOS>A = []<tab>空列をAとする<EOS>
<SOS>for i  in range(r)  :<tab>0からr未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>S = []<tab>空列をSとする<EOS>
<SOS>for i  in range(c + 1)  :<tab>0からcに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for j  in range(r)  :<tab>0からr未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for i  in range(r + 1)  :<tab>0からrに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(c + 1)  :<tab>0からcに1を加えた値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if j == c  :<tab>jがcのとき、<EOS>
<SOS>print(A[i][j])<tab>A(i)(j)を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>nn = n<tab>nをnnとする<EOS>
<SOS>N = []<tab>空列をNとする<EOS>
<SOS>print(n, ":", sep = "", end = " ")<tab>n、":"、((sep, "")と(end, " "))からなる辞書を出力する<EOS>
<SOS>if n % 2 == 0  :<tab>nを2で割った余りが0のとき、<EOS>
<SOS>while n % 2 == 0  :<tab>nを2で割った余りが0の間、繰り返す<EOS>
<SOS>for i  in range(3, int(nn ** (1 / 2)) + 1, 2)  :<tab>3からnnの(1 / 2)の組乗の整数値に1を加えた値未満までの2間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>while n % i == 0  :<tab>nをiで割った余りが0の間、繰り返す<EOS>
<SOS>if n != 1  :<tab>nが1と等しくないとき、<EOS>
<SOS>if len(N) == 0  :<tab>Nの長さが0のとき、<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>print(pow(m, n, mod))<tab>mのn乗に対するmodの剰余を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == 0  :<tab>aが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>A = [int(a) for a in input().split()]<tab>{{入力された文字列を空白で分割した列}}の各要素をaとし、aの整数値の列をAとする<EOS>
<SOS>ans = A[0]<tab>Aの最初値をansとする<EOS>
<SOS>for i  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>ans = ans * A[i] // math.gcd(ans, A[i])<tab>ansにA(i)を掛けた値をmath.gcd(ans, A[i])で割った商をansとする<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>x, y  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>print(math.gcd(x, y))<tab>math.gcd(x, y)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for i  in range(2, int(math.sqrt(a)) + 1)  :<tab>2からmath.sqrt(a)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if a % i == 0  :<tab>aをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if prime(int(input()))  :<tab>prime(入力された文字列の整数値)のとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>import re<tab>reモジュールを用いる<EOS>
<SOS>I = input().split()<tab>入力された文字列を空白で分割した列をIとする<EOS>
<SOS>S = []<tab>空列をSとする<EOS>
<SOS>for i  in range(len(I))  :<tab>0からIの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>I[i]  = re.split("[,.]", I[i])<tab>文字列I(i)を正規表現"[,.]"で分割した文字列リストをI[i] にする<EOS>
<SOS>if 2 < len(I[i][0]) and len(I[i][0]) < 7  :<tab>2がI(i)の最初値の長さより小さく、かつI(i)の最初値の長さが7より小さいとき、<EOS>
<SOS>for i  in range(len(S))  :<tab>0からSの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i == len(S) - 1  :<tab>iがSの長さから1を引いた値のとき、<EOS>
<SOS>print(S[i])<tab>S(i)を出力する<EOS>
<SOS>S = input()<tab>入力された文字列をSとする<EOS>
<SOS>cnt = -1<tab>-1をcntとする<EOS>
<SOS>for i  in range(len(S))  :<tab>0からSの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i == len(S) - 1  :<tab>iがSの長さから1を引いた値のとき、<EOS>
<SOS>print(S[0])<tab>Sの最初値を出力する<EOS>
<SOS>A = [chr(i) for i in range(65, 65 + 26)]<tab>{{65から{{65に26を加えた値}}未満までの数列}}の各要素をiとし、文字コードiの文字の列をAとする<EOS>
<SOS>D = [chr(i) for i in range(68, 68 + 23)]<tab>{{68から{{68に23を加えた値}}未満までの数列}}の各要素をiとし、文字コードiの文字の列をDとする<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>ANS = []<tab>空列をANSとする<EOS>
<SOS>for i  in range(len(n))  :<tab>0からnの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(len(ANS))  :<tab>0からANSの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i == len(ANS) - 1  :<tab>iがANSの長さから1を引いた値のとき、<EOS>
<SOS>print(ANS[i])<tab>ANS(i)を出力する<EOS>
<SOS>S = input().split()<tab>入力された文字列を空白で分割した列をSとする<EOS>
<SOS>l = 0<tab>0をlとする<EOS>
<SOS>n = 0<tab>0をnとする<EOS>
<SOS>L = "a"<tab>"a"をLとする<EOS>
<SOS>N = "a"<tab>"a"をNとする<EOS>
<SOS>for i  in range(len(S))  :<tab>0からSの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if S.count(S[i]) > n  :<tab>S内のS(i)の出現をカウントした整数がnより大きいとき、<EOS>
<SOS>n = S.count(S[i])<tab>S内のS(i)の出現をカウントした整数をnとする<EOS>
<SOS>N = S[i]<tab>S(i)をNとする<EOS>
<SOS>for i  in range(len(S))  :<tab>0からSの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if len(S[i]) > l  :<tab>S(i)の長さがlより大きいとき、<EOS>
<SOS>l = len(S[i])<tab>S(i)の長さをlとする<EOS>
<SOS>L = S[i]<tab>S(i)をLとする<EOS>
<SOS>print(N, L)<tab>NとLを出力する<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>S = []<tab>空列をSとする<EOS>
<SOS>a = "apple"<tab>"apple"をaとする<EOS>
<SOS>p = "peach"<tab>"peach"をpとする<EOS>
<SOS>A = []<tab>空列をAとする<EOS>
<SOS>P = []<tab>空列をPとする<EOS>
<SOS>for i  in range(len(s))  :<tab>0からsの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(5)  :<tab>0から5未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(len(S))  :<tab>0からSの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if S[i : i + 5] == A  :<tab>Sの位置iから位置{{iに5を加えた値}}までの部分がAのとき、<EOS>
<SOS>S[i : i + 5]  = P<tab>PをS[i : i + 5] にする<EOS>
<SOS>S[i : i + 5]  = A<tab>AをS[i : i + 5] にする<EOS>
<SOS>for i  in range(len(S))  :<tab>0からSの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i == len(S) - 1  :<tab>iがSの長さから1を引いた値のとき、<EOS>
<SOS>print(S[i])<tab>S(i)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y, s  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にx、y、sとする<EOS>
<SOS>if x == 0  :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>P = []<tab>空列をPとする<EOS>
<SOS>Max = 123456 * 2<tab>123456に2を掛けた値をMaxとする<EOS>
<SOS>D = list(range(2, Max))<tab>2からMax未満までの数列のリストをDとする<EOS>
<SOS>limit = math.sqrt(Max)<tab>math.sqrt(Max)をlimitとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>p = D[0]<tab>Dの最初値をpとする<EOS>
<SOS>if limit <= p  :<tab>limitがp以下のとき、<EOS>
<SOS>return P<tab>Pを関数出力とする<EOS>
<SOS>D = [d for d in D if d % p != 0]<tab>Dの各要素をdとし、{{{{dをpで割った余り}}が0と等しくない}}ときのdの列をDとする<EOS>
<SOS>e = Era(P, Max)<tab>Era(P,Max)をeとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>N, T, E  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にN、T、Eとする<EOS>
<SOS>X = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをXとする<EOS>
<SOS>time = [i for i in range(T - E, T + E + 1)]<tab>{{TからEを引いた値}}から{{{{TにEを加えた値}}に1を加えた値}}未満までの数列の各要素をiとし、iの列をtimeとする<EOS>
<SOS>clock = -2<tab>-2をclockとする<EOS>
<SOS>for i  in range(len(X))  :<tab>0からXの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(len(time))  :<tab>0からtimeの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if time[j] % X[i] == 0  :<tab>time(j)をX(i)で割った余りが0のとき、<EOS>
<SOS>clock = X.index(X[i])<tab>X.index(X[i])をclockとする<EOS>
<SOS>print(clock + 1)<tab>clockに1を加えた値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>hantei1 = hantei2=  hantei3 = 0<tab>0をhantei3をhantei2とするとするをhantei1とする<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>if n == '.' :<tab>nが'.'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>l_n = list(n)<tab>nのリストをl_nとする<EOS>
<SOS>lenn = len(l_n)<tab>l_nの長さをlennとする<EOS>
<SOS>kakko = []<tab>空列をkakkoとする<EOS>
<SOS>lenkakko = len(kakko)<tab>kakkoの長さをlenkakkoとする<EOS>
<SOS>for i  in range(lenn) :<tab>0からlenn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if l_n.count('(') != l_n.count(')') or l_n.count('[') != l_n.count(']') :<tab>{{l_n内の'('の出現をカウントした整数}}が{{l_n内の')'の出現をカウントした整数}}と等しくなく、または{{l_n内の'['の出現をカウントした整数}}が{{l_n内の']'の出現をカウントした整数}}と等しくないとき、<EOS>
<SOS>print('no')<tab>'no'を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if l_n[i] == '(' :<tab>l_n(i)が'('のとき、<EOS>
<SOS>if l_n[i] == '[' :<tab>l_n(i)が'['のとき、<EOS>
<SOS>if len(kakko) != 0 :<tab>kakkoの長さが0と等しくないとき、<EOS>
<SOS>if kakko[-1] == 'maru' :<tab>kakko(-1)が'maru'のとき、<EOS>
<SOS>if l_n[i] == ']' :<tab>l_n(i)が']'のとき、<EOS>
<SOS>print('no')<tab>'no'を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if kakko[-1] == 'shikaku' :<tab>kakko(-1)が'shikaku'のとき、<EOS>
<SOS>if l_n[i] == ')' :<tab>l_n(i)が')'のとき、<EOS>
<SOS>print('no')<tab>'no'を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if l_n[i] == ')' or l_n[i] == ']' :<tab>l_n(i)が')'、またはl_n(i)が']'のとき、<EOS>
<SOS>kakko.pop(-1)<tab>kakko.pop(-1)<EOS>
<SOS>if hantei1 == 0 :<tab>hantei1が0のとき、<EOS>
<SOS>print('yes')<tab>'yes'を出力する<EOS>
<SOS>if __name__ == '__main__' :<tab>識別子が'__main__'のとき、<EOS>
<SOS>print('Hello World')<tab>'Hello World'を出力する<EOS>
<SOS>print(int(input())**3)<tab>入力された文字列の整数値の3乗を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a * b, end=' ')<tab>aにbを掛けた値と((end, ' '))からなる辞書を出力する<EOS>
<SOS>print(2 * (a + b))<tab>2に({{aにbを加えた値}})の組を掛けた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>operator = '>' if a > b else '<' if a < b else '=='<tab>aがbより大きいとき'>'、そうでなければ{{aがbより小さい}}とき'<'、そうでなければ'=='をoperatorとする<EOS>
<SOS>print("a {} b".format(operator))<tab>format(operator)を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>answer = 'Yes' if a < b < c else 'No'<tab>{{aがbより小さいかどうか}}がcより小さいとき'Yes'、そうでなければ'No'をanswerとする<EOS>
<SOS>print(answer)<tab>answerを出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>normal, express, both  = map(int, f.readline().split())<tab>map(整数,f.readline()を空白で分割した列)を展開し順にnormal、express、bothとする<EOS>
<SOS>print('Open' if (normal and express) or both else 'Close')<tab>(normal、かつexpress)の組、またはbothのとき'Open'、そうでなければ'Close'を出力する<EOS>
<SOS>S = int(input())<tab>入力された文字列の整数値をSとする<EOS>
<SOS>h = int(S / 3600)<tab>Sを3600で割った値の整数値をhとする<EOS>
<SOS>m = int((S % 3600) / 60)<tab>({{Sを3600で割った余り}})の組を60で割った値の整数値をmとする<EOS>
<SOS>s = S % 60<tab>Sを60で割った余りをsとする<EOS>
<SOS>print(h,m,s,sep=':')<tab>h、m、s、((sep, ':'))からなる辞書を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>d = int(a / b)<tab>aをbで割った値の整数値をdとする<EOS>
<SOS>r = a % b<tab>aをbで割った余りをrとする<EOS>
<SOS>f = a / b<tab>aをbで割った値をfとする<EOS>
<SOS>print(d, r,"{:f}".format(f))<tab>d、r、format(f)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>r = float(input())<tab>入力された文字列の浮動小数点数値をrとする<EOS>
<SOS>area = math.pi * (r ** 2)<tab>math.piに(rの2乗)の組を掛けた値をareaとする<EOS>
<SOS>circumference = 2 * math.pi * r<tab>2にmath.piを掛けた値にrを掛けた値をcircumferenceとする<EOS>
<SOS>print("{:f} {:f}".format(area, circumference))<tab>テンプレートareaをcircumferenceでフォーマットした文字列を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>a, b  = map(int, f.readline().split())<tab>map(整数,f.readline()を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print('{:.6f}'.format(a * b / 3.305785))<tab>format({{{{aにbを掛けた値}}を3.305785で割った値}})を出力する<EOS>
<SOS>print(*sorted(map(int, input().split())))<tab>*({{map(整数,{{input()を空白で分割した列}})をソートした列}})を出力する<EOS>
<SOS>W, H, x, y, r  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にW、H、x、y、rとする<EOS>
<SOS>print( 'Yes' if r <= x <= W - r and r <= y <= H - r else 'No')<tab>{{{{rがx以下かどうか}}が{{Wからrを引いた値}}以下}}、かつ{{{{rがy以下かどうか}}が{{Hからrを引いた値}}以下かどうか}}のとき'Yes'、そうでなければ'No'を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>values = [None,6000,4000,3000,2000]<tab>(未定値、6000、4000、3000、2000)からなる列をvaluesとする<EOS>
<SOS>for line  in f :<tab>fの各要素を順にlineとして、繰り返す<EOS>
<SOS>t, n  = map(int, line.split())<tab>map(整数,lineを空白で分割した列)を展開し順にtとnとする<EOS>
<SOS>print(values[t] * n)<tab>values(t)にnを掛けた値を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>for line  in f :<tab>fの各要素を順にlineとして、繰り返す<EOS>
<SOS>a, b  = map(int, line.split())<tab>map(整数,lineを空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>print(sum(int(i) for i in sys.stdin))<tab>{{sys.stdinの各要素をiとし、iの整数値の列}}の総和を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>return math.ceil(num  / 1000) * 1000<tab>math.ceil(num  / 1000) に1000を掛けた値を関数出力とする<EOS>
<SOS>debt = 100000<tab>100000をdebtとする<EOS>
<SOS>for _  in range(int(input())) :<tab>0から入力された文字列の整数値未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>debt = roundup1000(debt * 1.05)<tab>roundup1000(debtに1.05を掛けた値)をdebtとする<EOS>
<SOS>print(debt)<tab>debtを出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(a, b + 1) :<tab>aからbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if c % i == 0 :<tab>cをiで割った余りが0のとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>for pre  in range(1, 10) :<tab>1から10未満までの数列の各要素を順にpreとして、繰り返す<EOS>
<SOS>for post  in range(1, 10) :<tab>1から10未満までの数列の各要素を順にpostとして、繰り返す<EOS>
<SOS>print('{}x{}={}'.format(pre, post, pre * post))<tab>format(pre,post,{{preにpostを掛けた値}})を出力する<EOS>
<SOS>tmp = '#.' * 151<tab>'#.'に151を掛けた値をtmpとする<EOS>
<SOS>odd = tmp[:W]<tab>tmpの位置先頭から位置Wまでの部分をoddとする<EOS>
<SOS>even = tmp[1:W + 1]<tab>tmpの位置1から位置Wに1を加えた値までの部分をevenとする<EOS>
<SOS>print((odd + '\n' + even + '\n') * (H // 2) + (odd  + '\n' if H % 2 else ''))<tab>{{({{odd + '\n' + even に'\n'を加えた値}})の組に({{Hを2で割った商}})の組を掛けた値}}に({{{{Hを2で割った余りの}}とき{{oddに'\n'を加えた値}}、そうでなければ''}})の組を加えた値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H, W  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == W == 0 :<tab>HがWかどうかが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>a = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>print(min(a), max(a), sum(a))<tab>aの最小値、aの最大値、aの総和を出力する<EOS>
<SOS>cache = {}<tab>空辞書をcacheとする<EOS>
<SOS>if x not in cache :<tab>not in(x,cache)のとき、<EOS>
<SOS>cache[x]  = f(x)<tab>f(x)をcache[x] にする<EOS>
<SOS>return cache[x]<tab>cache(x)を関数出力とする<EOS>
<SOS>return helper<tab>helperを関数出力とする<EOS>
<SOS>if n in (0, 1) :<tab>nが(0と1)の組に含まれるとき、<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>print(fib(int(input())))<tab>fib(入力された文字列の整数値)を出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>a = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>a.reverse()<tab>a.reverse()<EOS>
<SOS>print(*a)<tab>*(a)を出力する<EOS>
<SOS>mountains = [int(input()) for _ in range(10)]<tab>{{0から10未満までの数列}}の各要素を_とし、入力された文字列の整数値の列をmountainsとする<EOS>
<SOS>for height  in sorted(mountains)[-3:][::-1] :<tab>{{mountainsをソートした列}}の先頭-3個を取り除いた部分の逆順の各要素を順にheightとして、繰り返す<EOS>
<SOS>print(height)<tab>heightを出力する<EOS>
<SOS>print(input().upper())<tab>入力された文字列を英大文字に変換した文字列を出力する<EOS>
<SOS>print(input().swapcase())<tab>入力された文字列の英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x = sum(map(int,input()))<tab>map(整数,入力された文字列)の総和をxとする<EOS>
<SOS>if x :<tab>xのとき、<EOS>
<SOS>print(x)<tab>xを出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>keyword = input().lower()<tab>入力された文字列を英小文字に変換した文字列をkeywordとする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for line  in sys.stdin :<tab>sys.stdinの各要素を順にlineとして、繰り返す<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>p = input()<tab>入力された文字列をpとする<EOS>
<SOS>print('Yes' if (s * 2).count(p) else 'No')<tab>{{({{sに2を掛けた値}})の組内のpの出現をカウントした整数の}}とき'Yes'、そうでなければ'No'を出力する<EOS>
<SOS>t_point, h_point  = 0, 0<tab>0と0をt_pointとh_pointとする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>t_card, h_card  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にt_cardとh_cardとする<EOS>
<SOS>if t_card == h_card :<tab>t_cardがh_cardのとき、<EOS>
<SOS>print(t_point, h_point)<tab>t_pointとh_pointを出力する<EOS>
<SOS>x1, y1, x2, y2  = map(float, input().split())<tab>map(float,入力された文字列を空白で分割した列)を展開し順にx1、y1、x2、y2とする<EOS>
<SOS>print(((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5)<tab>({{(x1 - x2) の2乗に(y1 - y2) の2乗を加えた値}})の組の0.5乗を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>a, b, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、Cとする<EOS>
<SOS>h = b * math.sin(math.radians(C))<tab>bにmath.sin(math.radians(C))を掛けた値をhとする<EOS>
<SOS>S = a * h * 0.5<tab>aにhを掛けた値に0.5を掛けた値をSとする<EOS>
<SOS>L = a + b + math.sqrt(pow(a, 2) + pow(b, 2) - 2 * a * b *math.cos(math.radians(C)))<tab>aにbを加えた値にmath.sqrt(pow(a, 2) + pow(b, 2) - 2 * a * b *math.cos(math.radians(C)))を加えた値をLとする<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>print(L)<tab>Lを出力する<EOS>
<SOS>print(h)<tab>hを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0 :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをsとする<EOS>
<SOS>ave = sum(s) / n<tab>sの総和をnで割った値をaveとする<EOS>
<SOS>dev = math.sqrt(sum((ave - si) ** 2 for si in s) / n)<tab>math.sqrt(sum((ave - si) ** 2 for si in s) / n)をdevとする<EOS>
<SOS>print("{:.8f}".format(dev))<tab>format(dev)を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>for line  in sys.stdin :<tab>sys.stdinの各要素を順にlineとして、繰り返す<EOS>
<SOS>m, f, r  = map(int, line.split())<tab>map(整数,lineを空白で分割した列)を展開し順にm、f、rとする<EOS>
<SOS>if m == f == r == -1 :<tab>{{mがfかどうか}}がrかどうかが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if m == -1 or f == -1 :<tab>mが-1、またはfが-1のとき、<EOS>
<SOS>print('F')<tab>'F'を出力する<EOS>
<SOS>print('A')<tab>'A'を出力する<EOS>
<SOS>print('B')<tab>'B'を出力する<EOS>
<SOS>print('C')<tab>'C'を出力する<EOS>
<SOS>if r >= 50 :<tab>rが50以上のとき、<EOS>
<SOS>print('C')<tab>'C'を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, x  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとxとする<EOS>
<SOS>if n == x == 0 :<tab>nがxかどうかが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>result = 0<tab>0をresultとする<EOS>
<SOS>for a  in range(1, x // 3) :<tab>1からxを3で割った商未満までの数列の各要素を順にaとして、繰り返す<EOS>
<SOS>for b  in range(a + 1,  x // 2) :<tab>aに1を加えた値からxを2で割った商未満までの数列の各要素を順にbとして、繰り返す<EOS>
<SOS>c = x - a - b<tab>xからaを引いた値からbを引いた値をcとする<EOS>
<SOS>if b < c <= n :<tab>bがcより小さいかどうかがn以下のとき、<EOS>
<SOS>print(result)<tab>resultを出力する<EOS>
<SOS>n, m, L  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、Lとする<EOS>
<SOS>a = [list(map(int, input().split())) for _ in range(n)]<tab>{{0からn未満までの数列}}の各要素を_とし、map(整数,{{input()を空白で分割した列}})のリストの列をaとする<EOS>
<SOS>b = [list(map(int, input().split())) for _ in range(m)]<tab>{{0からm未満までの数列}}の各要素を_とし、map(整数,{{input()を空白で分割した列}})のリストの列をbとする<EOS>
<SOS>c = [[sum(ak * bk for ak, bk in zip(ai,bj)) for bj in zip(*b)] for ai in a]<tab>aの各要素をaiとし、{{{{*bの要素をそれぞれ組にした列}}の各要素をbjとし、ak * bk for ak, bk in zip(ai,bj)の総和の列}}の列をcとする<EOS>
<SOS>for ci  in c :<tab>cの各要素を順にciとして、繰り返す<EOS>
<SOS>print(*ci)<tab>*(ci)を出力する<EOS>
<SOS>if n :<tab>nのとき、<EOS>
<SOS>return power(m * m % 1000000007, n // 2) * (m if n % 2 else 1) % 1000000007<tab>power({{{{mにmを掛けた値}}を1000000007で割った余り}},{{nを2で割った商}})に({{{{nを2で割った余りの}}ときm、そうでなければ1}})の組を掛けた値を1000000007で割った余りを関数出力とする<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>readline = stdin.readline<tab>stdin.readlineをreadlineとする<EOS>
<SOS>m, n  = map(int, readline().split())<tab>map(整数,readline()を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>print(power(m, n))<tab>power(m,n)を出力する<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>if x < y :<tab>xがyより小さいとき、<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>while y :<tab>yの間、繰り返す<EOS>
<SOS>x = x % y<tab>xをyで割った余りをxとする<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>return x, cnt<tab>(xとcnt)の組を関数出力とする<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, b  = map(int, f.readline().split())<tab>map(整数,f.readline()を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == 0 :<tab>aが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(*euclidean_algorithm(a, b))<tab>*(euclidean_algorithm(a,b))を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>mini, big  = (a, b) if a < b else (b, a)<tab>aがbより小さいとき(aとb)の組、そうでなければ(bとa)の組を展開し順にminiとbigとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>rem = big % mini<tab>bigをminiで割った余りをremとする<EOS>
<SOS>if rem == 0 :<tab>remが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>mini, big  = rem, mini<tab>remとminiをminiとbigとする<EOS>
<SOS>print(mini)<tab>miniを出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>for line  in sys.stdin :<tab>sys.stdinの各要素を順にlineとして、繰り返す<EOS>
<SOS>d = int(line)<tab>lineの整数値をdとする<EOS>
<SOS>print(sum(i * i * d for i in range(d, 600, d)))<tab>{{{{dから600未満までのd間隔の数列}}の各要素をiとし、{{{{iにiを掛けた値}}にdを掛けた値}}の列}}の総和を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>for line  in sys.stdin :<tab>sys.stdinの各要素を順にlineとして、繰り返す<EOS>
<SOS>a, b, c, d, e, f  = map(int, line.split())<tab>map(整数,lineを空白で分割した列)を展開し順にa、b、c、d、e、fとする<EOS>
<SOS>y = (a * f - d * c) / (a * e - b * d)<tab>({{{{aにfを掛けた値}}から{{dにcを掛けた値}}を引いた値}})の組を({{{{aにeを掛けた値}}から{{bにdを掛けた値}}を引いた値}})の組で割った値をyとする<EOS>
<SOS>x = (c * e - b * f) / (a * e - b * d)<tab>({{{{cにeを掛けた値}}から{{bにfを掛けた値}}を引いた値}})の組を({{{{aにeを掛けた値}}から{{bにdを掛けた値}}を引いた値}})の組で割った値をxとする<EOS>
<SOS>if x == 0 :<tab>xが0のとき、<EOS>
<SOS>x = abs(x)<tab>xの絶対値をxとする<EOS>
<SOS>if y == 0 :<tab>yが0のとき、<EOS>
<SOS>x = abs(y)<tab>yの絶対値をxとする<EOS>
<SOS>print('{:.3f} {:.3f}'.format(x, y))<tab>テンプレートxをyでフォーマットした文字列を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>q = int(f.readline())<tab>f.readline()の整数値をqとする<EOS>
<SOS>if q == -1 :<tab>qが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = q / 2<tab>qを2で割った値をxとする<EOS>
<SOS>while abs(x ** 3 - q) >= 0.00001 * q :<tab>{{xの3乗からqを引いた値}}の絶対値が0.00001にqを掛けた値以上の間、繰り返す<EOS>
<SOS>x = x - (x ** 3 - q) / (3 * x ** 2)<tab>xから({{xの3乗からqを引いた値}})の組を({{3にxの2乗を掛けた値}})の組で割った値を引いた値をxとする<EOS>
<SOS>print('{:.6f}'.format(x))<tab>format(x)を出力する<EOS>
<SOS>print(input()[::-1])<tab>入力された文字列の逆順を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>return s == s[::-1]<tab>sがsの逆順かどうかを関数出力とする<EOS>
<SOS>print(sum(1 for line in f if is_symmetry(line.strip())))<tab>{{fの各要素をlineとし、is_symmetry({{lineの両端から空白改行を取り除いた文字列}})のときの1の列}}の総和を出力する<EOS>
<SOS>import collections<tab>collectionsモジュールを用いる<EOS>
<SOS>c = collections.Counter(input().split())<tab>collections.Counter(input().split())をcとする<EOS>
<SOS>longest = ''<tab>''をlongestとする<EOS>
<SOS>for word  in c :<tab>cの各要素を順にwordとして、繰り返す<EOS>
<SOS>if len(longest) < len(word) :<tab>longestの長さがwordの長さより小さいとき、<EOS>
<SOS>longest = word<tab>wordをlongestとする<EOS>
<SOS>print(c.most_common(1)[0][0], longest)<tab>c.most_common(1)の最初値の最初値とlongestを出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>sentences = f.readline().split()<tab>f.readline()を空白で分割した列をsentencesとする<EOS>
<SOS>for i  in range(len(sentences)) :<tab>0からsentencesの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if 'apple' in sentences[i] :<tab>'apple'がsentences(i)に含まれるとき、<EOS>
<SOS>sentences[i]  = sentences[i].replace('apple', 'peach')<tab>sentences(i)内の'apple'を'peach'で置き換えた文字列をsentences[i] にする<EOS>
<SOS>sentences[i]  = sentences[i].replace('peach', 'apple')<tab>sentences(i)内の'peach'を'apple'で置き換えた文字列をsentences[i] にする<EOS>
<SOS>print(' '.join(sentences))<tab>sentencesを文字列' 'で連結した文字列を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>import string<tab>stringモジュールを用いる<EOS>
<SOS>secret = 0<tab>0をsecretとする<EOS>
<SOS>for line  in f :<tab>fの各要素を順にlineとして、繰り返す<EOS>
<SOS>line = list(line)<tab>lineのリストをlineとする<EOS>
<SOS>for i  in range(len(line)) :<tab>0からlineの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if line[i] not in string.digits :<tab>not in(line(i),string.digits)のとき、<EOS>
<SOS>line[i]  = ' '<tab>' 'をline[i] にする<EOS>
<SOS>print(secret)<tab>secretを出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>lines = [list(map(int, line.split())) for line in sys.stdin]<tab>sys.stdinの各要素をlineとし、map(整数,{{lineを空白で分割した列}})のリストの列をlinesとする<EOS>
<SOS>for i  in range(0, len(lines), 2) :<tab>0からlinesの長さ未満までの2間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = lines[i]<tab>lines(i)をaとする<EOS>
<SOS>b = lines[i + 1]<tab>lines(iに1を加えた値)をbとする<EOS>
<SOS>hit = sum(1 for i in range(len(a)) if a[i] == b[i])<tab>{{0からaの長さ未満までの数列}}の各要素をiとし、{{a(i)がb(i)の}}ときの1の列の総和をhitとする<EOS>
<SOS>blow = sum(1 for bi in b if bi in a) - hit<tab>{{bの各要素をbiとし、{{biがaに含まれる}}ときの1の列}}の総和からhitを引いた値をblowとする<EOS>
<SOS>print(hit, blow)<tab>hitとblowを出力する<EOS>
<SOS>readline = stdin.readline<tab>stdin.readlineをreadlineとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>old_room_num = int(readline())<tab>readline()の整数値をold_room_numとする<EOS>
<SOS>if old_room_num == 0 :<tab>old_room_numが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>octal = oct(old_room_num)[2:]<tab>old_room_numの8進文字列の先頭2個を取り除いた部分をoctalとする<EOS>
<SOS>new_room_num = octal.translate(str.maketrans('4567', '5789'))<tab>octal.translate(str.maketrans('4567', '5789'))をnew_room_numとする<EOS>
<SOS>print(new_room_num)<tab>new_room_numを出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>import string<tab>stringモジュールを用いる<EOS>
<SOS>OFFSET = ord('a')<tab>'a'の順序数をOFFSETとする<EOS>
<SOS>return ord(c) - OFFSET<tab>cの順序数からOFFSETを引いた値を関数出力とする<EOS>
<SOS>return chr((alpha * gamma + beta) % 26 + OFFSET)<tab>文字コード{{({{alpha * gamma にbetaを加えた値}})の組を26で割った余り}}にOFFSETを加えた値の文字を関数出力とする<EOS>
<SOS>return from_gamma(to_gamma(c), alpha, beta)<tab>from_gamma(to_gamma(c),alpha,beta)を関数出力とする<EOS>
<SOS>b = to_gamma(w[2])<tab>to_gamma(w(2))をbとする<EOS>
<SOS>for a  in range(26) :<tab>0から26未満までの数列の各要素を順にaとして、繰り返す<EOS>
<SOS>if w[0] == affine('t',a,b) and w[1] == affine('h',a,b) :<tab>w(0)がaffine('t',a,b)、かつw(1)がaffine('h',a,b)のとき、<EOS>
<SOS>return a, b<tab>(aとb)の組を関数出力とする<EOS>
<SOS>return -1, -1<tab>(-1と-1)の組を関数出力とする<EOS>
<SOS>a = (to_gamma(w[0]) - to_gamma(w[3]) + 26) % 26<tab>({{{{to_gamma(w[0])からto_gamma(w[3])を引いた値}}に26を加えた値}})の組を26で割った余りをaとする<EOS>
<SOS>for b  in range(26) :<tab>0から26未満までの数列の各要素を順にbとして、繰り返す<EOS>
<SOS>if w[0] == affine('t',a,b) and w[1] == affine('h',a,b) and w[2] == affine('i',a,b) and w[3] == affine('s',a,b) :<tab>{{w(0)がaffine('t',a,b)}}、かつ{{w(1)がaffine('h',a,b)かどうか}}、かつ{{w(2)がaffine('i',a,b)かどうか}}、かつw(3)がaffine('s',a,b)のとき、<EOS>
<SOS>return a, b<tab>(aとb)の組を関数出力とする<EOS>
<SOS>return -1, -1<tab>(-1と-1)の組を関数出力とする<EOS>
<SOS>if w[0] == w[3] :<tab>w(0)がw(3)のとき、<EOS>
<SOS>return search_that(w)<tab>search_that(w)を関数出力とする<EOS>
<SOS>n = int(f.readline())<tab>f.readline()の整数値をnとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>line = f.readline().strip()<tab>f.readline()の両端から空白改行を取り除いた文字列をlineとする<EOS>
<SOS>words = [word for word in line.split() if len(word) == 4]<tab>{{lineを空白で分割した列}}の各要素をwordとし、{{wordの長さが4の}}ときのwordの列をwordsとする<EOS>
<SOS>for word  in words :<tab>wordsの各要素を順にwordとして、繰り返す<EOS>
<SOS>a, b  = search(word)<tab>search(word)を展開し順にaとbとする<EOS>
<SOS>if a != -1 :<tab>aが-1と等しくないとき、<EOS>
<SOS>print(line.translate(str.maketrans(''.join([affine(c, a, b) for c in string.ascii_lowercase]), string.ascii_lowercase)))<tab>line.translate(str.maketrans(''.join([affine(c, a, b) for c in string.ascii_lowercase]), string.ascii_lowercase))を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>f = sys.stdin<tab>sys.stdinをfとする<EOS>
<SOS>for line  in f :<tab>fの各要素を順にlineとして、繰り返す<EOS>
<SOS>line = line.strip()<tab>lineの両端から空白改行を取り除いた文字列をlineとする<EOS>
<SOS>index = line.find('@')<tab>lineの先頭から'@'を探して見つかった位置をindexとする<EOS>
<SOS>while index != -1 :<tab>indexが-1と等しくない間、繰り返す<EOS>
<SOS>target = line[index:index + 3]<tab>lineの位置indexから位置indexに3を加えた値までの部分をtargetとする<EOS>
<SOS>line = line.replace(target, target[2] * int(target[1]))<tab>line内のtargetをtarget(2)にtarget(1)の整数値を掛けた値で置き換えた文字列をlineとする<EOS>
<SOS>index = line.find('@')<tab>lineの先頭から'@'を探して見つかった位置をindexとする<EOS>
<SOS>print(line)<tab>lineを出力する<EOS>
<SOS>cost = [0]<tab>(0)からなる列をcostとする<EOS>
<SOS>for c  in y :<tab>yの各要素を順にcとして、繰り返す<EOS>
<SOS>for i  in range(len(cost) -1, -1, -1) :<tab>costの長さから1を引いた値から-1未満までの-1間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>index = x.find(c, cost[i]) + 1<tab>xの位置cost(i)からcを探して見つかった位置に1を加えた値をindexとする<EOS>
<SOS>if index :<tab>indexのとき、<EOS>
<SOS>if i + 1 < len(cost) :<tab>iに1を加えた値がcostの長さより小さいとき、<EOS>
<SOS>cost[i + 1]  = min(cost[i + 1], index)<tab>cost({{iに1を加えた値}})とindexの最小値をcost[i + 1] にする<EOS>
<SOS>return len(cost)  - 1<tab>costの長さから1を引いた値を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for _  in range(n) :<tab>0からn未満までの数列の各要素を順に_として、繰り返す<EOS>
<SOS>x = input()<tab>入力された文字列をxとする<EOS>
<SOS>y = input()<tab>入力された文字列をyとする<EOS>
<SOS>print(longest_common(x, y))<tab>longest_common(x,y)を出力する<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>R = [int(input()) for _ in range(N)]<tab>{{0からN未満までの数列}}の各要素を_とし、入力された文字列の整数値の列をRとする<EOS>
<SOS>p_buy = R[0]<tab>Rの最初値をp_buyとする<EOS>
<SOS>p_sale = R[1]<tab>R(1)をp_saleとする<EOS>
<SOS>buy = R[1]<tab>R(1)をbuyとする<EOS>
<SOS>sale = None<tab>未定値をsaleとする<EOS>
<SOS>for i  in range(2, N) :<tab>2からN未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if p_sale < R[i] :<tab>p_saleがR(i)より小さいとき、<EOS>
<SOS>p_sale = R[i]<tab>R(i)をp_saleとする<EOS>
<SOS>if buy > R[i] :<tab>buyがR(i)より大きいとき、<EOS>
<SOS>if sale is None :<tab>is(sale,未定値)のとき、<EOS>
<SOS>sale = R[i]<tab>R(i)をsaleとする<EOS>
<SOS>if p_sale - p_buy < sale - buy :<tab>p_saleからp_buyを引いた値がsaleからbuyを引いた値より小さいとき、<EOS>
<SOS>p_sale, p_buy  = sale, buy<tab>saleとbuyをp_saleとp_buyとする<EOS>
<SOS>sale, buy  = None, R[i]<tab>未定値とR(i)をsaleとbuyとする<EOS>
<SOS>p_gain = p_sale - p_buy<tab>p_saleからp_buyを引いた値をp_gainとする<EOS>
<SOS>print(p_gain if sale is None else max(p_gain, sale - buy))<tab>is(sale,未定値)のときp_gain、そうでなければp_gainと{{saleからbuyを引いた値}}の最大値を出力する<EOS>
<SOS>import operator<tab>operatorモジュールを用いる<EOS>
<SOS>func = {'+':operator.add, '-':operator.sub, '*':operator.mul}<tab>(('+', operatorのadd)、('-', operator.sub)、('*', operator.mul))からなる辞書をfuncとする<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>for symbol  in input().split() :<tab>入力された文字列を空白で分割した列の各要素を順にsymbolとして、繰り返す<EOS>
<SOS>if symbol.isdigit() :<tab>symbolが全て数字のとき、<EOS>
<SOS>print(stack[0])<tab>stackの最初値を出力する<EOS>
<SOS>import sys<tab>sysモジュールを用いる<EOS>
<SOS>n, q  = map(int, sys.stdin.readline().split())<tab>map(整数,sys.stdin.readline()を空白で分割した列)を展開し順にnとqとする<EOS>
<SOS>processes = []<tab>空列をprocessesとする<EOS>
<SOS>for i  in range(n) :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, time  = sys.stdin.readline().split()<tab>sys.stdin.readline()を空白で分割した列を展開し順にnameとtimeとする<EOS>
<SOS>progress = 0<tab>0をprogressとする<EOS>
<SOS>while len(processes) :<tab>processesの長さの間、繰り返す<EOS>
<SOS>new_processes = []<tab>空列をnew_processesとする<EOS>
<SOS>for target  in processes :<tab>processesの各要素を順にtargetとして、繰り返す<EOS>
<SOS>if target[1] > q :<tab>target(1)がqより大きいとき、<EOS>
<SOS>processes = new_processes<tab>new_processesをprocessesとする<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>s = set(int(i) for i in input().split())<tab>{{入力された文字列を空白で分割した列}}の各要素をiとし、iの整数値の列の集合をsとする<EOS>
<SOS>q = input()<tab>入力された文字列をqとする<EOS>
<SOS>t = set(int(i) for i in input().split())<tab>{{入力された文字列を空白で分割した列}}の各要素をiとし、iの整数値の列の集合をtとする<EOS>
<SOS>print(len(t & s))<tab>&(t,s)の長さを出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>s = set(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})の集合をsとする<EOS>
<SOS>q = input()<tab>入力された文字列をqとする<EOS>
<SOS>t = set(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})の集合をtとする<EOS>
<SOS>print(len(t & s))<tab>&(t,s)の長さを出力する<EOS>
<SOS>import itertools<tab>itertoolsモジュールを用いる<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>a = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをaとする<EOS>
<SOS>q = input()<tab>入力された文字列をqとする<EOS>
<SOS>aset = set()<tab>集合をasetとする<EOS>
<SOS>for i  in range(1, len(a) + 1) :<tab>1からaの長さに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for m  in map(int, input().split()) :<tab>map(整数,入力された文字列を空白で分割した列)の各要素を順にmとして、繰り返す<EOS>
<SOS>print('yes' if m in aset else 'no')<tab>{{mがasetに含まれる}}とき'yes'、そうでなければ'no'を出力する<EOS>
<SOS>readline = stdin.readline<tab>stdin.readlineをreadlineとする<EOS>
<SOS>adjacent = ((1, 3), (0, 2, 4), (1, 5), (0, 4, 6), (1, 3, 5, 7), (2, 4, 8), (3, 7), (4, 6, 8), (5, 7))<tab>((1と3)の組、(0、2、4)の組、(1と5)の組、(0、4、6)の組、(1、3、5、7)の組、(2、4、8)の組、(3と7)の組、(4、6、8)の組、(5と7)の組)の組をadjacentとする<EOS>
<SOS>for nxt  in adjacent[space] :<tab>adjacent(space)の各要素を順にnxtとして、繰り返す<EOS>
<SOS>if nxt == prev :<tab>nxtがprevのとき、<EOS>
<SOS>continue<tab>最初からもう一度、繰り返す<EOS>
<SOS>b = board[:]<tab>boardの先頭から末尾まで(のコピー)をbとする<EOS>
<SOS>b[space], b[nxt]  = b[nxt], 0<tab>b(nxt)と0をb(space)とb(nxt)とする<EOS>
<SOS>end = [1, 2, 3, 4, 5, 6, 7, 8, 0]<tab>(1、2、3、4、5、6、7、8、0)からなる列をendとする<EOS>
<SOS>FORE = 1<tab>1をFOREとする<EOS>
<SOS>BACK = 0<tab>0をBACKとする<EOS>
<SOS>if start == end :<tab>startがendのとき、<EOS>
<SOS>return 0<tab>0を関数出力とする<EOS>
<SOS>table = {}<tab>空辞書をtableとする<EOS>
<SOS>table[tuple(start)]  = (FORE, 0)<tab>(FOREと0)の組をtable[tuple(start)] にする<EOS>
<SOS>table[tuple(end)]  = (BACK, 0)<tab>(BACKと0)の組をtable[tuple(end)] にする<EOS>
<SOS>heap = [(0, start, start.index(0), None, FORE), (0, end, end.index(0), None, BACK)]<tab>((0、start、start.index(0)、未定値、FORE)の組と(0、end、end.index(0)、未定値、BACK)の組)からなる列をheapとする<EOS>
<SOS>while heap :<tab>heapの間、繰り返す<EOS>
<SOS>i, board, space, prev, direction  = heappop(heap)<tab>heappop(heap)を展開し順にi、board、space、prev、directionとする<EOS>
<SOS>for b, nxt  in next_board(board, space, prev) :<tab>next_board(board,space,prev)の各要素を順にbとnxtとして、繰り返す<EOS>
<SOS>key = tuple(b)<tab>bの組をkeyとする<EOS>
<SOS>if key in table :<tab>keyがtableに含まれるとき、<EOS>
<SOS>if table[key][0] != direction :<tab>table(key)(0)がdirectionと等しくないとき、<EOS>
<SOS>return table[key][1] + i<tab>table(key)(1)にiを加えた値を関数出力とする<EOS>
<SOS>continue<tab>最初からもう一度、繰り返す<EOS>
<SOS>table[key]  = (direction, i)<tab>(directionとi)の組をtable[key] にする<EOS>
<SOS>if b == end :<tab>bがendのとき、<EOS>
<SOS>return i<tab>iを関数出力とする<EOS>
<SOS>heappush(heap, (i, b, nxt, space, direction))<tab>heappush(heap,(i、b、nxt、space、direction)の組)<EOS>
<SOS>start = (map(int, readline().split()) for _ in range(3))<tab>({{0から3未満までの数列}}の各要素を_とし、map(整数,{{readline()を空白で分割した列}})の列)の組をstartとする<EOS>
<SOS>start = [y for x in start for y in x]<tab>{{xの各要素をyとし、startの列}}の各要素をxとし、yの列をstartとする<EOS>
<SOS>print(search(start))<tab>search(start)を出力する<EOS>
