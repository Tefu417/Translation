def euler019():   ## 関数euler019()は、以下の通り定義される
d = 365   ## dを365とする
sd = 0   ## sdを0とする
for y in range(1901, 2001):   ## {{1901から2001未満までの数列}}を先頭から順にyとして、以下を繰り返す
for i, day in enumerate(days):   ## {{daysに番号をつける}}を先頭から順にiとdayとして、以下を繰り返す
if d % 7 == 6:   ## もし{{dを7で割った余り}}が6と等しいとき、
sd += 1   ## sdを1だけ増加させる
d += day    ## dをdayだけ増加させる
if (y % 400 == 0 or ((not y % 100 == 0) and y % 4 == 0)) and i == 1:   ## もし{{{{yを400で割った余り}}が0と等しいか}}、または{{{{yを100で割った余り}}が0と等しいか}}の反対、かつ{{{{yを4で割った余り}}が0と等しいか}}、かつ{{iが1と等しいか}}のとき、
d += 1   ## dを1だけ増加させる
return sd   ## sdが関数出力となる
def euler019_is_leap_year(y):   ## 関数euler019_is_leap_year(y)は、以下の通り定義される
return y % 400 == 0 or ((not y % 100 == 0) and y % 4 == 0)   ## {{{{yを400で割った余り}}が0と等しいか}}、または{{{{yを100で割った余り}}が0と等しいか}}の反対、かつ{{{{yを4で割った余り}}が0と等しいか}}が関数出力となる
def euler019_names_of_the_day(y, m, d):   ## 関数euler019_names_of_the_day(y, m, d)は、以下の通り定義される
if m <= 2:   ## もしmが2以下のとき、以下のとおり
m += 12   ## mを12だけ増加させる
y -= 1   ## yを1だけ減少させる
gamma = 0   ## gammaを0とする
if 1582 <= y:   ## もし1582がy以下のとき、
gamma = -2 * int(y / 100) + int( int(y / 100) / 4 )   ## gammaを{{{{-2に{{yを100で割った値}}の整数値を掛けた値}}に{{{{yを100で割った値}}の整数値を4で割った値}}の整数値を加えた値}}とする
もしそうでなければ、
gamma = -1 * int(y / 100) + 5   ## gammaを{{{{-1に{{yを100で割った値}}の整数値を掛けた値}}に5を加えた値}}とする
h = (d + int(26 * (m + 1) / 10) + (y % 100) + int((y % 100) / 4) + gamma) % 7   ## hを{{dに{{{{26に{{mに1を加えた値}}を掛けた値}}を10で割った値}}の整数値を加えた値}}に{{yを100で割った余り}}を加えた値に{{{{yを100で割った余り}}を4で割った値}}の整数値を加えた値にgammaを加えた値を7で割った余りとする
return name[h]   ## nameのh番目が関数出力となる
