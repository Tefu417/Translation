def euler002():   ## 関数euler002()は、以下の通り定義される
fib = [1, 2]   ## fibを1と2のリストとする
while fib[-1] < 4000000:   ## もしfibの-1番目が4000000より小さいとき、以下を繰り返す
fib.append(fib[-1] + fib[-2])   ## fibに{{fibの-1番目にfibの-2番目を加えた値}}を追加する
s = 0   ## sを0とする
for x in fib:   ## fibを先頭から順にxとして、以下を繰り返す
if x % 2 == 0:   ## もし{{xを2で割った余り}}が0と等しいとき、
s += x   ## sをxだけ増加させる
return s   ## sが関数出力となる
def euler002_divide_2(n):   ## 関数euler002_divide_2(n)は、以下の通り定義される
return n % 2 == 0   ## {{{{nを2で割った余り}}が0と等しいか}}が関数出力となる
def euler002_add_param(a, b):   ## 関数euler002_add_param(a, b)は、以下の通り定義される
return a + b   ## {{aにbを加えた値}}が関数出力となる
def euler002_sum_list(l):   ## 関数euler002_sum_list(l)は、以下の通り定義される
s = 0   ## sを0とする
for x in l:   ## lを先頭から順にxとして、以下を繰り返す
s += x   ## sをxだけ増加させる
return s   ## sが関数出力となる
def euler002_sum_list_a(l):   ## 関数euler002_sum_list_a(l)は、以下の通り定義される
return sum(l)   ## lの総和が関数出力となる
def euler002_n_fibnocci_sequence(n):   ## 関数euler002_n_fibnocci_sequence(n)は、以下の通り定義される
fibs = [0, 1]   ## fibsを0と1のリストとする
a = n - 2   ## aを{{nから2を引いた値}}とする
if n == 1:   ## もしnが1と等しいとき、
return [0]   ## 0のリストが関数出力となる
もしそうでなければ、
while a > 0:   ## もしaが0より大きいとき、以下を繰り返す
fibs.append(fibs[-1] + fibs[-2])   ## fibsに{{fibsの-1番目にfibsの-2番目を加えた値}}を追加する
a -= 1   ## aを1だけ減少させる
return fibs   ## fibsが関数出力となる
def euler002_n_fibnocci_number(n):   ## 関数euler002_n_fibnocci_number(n)は、以下の通り定義される
fibs = [0, 1]   ## fibsを0と1のリストとする
if 0 < n <= 2:   ## もし{{0がnより小さいか}}が2以下のとき、
return fibs[n - 1]   ## fibsの{{nから1を引いた値}}番目が関数出力となる
もしそうでなければ、
a = n - 2    ## aを{{nから2を引いた値}}とする
while a > 0:   ## もしaが0より大きいとき、以下を繰り返す
fibs.append(fibs[-1] + fibs[-2])   ## fibsに{{fibsの-1番目にfibsの-2番目を加えた値}}を追加する
a -= 1   ## aを1だけ減少させる
return fibs[-1]   ## fibsの-1番目が関数出力となる
