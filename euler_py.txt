def euler015():
facts = [1] * 21
for i in range(20):
facts[i + 1] = facts[i] * (i + 1)
dinomials = [0] * 21
for i in range(21):
dinomials[i] = int(facts[20] / (facts[i] * facts[20 - i]))
for i in range(20):
for j in range(20):
dinomials[j] += dinomials[j + 1]
return dinomials[0]
def euler015_combination(n, r):
facts = [1] * (n + 1)
for x in range(n):
facts[x + 1] = facts[x] * (x + 1)
return int(facts[n] / (facts[r] * facts[n - r]))
def euler015_all_factorials(n):
facts = [1] * (n + 1)
for x in range(n):
facts[x + 1] = facts[x] * (x + 1)
return facts
def euler015_pascal_triangle(n):
if n == 1:
return [1]
l = euler015_pascal_triangle(n - 1)
ret = [l[0], l[-1]]
for i in range(n - 2):
ret.insert(i + 1, l[i] + l[i + 1])
return ret
def euler014():
N = 10**6
cl = [-1] * N
cl[1] = 0
for n in range(2, N):
b = []
while n >= N or cl[n] == -1:
b.append(n)
n = int(n / 2) if n % 2 == 0 else n * 3 + 1
l = cl[n]
for m in reversed(b):
l += 1
cl[m] = l
ret = 0
for i, n in enumerate(cl):
if m < n:
ret = i
return ret
def euler014_collatz_calc(n):
return int(n / 2) if n % 2 == 0 else n * 3 + 1
def euler014_collatz_problem_count(n):
c = 0
n = int(n / 2) if n % 2 == 0 else n * 3 + 1
return c
def euler014_list_init(l, n):
ret = []
ret.append(n)
return ret
def euler014_list_enum(l):
ret = []
for i in range(len(l)):
ret.append((i, l[i]))
return ret
def euler014_list_reverse(l):
ret = []
for i in reversed(l):
ret.append(i)
return ret
def euler014_make_range_list(s, e):
ret = []
for i in range(s, e):
ret.append(i)
return ret
def euler016():
q = str(2**1000)
s = 0
for x in q:
def euler016_all_digit_sum(n):
q = str(n)
s = 0
for ch in q:
s += int(ch)
return s
def euler016_n_separate_digit(n):
ret = [n % 10]
while int(n / 10) > 0:
n = int(n / 10)
ret.insert(0, n % 10)
return ret
def euler016_a_exp_b(a, b):
res = 1
c = 0
while c < b:
res *= a
c += 1
return res
def euler016_a_exp_b_a(a, b):
return a**b
def euler017():
ret = 0
for n in range(1, 1001):
ret += len(word[n])
elif len(str(n)) == 2:
ret += len(twoword[int(n / 10)])
ret += len(word[n % 10])
elif len(str(n)) == 3:
ret += len(word[int(n / 100)])
ret += len("hundredand")
a = n % 100
if a != 0 and a <= 20:
ret += len(word[a])
elif a == 0:
ret -= 3
ret += len(twoword[int(a / 10)])
ret += len(word[a % 10])
ret += len("onethousand")
return ret
def euler017_digit_separate(n):
q = str(n)
ret = []
for ch in q:
ret.append(int(ch))
return ret
def euler017_digit_count(n):
c = 1
while int(n / 10) > 0:
n /= 10
c += 1
return c
def euler017_ones_to_string(n):
return word[n % 10]
def euler017_is_equal(a, b):
return a == b
def euler017_divid_integer_part(a, b):
return int(a / b)
def euler017_string_length(s):
c = 0
for ch in s:
c += 1
return c
def euler017_string_length_a(s):
return len(s)
def euler013():
q = []
a = str(sum(q))
ret = ""
for i, ch in enumerate(a):
if i < 10:
ret += ch
return ret
def euler013_front_n_slice(s, n):
ret = ""
for i, ch in enumerate(s):
if i < n:
ret += ch
return ret
def euler013_query_n_sum(q, n):
s = 0
for i in range(n):
s += q[i]
return s
def euler012():
s = 1
c = 0
pl = [2]
fl = [1] * 4 + [0] * 96
while c < 500:
tn = sum(range(1, s + 1))
if not s % 2:
t = (int(s / 2), s + 1)
t = (s, int((s + 1) / 2))
fc = 1
for x in t:
if len(fl) < x:
l = [0] * (x - len(fl) + 1)
fl += l
if not fl[x]:
nc = 1
for i in range(pl[-1], x + 1):
for j in range(2, int(x**0.5) + 1):
if i % j == 0:
break
for i in pl:
if i > int(tn / 2):
break
if x % i == 0:
j = 1
a = tn
while a % i == 0:
a /= i
j += 1
fl[x] = nc
fc *= fl[x]
s += 1
c = fc
return tn
def euler012_a_over_b(a, b):
return b < a
def euler012_range_prime_enumerate(s, e):
pl = []
if s <= 1:
s = 2
for i in range(s, e + 1):
f = True
for j in range(2, int(i**0.5) + 1):
if i % j == 0:
break
return pl
def euler012_is_coprime(a, b):
while b != 0:
a, b = b, a % b
return a == 1
def euler012_count_division(n, a):
ret = 0
while n % a == 0:
n /= a
ret += 1
return ret
def euler012_prime_factorize(n):
primes = [True] * (n + 1)
p = []
for i in range(2, int(n**0.5) + 1):
if primes[i]:
for j in range(i + i, n + 1, i):
primes[j] = False
for i in range(2, n + 1):
if primes[i]:
p.append(i)
fl = []
for x in p:
if n % x == 0:
a = n
c = 0
while a % x == 0:
a /= x
c += 1
return fl
def euler012_nth_triangular_number(n):
return sum(range(1, n + 1))
def euler012_next_triangular_number(tn):
ret = 0
c = 1
while ret <= tn:
ret += c
c += 1
return ret
def euler012_count_divisor(expl):
ret = 1
for x in expl:
ret *= (x + 1)
return ret
def euler012_is_list_empty(l):
return not l
def euler012_is_list_empty_a(l):
return len(l) == 0
def euler010():
p = [True] * 2000000
for x in range(2, int(2000000**0.5) + 1):
if p[x]:
for i in range(2 * x, len(p), x):
p[i] = False
ret = []
for i in range(2, 2000000):
if p[i]:
ret.append(i)
return sum(ret)
def euler010_enum_prime(n):
p = [True] * n
for x in range(2, int(n**0.5) + 1):
if p[x]:
for i in range(2 * x, len(p), x):
p[i] = False
ret = []
for i in range(2, n):
if p[i]:
ret.append(i)
return ret
def euler010_n_is_prime(n):
judge = True
if n < 2:
return False
elif n == 2:
return True
for i in range(2, int(n**0.5) + 1):
if judge and n % i == 0:
judge = False
return judge
def euler010_list_sum(l):
s = 0
for x in l:
s += x
return s
def euler010_list_sum_a(l):
return sum(l)
def euler010_n_multiple_list(s, e, d):
ret = []
while s < e:
ret.append(s)
s += d
return ret
@TODO [#MultiString '""']
def euler011():
grid = """""".split()
q = []
for ch in grid:
q.append(int(ch))
m = 0
for i in range(20):
for j in range(20):
if j <= 16:
m = max(m, q[i*20+j] * q[i*20+j+1] * q[i*20+j+2] * q[i*20+j+3])
if i <= 16:
m = max(m, q[i*20+j] * q[(i+1)*20+j+1] * q[(i+2)*20+j+2] * q[(i+3)*20+j+3])
if 4 <= j and i <= 16:
m = max(m, q[i*20+j] * q[(i+1)*20+j-1] * q[(i+2)*20+j-2] * q[(i+3)*20+j-3])
if i <= 16:
m = max(m, q[i*20+j] * q[(i+1)*20+j] * q[(i+2)*20+j] * q[(i+3)*20+j])
return m
def euler011_less_or_equal(a, b):
return a <= b
def euler011_less_or_equal_a(a, b):
res = b - a
return res >= 0
def euler011_over_or_equal(a, b):
return b <= a
def euler011_over_or_equal_a(a, b):
res = b - a
return res <= 0
def euler011_string_space_split(s):
sl = []
buf = ""
for ch in s:
if ch == " ":
sl.append(buf)
buf = ""
buf += ch
sl.append(buf)
return sl
def euler011_zero_to_n_list(n):
ret = []
a = 0
while a < n:
ret.append(a)
a += 1
return ret
def euler011_zero_to_n_list_a(n):
return list(range(n))
def euler011_upward_point(x, y):
return (x, y - 1)
def euler011_downward_point(x, y):
return (x, y + 1)
def euler011_left_point(x, y):
return (x - 1, y)
def euler011_right_point(x, y):
return (x + 1, y)
def euler011_upper_left_point(x, y):
return (x - 1, y - 1)
def euler011_upper_right_point(x, y):
return (x + 1, y - 1)
def euler011_lower_left_point(x, y):
return (x - 1, y + 1)
def euler011_lower_right_point(x, y):
return (x + 1, y + 1)
def euler009():
for i in range(1, 1000):
for j in range(i, 1000):
for k in range(j, 1000):
p = i * i + j * j
if p == k * k and i + j + k == 1000:
return i * j * k
def euler009_is_pythagoras(a, b, c):
return a * a + b * b == c * c
def euler009_n_square(n):
return n * n
def euler009_n_square_a(n):
ret = 0
for i in range(l):
ret += n
return ret
def euler009_is_sum_equation1000(tp):
s = 0
for x in tp:
s += x
if m < N:
return s == 1000
def euler009_is_sum_equation1000_a(tp):
return sum(tp) == 1000
def euler009_all_product(l):
ret = 1
for a in l:
ret *= a
return ret
def euler008():
sl = []
for i in range(5):
sl.append(int(s[i]))
m = 1
for i in sl:
m *= i
for i in range(5, len(s)):
sl.append(int(s[i]))
sl.pop(0)
a = 1
for j in sl:
a *= j
m = max(m, a)
return m
def euler008_all_product(l):
ret = 1
for x in l:
ret *= x
return ret
def euler008_list_slice(l, s, c):
ret = []
for i in range(c):
ret.append(l[s + i])
return ret
def euler008_elem_max(a, b):
return b if a < b else a
def euler008_elem_max_a(a, b):
return max(a, b)
def euler008_list_add(l, a):
tmp = [a]
l += tmp
return l
def euler008_list_add_a(l, a):
l.append(a)
return l
def euler005():
prime = []
for i in range(2, 20):
l = []
for y in prime:
l.append(y)
if len(l) == 0:
prime.append(i)
a = 1
for p in prime:
for i in range(int(20**(1/p))):
a = a * p
return a
def euler005_enum_prime(n):
prime = []
for i in range(2, n + 1):
f = True
for j in prime:
if i % j == 0:
f = False
break
if f:
prime.append(i)
return prime
def euler005_enum_prime_a(n):
primes = []
for i in range(2, n + 1):
if i == 2:
primes.append(i)
for j in range(2, int(i**0.5) + 1):
if i % j == 0:
break
return primes
def euler005_enum_prime_b(n):
primes = [True] * (n + 1)
ret = []
for i in range(2, int(n**0.5) + 1):
if primes[i]:
for j in range(i + i, n + 1, i):
primes[j] = False
for i in range(2, n + 1):
if primes[i]:
ret.append(i)
return ret
def euler005_expmax(p, n):
a = 1
while a < n:
a *= p
return int(a / p)
def euler005_expmax_a(p, n):
return p**int(n**(1/p))
def euler004():
ans = 0
for j in range(999, 99, -1):
for i in range(999, 99, -1):
s = (str)(j * i)
a = ""
b = ""
sep = (int)(len(s) / 2) + (len(s) % 2)
for k in range(sep):
a += s[k]
b += s[len(s) - k - 1]
if a == b:
ans = max(ans, i * j)
return ans
def euler004_n_slice(s, n):
ret = ""
for i in range(n):
ret += s[i]
return ret
def euler004_n_bslice(s, n):
ret = ""
for i in range(n):
ret += s[len(s) - 1 - i]
return ret
def euler004_is_equal(a, b):
return a == b
def euler004_half_digit(n):
s = (str)(n)
a = len(s)
return (int)(a / 2) + (a % 2)
def euler004_multiple(a, b):
return a * b
def euler004_multiple_a(a, b):
res = 0
for i in range(b):
res += a
return res
def euler004_string_reverse(s):
ret = ""
for ch in reversed(s):
ret += ch
return ret
def euler004_is_palindromic(s):
rs = ""
for ch in reversed(s):
rs += ch
return s == rs
def euler006():
sumofsq = 0
for i in range(100):
sumofsq += (i + 1) * (i + 1)
sqofsum = 101 * 50
return sumofsq - sqofsum
def euler006_make_common_diff_sequence(s, d, n):
ret = [s]
for i in range(n - 1):
ret.append(ret[-1] + d)
return ret
def euler006_make_common_diff_sequence_a(s, d, n):
ret = []
for i in range(s, s + (d * n), d):
ret.append(i)
return ret
def euler006_n_square(n):
return n * n
def euler006_n_square_a(n):
ret = 0
for i in range(n):
ret += n
return ret
def euler006_sum_a_to_b(a, b):
s = 0
while a < b:
s += a
a += 1
return s
def euler006_sum_a_to_b_a(a, b):
return sum(range(a, b))
@TODO [#ListForExpr append: [#Name 'i'][#ForExpr each: [#Name 'i']list: [#ApplyExpr name: [#Name 'range']params: [#Arguments [#Int '2'][#Infix left: [#ApplyExpr name: [#Name 'int']params: [#Arguments [#MethodExpr recv: [#Name 'math']name: [#Name 'sqrt']params: [#Arguments [#Name 'p']]]]]name: [#Name '+']right: [#Int '1']]]]cond: [#Infix left: [#Infix left: [#Name 'p']name: [#Name '%']right: [#Name 'i']]name: [#Name '==']right: [#Int '0']]]]
def euler007():
count = 0
p = 1
pl = []
while count < 10001:
p += 1
l = [ i for i in range(2, int(math.sqrt(p)) + 1) if p % i == 0 ]
if len(l) == 0:
count += 1
return p
def euler007_n_division(a, n):
return a % n == 0
def euler007_n_division_a(a, n):
while a > 0:
a -= n
return a == 0
def euler007_is_prime(a):
dl = []
for i in range(2, a):
if a % i == 0:
dl.append(i)
return len(dl) == 0
def euler007_is_prime_a(a):
if a < 2:
return False
elif a == 2:
return True
for i in range(2, int(a**0.5) + 1):
if a % i == 0:
return False
return True
def euler007_succ(a):
return a + 1
def euler007_is_less(a, b):
return a < b
def euler007_is_equale_zero(a):
return a == 0
def euler003():
n = 600851475143
i = 2
while i * i < n:
while n % i == 0:
n = n / i
i = i + 1
return int(n)
def euler003_n_morethan_square(a, n):
return a * a < n
def euler003_n_divide_a(n, a):
while n % a == 0:
n /= a
return int(n)
def euler002():
fib = [1, 2]
while fib[-1] < 4000000:
fib.append(fib[-1] + fib[-2])
s = 0
for x in fib:
if x % 2 == 0:
s += x
return s
def euler002_divide_2(n):
return n % 2 == 0
def euler002_add_param(a, b):
return a + b
def euler002_sum_list(l):
s = 0
for x in l:
s += x
return s
def euler002_sum_list_a(l):
return sum(l)
def euler002_n_fibnocci_sequence(n):
fibs = [0, 1]
a = n - 2
if n == 1:
return [0]
while a > 0:
fibs.append(fibs[-1] + fibs[-2])
a -= 1
return fibs
def euler002_n_fibnocci_number(n):
fibs = [0, 1]
if 0 < n <= 2:
return fibs[n - 1]
a = n - 2 
while a > 0:
fibs.append(fibs[-1] + fibs[-2])
a -= 1
return fibs[-1]
def euler020():
fact = 1
for i in range(100):
fact *= (i + 1)
s = str(fact)
q = []
for ch in s:
q.append(int(ch))
return sum(q)
def euler020_factorial(n):
ret = 1
for x in range(n):
ret *= (x + 1)
return ret
def euler020_digit_sum(n):
q = str(n)
s = 0
for x in q:
s += int(x)
return s
def euler019():
d = 365
for y in range(1901, 2001):
for i, day in enumerate(days):
if d % 7 == 6:
sd += 1
d += day 
if (y % 400 == 0 or ((not y % 100 == 0) and y % 4 == 0)) and i == 1:
d += 1
return sd
def euler019_is_leap_year(y):
return y % 400 == 0 or ((not y % 100 == 0) and y % 4 == 0)
def euler019_names_of_the_day(y, m, d):
if m <= 2:
m += 12
y -= 1
gamma = 0
if 1582 <= y:
gamma = -2 * int(y / 100) + int( int(y / 100) / 4 )
gamma = -1 * int(y / 100) + 5
h = (d + int(26 * (m + 1) / 10) + (y % 100) + int((y % 100) / 4) + gamma) % 7
return name[h]
def euler018():
for i in reversed(range(len(tri) - 1)):
for j in range(len(tri[i])):
tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])
return tri[0][0]
