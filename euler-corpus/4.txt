def euler004():   ## 関数euler004()は、以下の通り定義される
ans = 0   ## ansを0とする
for j in range(999, 99, -1):   ## {{999から99未満までの-1間隔の数列}}を先頭から順にjとして、以下を繰り返す
for i in range(999, 99, -1):   ## {{999から99未満までの-1間隔の数列}}を先頭から順にiとして、以下を繰り返す
s = (str)(j * i)   ## sを(str)({{jにiを掛けた値}})とする
a = ""   ## aを""とする
b = ""   ## bを""とする
sep = (int)(len(s) / 2) + (len(s) % 2)   ## sepを{{(int)({{sの長さを2で割った値}})に{{sの長さを2で割った余り}}を加えた値}}とする
for k in range(sep):   ## {{0からsep未満までの数列}}を先頭から順にkとして、以下を繰り返す
a += s[k]   ## aをsのk番目だけ増加させる
b += s[len(s) - k - 1]   ## bをsの{{{{sの長さからkを引いた値}}から1を引いた値}}番目だけ増加させる
if a == b:   ## もしaがbと等しいとき、
ans = max(ans, i * j)   ## ansをansと{{iにjを掛けた値}}の最大値とする
return ans   ## ansが関数出力となる
def euler004_n_slice(s, n):   ## 関数euler004_n_slice(s, n)は、以下の通り定義される
ret = ""   ## retを""とする
for i in range(n):   ## {{0からn未満までの数列}}を先頭から順にiとして、以下を繰り返す
ret += s[i]   ## retをsのi番目だけ増加させる
return ret   ## retが関数出力となる
def euler004_n_bslice(s, n):   ## 関数euler004_n_bslice(s, n)は、以下の通り定義される
ret = ""   ## retを""とする
for i in range(n):   ## {{0からn未満までの数列}}を先頭から順にiとして、以下を繰り返す
ret += s[len(s) - 1 - i]   ## retをsの{{{{sの長さから1を引いた値}}からiを引いた値}}番目だけ増加させる
return ret   ## retが関数出力となる
def euler004_is_equal(a, b):   ## 関数euler004_is_equal(a, b)は、以下の通り定義される
return a == b   ## {{aがbと等しいか}}が関数出力となる
def euler004_half_digit(n):   ## 関数euler004_half_digit(n)は、以下の通り定義される
s = (str)(n)   ## sを(str)(n)とする
a = len(s)   ## aをsの長さとする
return (int)(a / 2) + (a % 2)   ## {{(int)({{aを2で割った値}})に{{aを2で割った余り}}を加えた値}}が関数出力となる
def euler004_multiple(a, b):   ## 関数euler004_multiple(a, b)は、以下の通り定義される
return a * b   ## {{aにbを掛けた値}}が関数出力となる
def euler004_multiple_a(a, b):   ## 関数euler004_multiple_a(a, b)は、以下の通り定義される
res = 0   ## resを0とする
for i in range(b):   ## {{0からb未満までの数列}}を先頭から順にiとして、以下を繰り返す
res += a   ## resをaだけ増加させる
return res   ## resが関数出力となる
def euler004_string_reverse(s):   ## 関数euler004_string_reverse(s)は、以下の通り定義される
ret = ""   ## retを""とする
for ch in reversed(s):   ## {{sを反転した列}}を先頭から順にchとして、以下を繰り返す
ret += ch   ## retをchだけ増加させる
return ret   ## retが関数出力となる
def euler004_is_palindromic(s):   ## 関数euler004_is_palindromic(s)は、以下の通り定義される
rs = ""   ## rsを""とする
for ch in reversed(s):   ## {{sを反転した列}}を先頭から順にchとして、以下を繰り返す
rs += ch   ## rsをchだけ増加させる
return s == rs   ## {{sがrsと等しいか}}が関数出力となる
